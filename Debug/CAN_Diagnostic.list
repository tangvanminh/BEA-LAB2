
CAN_Diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001720  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008810  08008810  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08008818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          0000029c  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145d9  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a66  00000000  00000000  000346cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00037138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  000381d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022875  00000000  00000000  00039128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001234c  00000000  00000000  0005b99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b09  00000000  00000000  0006dce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f7f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005124  00000000  00000000  0013f848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014496c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00144990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070d0 	.word	0x080070d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	080070d0 	.word	0x080070d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <spi1_communication>:
function :	SPI1 send data
parameter:
send_char:	sned data
******************************************************************************/
uint8_t spi1_communication(uint8_t send_char)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	uint8_t chRetry = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
	uint8_t chTemp = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	73bb      	strb	r3, [r7, #14]

	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800057a:	e007      	b.n	800058c <spi1_communication+0x24>
		if (++ chRetry > 200) {
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2bc8      	cmp	r3, #200	; 0xc8
 8000586:	d901      	bls.n	800058c <spi1_communication+0x24>
			return 0;
 8000588:	2300      	movs	r3, #0
 800058a:	e02d      	b.n	80005e8 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800058c:	4818      	ldr	r0, [pc, #96]	; (80005f0 <spi1_communication+0x88>)
 800058e:	f004 fd77 	bl	8005080 <HAL_SPI_GetState>
 8000592:	4603      	mov	r3, r0
 8000594:	2b03      	cmp	r3, #3
 8000596:	d0f1      	beq.n	800057c <spi1_communication+0x14>
		}
	}

	HAL_SPI_Transmit(&hspi1, &send_char, 1, 1000);
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	2201      	movs	r2, #1
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <spi1_communication+0x88>)
 80005a2:	f004 f97e 	bl	80048a2 <HAL_SPI_Transmit>

	chRetry=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005aa:	e007      	b.n	80005bc <spi1_communication+0x54>
		if (++ chRetry > 200) {
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	3301      	adds	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2bc8      	cmp	r3, #200	; 0xc8
 80005b6:	d901      	bls.n	80005bc <spi1_communication+0x54>
			return 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	e015      	b.n	80005e8 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <spi1_communication+0x88>)
 80005be:	f004 fd5f 	bl	8005080 <HAL_SPI_GetState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d0f1      	beq.n	80005ac <spi1_communication+0x44>
		}
	}

	HAL_SPI_Receive(&hspi1, &chTemp, 1, 1000);
 80005c8:	f107 010e 	add.w	r1, r7, #14
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	2201      	movs	r2, #1
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <spi1_communication+0x88>)
 80005d4:	f004 faa1 	bl	8004b1a <HAL_SPI_Receive>

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {
 80005d8:	bf00      	nop
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <spi1_communication+0x88>)
 80005dc:	f004 fd50 	bl	8005080 <HAL_SPI_GetState>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d0f9      	beq.n	80005da <spi1_communication+0x72>

	}

	return chTemp;
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000248 	.word	0x20000248

080005f4 <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <lcd_write_byte+0x24>
        LCD_DC_H();
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <lcd_write_byte+0x54>)
 8000612:	f003 fc8f 	bl	8003f34 <HAL_GPIO_WritePin>
 8000616:	e005      	b.n	8000624 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <lcd_write_byte+0x54>)
 8000620:	f003 fc88 	bl	8003f34 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000624:	2200      	movs	r2, #0
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <lcd_write_byte+0x54>)
 800062a:	f003 fc83 	bl	8003f34 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff99 	bl	8000568 <spi1_communication>
    LCD_CS_H();
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <lcd_write_byte+0x54>)
 800063c:	f003 fc7a 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020400 	.word	0x40020400

0800064c <lcd_write_command>:
parameter:
     chByte : send data
		 chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffc7 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffc2 	bl	80005f4 <lcd_write_byte>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <delay_ms>:
/******************************************************************************
Function Name  : delay
			parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 8000680:	f241 3388 	movw	r3, #5000	; 0x1388
 8000684:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 8000686:	e008      	b.n	800069a <delay_ms+0x22>
		for(;j>2;j--){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3b01      	subs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d8f9      	bhi.n	8000688 <delay_ms+0x10>
	for(;ms>2;ms--)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d8f6      	bhi.n	800068e <delay_ms+0x16>

		}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <lcd_init>:
/******************************************************************************
Function Name  : initials lcd control pin
			parameter:
******************************************************************************/
void lcd_init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	LCD_RST_H();
 80006b4:	2201      	movs	r2, #1
 80006b6:	2104      	movs	r1, #4
 80006b8:	4881      	ldr	r0, [pc, #516]	; (80008c0 <lcd_init+0x210>)
 80006ba:	f003 fc3b 	bl	8003f34 <HAL_GPIO_WritePin>
	LCD_CS_H();
 80006be:	2201      	movs	r2, #1
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	487f      	ldr	r0, [pc, #508]	; (80008c0 <lcd_init+0x210>)
 80006c4:	f003 fc36 	bl	8003f34 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 80006c8:	2201      	movs	r2, #1
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	487c      	ldr	r0, [pc, #496]	; (80008c0 <lcd_init+0x210>)
 80006ce:	f003 fc31 	bl	8003f34 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 80006d2:	2201      	movs	r2, #1
 80006d4:	2104      	movs	r1, #4
 80006d6:	487a      	ldr	r0, [pc, #488]	; (80008c0 <lcd_init+0x210>)
 80006d8:	f003 fc2c 	bl	8003f34 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006dc:	2005      	movs	r0, #5
 80006de:	f7ff ffcb 	bl	8000678 <delay_ms>
	LCD_RST_L();
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	4876      	ldr	r0, [pc, #472]	; (80008c0 <lcd_init+0x210>)
 80006e8:	f003 fc24 	bl	8003f34 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f7ff ffc3 	bl	8000678 <delay_ms>
	LCD_RST_H();
 80006f2:	2201      	movs	r2, #1
 80006f4:	2104      	movs	r1, #4
 80006f6:	4872      	ldr	r0, [pc, #456]	; (80008c0 <lcd_init+0x210>)
 80006f8:	f003 fc1c 	bl	8003f34 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006fc:	2005      	movs	r0, #5
 80006fe:	f7ff ffbb 	bl	8000678 <delay_ms>
	LCD_CS_H();
 8000702:	2201      	movs	r2, #1
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	486e      	ldr	r0, [pc, #440]	; (80008c0 <lcd_init+0x210>)
 8000708:	f003 fc14 	bl	8003f34 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 800070c:	2100      	movs	r1, #0
 800070e:	2011      	movs	r0, #17
 8000710:	f7ff ff70 	bl	80005f4 <lcd_write_byte>
	delay_ms(10);
 8000714:	200a      	movs	r0, #10
 8000716:	f7ff ffaf 	bl	8000678 <delay_ms>
	lcd_write_command(0x36,0x00);
 800071a:	2100      	movs	r1, #0
 800071c:	2036      	movs	r0, #54	; 0x36
 800071e:	f7ff ff95 	bl	800064c <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 8000722:	2105      	movs	r1, #5
 8000724:	203a      	movs	r0, #58	; 0x3a
 8000726:	f7ff ff91 	bl	800064c <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 800072a:	2100      	movs	r1, #0
 800072c:	20b2      	movs	r0, #178	; 0xb2
 800072e:	f7ff ff61 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000732:	2101      	movs	r1, #1
 8000734:	200c      	movs	r0, #12
 8000736:	f7ff ff5d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800073a:	2101      	movs	r1, #1
 800073c:	200c      	movs	r0, #12
 800073e:	f7ff ff59 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000742:	2101      	movs	r1, #1
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff55 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 800074a:	2101      	movs	r1, #1
 800074c:	2033      	movs	r0, #51	; 0x33
 800074e:	f7ff ff51 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000752:	2101      	movs	r1, #1
 8000754:	2033      	movs	r0, #51	; 0x33
 8000756:	f7ff ff4d 	bl	80005f4 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 800075a:	2135      	movs	r1, #53	; 0x35
 800075c:	20b7      	movs	r0, #183	; 0xb7
 800075e:	f7ff ff75 	bl	800064c <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 8000762:	2128      	movs	r1, #40	; 0x28
 8000764:	20bb      	movs	r0, #187	; 0xbb
 8000766:	f7ff ff71 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 800076a:	213c      	movs	r1, #60	; 0x3c
 800076c:	20c0      	movs	r0, #192	; 0xc0
 800076e:	f7ff ff6d 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 8000772:	2101      	movs	r1, #1
 8000774:	20c2      	movs	r0, #194	; 0xc2
 8000776:	f7ff ff69 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 800077a:	210b      	movs	r1, #11
 800077c:	20c3      	movs	r0, #195	; 0xc3
 800077e:	f7ff ff65 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 8000782:	2120      	movs	r1, #32
 8000784:	20c4      	movs	r0, #196	; 0xc4
 8000786:	f7ff ff61 	bl	800064c <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 800078a:	210f      	movs	r1, #15
 800078c:	20c6      	movs	r0, #198	; 0xc6
 800078e:	f7ff ff5d 	bl	800064c <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 8000792:	2100      	movs	r1, #0
 8000794:	20d0      	movs	r0, #208	; 0xd0
 8000796:	f7ff ff2d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 800079a:	2101      	movs	r1, #1
 800079c:	20a4      	movs	r0, #164	; 0xa4
 800079e:	f7ff ff29 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 80007a2:	2101      	movs	r1, #1
 80007a4:	20a1      	movs	r0, #161	; 0xa1
 80007a6:	f7ff ff25 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 80007aa:	2100      	movs	r1, #0
 80007ac:	20e0      	movs	r0, #224	; 0xe0
 80007ae:	f7ff ff21 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 80007b2:	2101      	movs	r1, #1
 80007b4:	20d0      	movs	r0, #208	; 0xd0
 80007b6:	f7ff ff1d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 80007ba:	2101      	movs	r1, #1
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff19 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2008      	movs	r0, #8
 80007c6:	f7ff ff15 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 80007ca:	2101      	movs	r1, #1
 80007cc:	200f      	movs	r0, #15
 80007ce:	f7ff ff11 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80007d2:	2101      	movs	r1, #1
 80007d4:	2011      	movs	r0, #17
 80007d6:	f7ff ff0d 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 80007da:	2101      	movs	r1, #1
 80007dc:	202a      	movs	r0, #42	; 0x2a
 80007de:	f7ff ff09 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 80007e2:	2101      	movs	r1, #1
 80007e4:	2036      	movs	r0, #54	; 0x36
 80007e6:	f7ff ff05 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 80007ea:	2101      	movs	r1, #1
 80007ec:	2055      	movs	r0, #85	; 0x55
 80007ee:	f7ff ff01 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2044      	movs	r0, #68	; 0x44
 80007f6:	f7ff fefd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 80007fa:	2101      	movs	r1, #1
 80007fc:	203a      	movs	r0, #58	; 0x3a
 80007fe:	f7ff fef9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8000802:	2101      	movs	r1, #1
 8000804:	200b      	movs	r0, #11
 8000806:	f7ff fef5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 800080a:	2101      	movs	r1, #1
 800080c:	2006      	movs	r0, #6
 800080e:	f7ff fef1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 8000812:	2101      	movs	r1, #1
 8000814:	2011      	movs	r0, #17
 8000816:	f7ff feed 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 800081a:	2101      	movs	r1, #1
 800081c:	2020      	movs	r0, #32
 800081e:	f7ff fee9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 8000822:	2100      	movs	r1, #0
 8000824:	20e1      	movs	r0, #225	; 0xe1
 8000826:	f7ff fee5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800082a:	2101      	movs	r1, #1
 800082c:	20d0      	movs	r0, #208	; 0xd0
 800082e:	f7ff fee1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 8000832:	2101      	movs	r1, #1
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff fedd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 800083a:	2101      	movs	r1, #1
 800083c:	2007      	movs	r0, #7
 800083e:	f7ff fed9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 8000842:	2101      	movs	r1, #1
 8000844:	200a      	movs	r0, #10
 8000846:	f7ff fed5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800084a:	2101      	movs	r1, #1
 800084c:	200b      	movs	r0, #11
 800084e:	f7ff fed1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 8000852:	2101      	movs	r1, #1
 8000854:	2018      	movs	r0, #24
 8000856:	f7ff fecd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 800085a:	2101      	movs	r1, #1
 800085c:	2034      	movs	r0, #52	; 0x34
 800085e:	f7ff fec9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 8000862:	2101      	movs	r1, #1
 8000864:	2043      	movs	r0, #67	; 0x43
 8000866:	f7ff fec5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 800086a:	2101      	movs	r1, #1
 800086c:	204a      	movs	r0, #74	; 0x4a
 800086e:	f7ff fec1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 8000872:	2101      	movs	r1, #1
 8000874:	202b      	movs	r0, #43	; 0x2b
 8000876:	f7ff febd 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 800087a:	2101      	movs	r1, #1
 800087c:	201b      	movs	r0, #27
 800087e:	f7ff feb9 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 8000882:	2101      	movs	r1, #1
 8000884:	201c      	movs	r0, #28
 8000886:	f7ff feb5 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 800088a:	2101      	movs	r1, #1
 800088c:	2022      	movs	r0, #34	; 0x22
 800088e:	f7ff feb1 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 8000892:	2101      	movs	r1, #1
 8000894:	201f      	movs	r0, #31
 8000896:	f7ff fead 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 800089a:	2100      	movs	r1, #0
 800089c:	2029      	movs	r0, #41	; 0x29
 800089e:	f7ff fea9 	bl	80005f4 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	2051      	movs	r0, #81	; 0x51
 80008a6:	f7ff fed1 	bl	800064c <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 80008aa:	21b0      	movs	r1, #176	; 0xb0
 80008ac:	2055      	movs	r0, #85	; 0x55
 80008ae:	f7ff fecd 	bl	800064c <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 80008b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008b6:	f000 f805 	bl	80008c4 <lcd_clear_screen>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40020400 	.word	0x40020400

080008c4 <lcd_clear_screen>:
Function Name  : clear lcd screen
			parameter:
				hwColor: background color
******************************************************************************/
void lcd_clear_screen(uint16_t hwColor)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 80008ce:	23f0      	movs	r3, #240	; 0xf0
 80008d0:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	019b      	lsls	r3, r3, #6
 80008dc:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 80008de:	2100      	movs	r1, #0
 80008e0:	202a      	movs	r0, #42	; 0x2a
 80008e2:	f7ff fe87 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008e6:	2101      	movs	r1, #1
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe83 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008ee:	2101      	movs	r1, #1
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fe7f 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fe7b 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80008fe:	2101      	movs	r1, #1
 8000900:	20ef      	movs	r0, #239	; 0xef
 8000902:	f7ff fe77 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 8000906:	2100      	movs	r1, #0
 8000908:	202b      	movs	r0, #43	; 0x2b
 800090a:	f7ff fe73 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800090e:	2101      	movs	r1, #1
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fe6f 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000916:	2101      	movs	r1, #1
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fe6b 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe67 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8000926:	2101      	movs	r1, #1
 8000928:	203f      	movs	r0, #63	; 0x3f
 800092a:	f7ff fe63 	bl	80005f4 <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 800092e:	2100      	movs	r1, #0
 8000930:	202c      	movs	r0, #44	; 0x2c
 8000932:	f7ff fe5f 	bl	80005f4 <lcd_write_byte>
#endif
	LCD_CS_L();
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <lcd_clear_screen+0xc8>)
 800093c:	f003 fafa 	bl	8003f34 <HAL_GPIO_WritePin>
	LCD_DC_H();
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	4811      	ldr	r0, [pc, #68]	; (800098c <lcd_clear_screen+0xc8>)
 8000948:	f003 faf4 	bl	8003f34 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e00e      	b.n	8000970 <lcd_clear_screen+0xac>
//		spi1_communication(hwColor>>8);

		spi1_communication(hwColor>>8);
		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe04 	bl	8000568 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fdff 	bl	8000568 <spi1_communication>
	for(i=0;i<wCount;i++){
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	429a      	cmp	r2, r3
 8000976:	d3ec      	bcc.n	8000952 <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8000978:	2201      	movs	r2, #1
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <lcd_clear_screen+0xc8>)
 800097e:	f003 fad9 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400

08000990 <is_joy_pressed>:
int timeOutForKeyPress = TIME_OUT;

// state of joys
int joy_state[NUMBER_OF_JOY] = {NORMAL_STATE};

int is_joy_pressed(int joystick){
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	if(joy_flag[joystick] == 1){
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <is_joy_pressed+0x30>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d106      	bne.n	80009b2 <is_joy_pressed+0x22>
		joy_flag[joystick] = 0;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <is_joy_pressed+0x30>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2100      	movs	r1, #0
 80009aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <is_joy_pressed+0x24>
	}
	return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	200000e0 	.word	0x200000e0

080009c4 <get_joystick>:

void get_joystick(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	//left joy
	temp3[JOY_LEFT] = temp2[JOY_LEFT];
 80009c8:	4b84      	ldr	r3, [pc, #528]	; (8000bdc <get_joystick+0x218>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	4a84      	ldr	r2, [pc, #528]	; (8000be0 <get_joystick+0x21c>)
 80009ce:	6053      	str	r3, [r2, #4]
	temp2[JOY_LEFT] = temp1[JOY_LEFT];
 80009d0:	4b84      	ldr	r3, [pc, #528]	; (8000be4 <get_joystick+0x220>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4a81      	ldr	r2, [pc, #516]	; (8000bdc <get_joystick+0x218>)
 80009d6:	6053      	str	r3, [r2, #4]
	temp1[JOY_LEFT] = HAL_GPIO_ReadPin(GPIOC, JOY_LEFT_PIN);
 80009d8:	2110      	movs	r1, #16
 80009da:	4883      	ldr	r0, [pc, #524]	; (8000be8 <get_joystick+0x224>)
 80009dc:	f003 fa92 	bl	8003f04 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b7f      	ldr	r3, [pc, #508]	; (8000be4 <get_joystick+0x220>)
 80009e6:	605a      	str	r2, [r3, #4]

	if((temp3[JOY_LEFT] == temp2[JOY_LEFT]) && (temp2[JOY_LEFT] == temp1[JOY_LEFT])){
 80009e8:	4b7d      	ldr	r3, [pc, #500]	; (8000be0 <get_joystick+0x21c>)
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	4b7b      	ldr	r3, [pc, #492]	; (8000bdc <get_joystick+0x218>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d12c      	bne.n	8000a4e <get_joystick+0x8a>
 80009f4:	4b79      	ldr	r3, [pc, #484]	; (8000bdc <get_joystick+0x218>)
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4b7a      	ldr	r3, [pc, #488]	; (8000be4 <get_joystick+0x220>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d126      	bne.n	8000a4e <get_joystick+0x8a>
		if(joy_state[JOY_LEFT] != temp3[JOY_LEFT]){
 8000a00:	4b7a      	ldr	r3, [pc, #488]	; (8000bec <get_joystick+0x228>)
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	4b76      	ldr	r3, [pc, #472]	; (8000be0 <get_joystick+0x21c>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d014      	beq.n	8000a36 <get_joystick+0x72>
			joy_state[JOY_LEFT] = temp3[JOY_LEFT];
 8000a0c:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <get_joystick+0x21c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a76      	ldr	r2, [pc, #472]	; (8000bec <get_joystick+0x228>)
 8000a12:	6053      	str	r3, [r2, #4]

			if(joy_state[JOY_LEFT] == PRESSED_STATE){
 8000a14:	4b75      	ldr	r3, [pc, #468]	; (8000bec <get_joystick+0x228>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d118      	bne.n	8000a4e <get_joystick+0x8a>
				timeOutForKeyPress = TIME_OUT;
 8000a1c:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <get_joystick+0x22c>)
 8000a1e:	2264      	movs	r2, #100	; 0x64
 8000a20:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_LEFT] = 1;
 8000a22:	4b74      	ldr	r3, [pc, #464]	; (8000bf4 <get_joystick+0x230>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	605a      	str	r2, [r3, #4]
				joy_flag[JOY_CTR] = 0;
 8000a28:	4b72      	ldr	r3, [pc, #456]	; (8000bf4 <get_joystick+0x230>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_RIGHT] = 0;
 8000a2e:	4b71      	ldr	r3, [pc, #452]	; (8000bf4 <get_joystick+0x230>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	e00b      	b.n	8000a4e <get_joystick+0x8a>
			}
		}else{
			timeOutForKeyPress--;
 8000a36:	4b6e      	ldr	r3, [pc, #440]	; (8000bf0 <get_joystick+0x22c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a6c      	ldr	r2, [pc, #432]	; (8000bf0 <get_joystick+0x22c>)
 8000a3e:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 8000a40:	4b6b      	ldr	r3, [pc, #428]	; (8000bf0 <get_joystick+0x22c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <get_joystick+0x8a>
				joy_state[JOY_LEFT] = NORMAL_STATE;
 8000a48:	4b68      	ldr	r3, [pc, #416]	; (8000bec <get_joystick+0x228>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	605a      	str	r2, [r3, #4]
			}
		}
	}

	//right joy
	temp3[JOY_RIGHT] = temp2[JOY_RIGHT];
 8000a4e:	4b63      	ldr	r3, [pc, #396]	; (8000bdc <get_joystick+0x218>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4a63      	ldr	r2, [pc, #396]	; (8000be0 <get_joystick+0x21c>)
 8000a54:	6093      	str	r3, [r2, #8]
	temp2[JOY_RIGHT] = temp1[JOY_RIGHT];
 8000a56:	4b63      	ldr	r3, [pc, #396]	; (8000be4 <get_joystick+0x220>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4a60      	ldr	r2, [pc, #384]	; (8000bdc <get_joystick+0x218>)
 8000a5c:	6093      	str	r3, [r2, #8]
	temp1[JOY_RIGHT] = HAL_GPIO_ReadPin(GPIOC, JOY_RIGHT_PIN);
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	4861      	ldr	r0, [pc, #388]	; (8000be8 <get_joystick+0x224>)
 8000a62:	f003 fa4f 	bl	8003f04 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b5e      	ldr	r3, [pc, #376]	; (8000be4 <get_joystick+0x220>)
 8000a6c:	609a      	str	r2, [r3, #8]

	if((temp3[JOY_RIGHT] == temp2[JOY_RIGHT]) && (temp2[JOY_RIGHT] == temp1[JOY_RIGHT])){
 8000a6e:	4b5c      	ldr	r3, [pc, #368]	; (8000be0 <get_joystick+0x21c>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	4b5a      	ldr	r3, [pc, #360]	; (8000bdc <get_joystick+0x218>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d12c      	bne.n	8000ad4 <get_joystick+0x110>
 8000a7a:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <get_joystick+0x218>)
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	4b59      	ldr	r3, [pc, #356]	; (8000be4 <get_joystick+0x220>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d126      	bne.n	8000ad4 <get_joystick+0x110>
		if(joy_state[JOY_RIGHT] != temp3[JOY_RIGHT]){
 8000a86:	4b59      	ldr	r3, [pc, #356]	; (8000bec <get_joystick+0x228>)
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <get_joystick+0x21c>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d014      	beq.n	8000abc <get_joystick+0xf8>
			joy_state[JOY_RIGHT] = temp3[JOY_RIGHT];
 8000a92:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <get_joystick+0x21c>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	4a55      	ldr	r2, [pc, #340]	; (8000bec <get_joystick+0x228>)
 8000a98:	6093      	str	r3, [r2, #8]

			if(joy_state[JOY_RIGHT] == PRESSED_STATE){
 8000a9a:	4b54      	ldr	r3, [pc, #336]	; (8000bec <get_joystick+0x228>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d118      	bne.n	8000ad4 <get_joystick+0x110>
				timeOutForKeyPress = TIME_OUT;
 8000aa2:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <get_joystick+0x22c>)
 8000aa4:	2264      	movs	r2, #100	; 0x64
 8000aa6:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_RIGHT] = 1;
 8000aa8:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <get_joystick+0x230>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	609a      	str	r2, [r3, #8]
				joy_flag[JOY_LEFT] = 0;
 8000aae:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <get_joystick+0x230>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
				joy_flag[JOY_CTR] = 0;
 8000ab4:	4b4f      	ldr	r3, [pc, #316]	; (8000bf4 <get_joystick+0x230>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e00b      	b.n	8000ad4 <get_joystick+0x110>
			}
		}else{
			timeOutForKeyPress--;
 8000abc:	4b4c      	ldr	r3, [pc, #304]	; (8000bf0 <get_joystick+0x22c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a4b      	ldr	r2, [pc, #300]	; (8000bf0 <get_joystick+0x22c>)
 8000ac4:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <get_joystick+0x22c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <get_joystick+0x110>
				joy_state[JOY_RIGHT] = NORMAL_STATE;
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <get_joystick+0x228>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	609a      	str	r2, [r3, #8]
			}
		}
	}

	// center joy
	temp3[JOY_CTR] = temp2[JOY_CTR];
 8000ad4:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <get_joystick+0x218>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a41      	ldr	r2, [pc, #260]	; (8000be0 <get_joystick+0x21c>)
 8000ada:	6013      	str	r3, [r2, #0]
	temp2[JOY_CTR] = temp1[JOY_CTR];
 8000adc:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <get_joystick+0x220>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <get_joystick+0x218>)
 8000ae2:	6013      	str	r3, [r2, #0]
	temp1[JOY_CTR] = HAL_GPIO_ReadPin(GPIOC, JOY_CTR_PIN);
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	483f      	ldr	r0, [pc, #252]	; (8000be8 <get_joystick+0x224>)
 8000aea:	f003 fa0b 	bl	8003f04 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <get_joystick+0x220>)
 8000af4:	601a      	str	r2, [r3, #0]

	if((temp3[JOY_CTR] == temp2[JOY_CTR]) && (temp2[JOY_CTR] == temp1[JOY_CTR])){
 8000af6:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <get_joystick+0x21c>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <get_joystick+0x218>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d12c      	bne.n	8000b5c <get_joystick+0x198>
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <get_joystick+0x218>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <get_joystick+0x220>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d126      	bne.n	8000b5c <get_joystick+0x198>
		if(joy_state[JOY_CTR] != temp3[JOY_CTR]){
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <get_joystick+0x228>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <get_joystick+0x21c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d014      	beq.n	8000b44 <get_joystick+0x180>
			joy_state[JOY_CTR] = temp3[JOY_CTR];
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <get_joystick+0x21c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a33      	ldr	r2, [pc, #204]	; (8000bec <get_joystick+0x228>)
 8000b20:	6013      	str	r3, [r2, #0]

			if(joy_state[JOY_CTR] == PRESSED_STATE){
 8000b22:	4b32      	ldr	r3, [pc, #200]	; (8000bec <get_joystick+0x228>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d118      	bne.n	8000b5c <get_joystick+0x198>
				timeOutForKeyPress = TIME_OUT;
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <get_joystick+0x22c>)
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_CTR] = 1;
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <get_joystick+0x230>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_RIGHT] = 0;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <get_joystick+0x230>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
				joy_flag[JOY_LEFT] = 0;
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <get_joystick+0x230>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	e00b      	b.n	8000b5c <get_joystick+0x198>
			}
		}else{
			timeOutForKeyPress--;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <get_joystick+0x22c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a29      	ldr	r2, [pc, #164]	; (8000bf0 <get_joystick+0x22c>)
 8000b4c:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <get_joystick+0x22c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <get_joystick+0x198>
				joy_state[JOY_CTR] = NORMAL_STATE;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <get_joystick+0x228>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//user button
	temp3[USER_BUTTON] = temp2[USER_BUTTON];
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <get_joystick+0x218>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <get_joystick+0x21c>)
 8000b62:	60d3      	str	r3, [r2, #12]
	temp2[USER_BUTTON] = temp1[USER_BUTTON];
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <get_joystick+0x220>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <get_joystick+0x218>)
 8000b6a:	60d3      	str	r3, [r2, #12]
	temp1[USER_BUTTON] = HAL_GPIO_ReadPin(USER_GPIO_Port, USER_Pin);
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <get_joystick+0x234>)
 8000b70:	f003 f9c8 	bl	8003f04 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <get_joystick+0x220>)
 8000b7a:	60da      	str	r2, [r3, #12]

	if((temp3[USER_BUTTON] == temp2[USER_BUTTON]) && (temp2[USER_BUTTON] == temp1[USER_BUTTON])){
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <get_joystick+0x21c>)
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <get_joystick+0x218>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d126      	bne.n	8000bd6 <get_joystick+0x212>
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <get_joystick+0x218>)
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <get_joystick+0x220>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d120      	bne.n	8000bd6 <get_joystick+0x212>
		if(joy_state[USER_BUTTON] != temp3[USER_BUTTON]){
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <get_joystick+0x228>)
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <get_joystick+0x21c>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d00e      	beq.n	8000bbe <get_joystick+0x1fa>
			joy_state[USER_BUTTON] = temp3[USER_BUTTON];
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <get_joystick+0x21c>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <get_joystick+0x228>)
 8000ba6:	60d3      	str	r3, [r2, #12]

			if(joy_state[USER_BUTTON] == PRESSED_STATE){
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <get_joystick+0x228>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d112      	bne.n	8000bd6 <get_joystick+0x212>
				timeOutForKeyPress = TIME_OUT;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <get_joystick+0x22c>)
 8000bb2:	2264      	movs	r2, #100	; 0x64
 8000bb4:	601a      	str	r2, [r3, #0]
				joy_flag[USER_BUTTON] = 1;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <get_joystick+0x230>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
				joy_state[USER_BUTTON] = NORMAL_STATE;
			}
		}
	}

}
 8000bbc:	e00b      	b.n	8000bd6 <get_joystick+0x212>
			timeOutForKeyPress--;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <get_joystick+0x22c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <get_joystick+0x22c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <get_joystick+0x22c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <get_joystick+0x212>
				joy_state[USER_BUTTON] = NORMAL_STATE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <get_joystick+0x228>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	60da      	str	r2, [r3, #12]
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000020 	.word	0x20000020
 8000be0:	20000030 	.word	0x20000030
 8000be4:	20000010 	.word	0x20000010
 8000be8:	40020800 	.word	0x40020800
 8000bec:	20000044 	.word	0x20000044
 8000bf0:	20000040 	.word	0x20000040
 8000bf4:	200000e0 	.word	0x200000e0
 8000bf8:	40020000 	.word	0x40020000

08000bfc <rq_sv22>:
int		keySent			= 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

void rq_sv22(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	TxData2[0] = 0x03;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <rq_sv22+0x2c>)
 8000c02:	2203      	movs	r2, #3
 8000c04:	701a      	strb	r2, [r3, #0]
	TxData2[1] = 0x22;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <rq_sv22+0x2c>)
 8000c08:	2222      	movs	r2, #34	; 0x22
 8000c0a:	705a      	strb	r2, [r3, #1]
	TxData2[2] = 0xF0;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <rq_sv22+0x2c>)
 8000c0e:	22f0      	movs	r2, #240	; 0xf0
 8000c10:	709a      	strb	r2, [r3, #2]
	TxData2[3] = 0x01;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <rq_sv22+0x2c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <rq_sv22+0x30>)
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <rq_sv22+0x2c>)
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <rq_sv22+0x34>)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <rq_sv22+0x38>)
 8000c20:	f002 fa80 	bl	8003124 <HAL_CAN_AddTxMessage>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000f8 	.word	0x200000f8
 8000c2c:	2000020c 	.word	0x2000020c
 8000c30:	20000158 	.word	0x20000158
 8000c34:	200001e4 	.word	0x200001e4

08000c38 <do_sv22>:

void do_sv22(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <do_sv22+0x6c>)
 8000c3e:	f001 fd53 	bl	80026e8 <HAL_ADC_Start>
	ADCValue = HAL_ADC_GetValue(&hadc1);
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <do_sv22+0x6c>)
 8000c44:	f001 fe22 	bl	800288c <HAL_ADC_GetValue>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <do_sv22+0x70>)
 8000c4c:	6013      	str	r3, [r2, #0]
	TxData[0] = 0x07; //0 7
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <do_sv22+0x74>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x62;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <do_sv22+0x74>)
 8000c56:	2262      	movs	r2, #98	; 0x62
 8000c58:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0xF0;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <do_sv22+0x74>)
 8000c5c:	22f0      	movs	r2, #240	; 0xf0
 8000c5e:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x01;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <do_sv22+0x74>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	70da      	strb	r2, [r3, #3]

	TxData[4] = ADCValue >> 24;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <do_sv22+0x70>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <do_sv22+0x74>)
 8000c70:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADCValue >> 16;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <do_sv22+0x70>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	0c1b      	lsrs	r3, r3, #16
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <do_sv22+0x74>)
 8000c7c:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADCValue >> 8;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <do_sv22+0x70>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <do_sv22+0x74>)
 8000c88:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADCValue;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <do_sv22+0x70>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <do_sv22+0x74>)
 8000c92:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <do_sv22+0x78>)
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <do_sv22+0x74>)
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <do_sv22+0x7c>)
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <do_sv22+0x80>)
 8000c9c:	f002 fa42 	bl	8003124 <HAL_CAN_AddTxMessage>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000019c 	.word	0x2000019c
 8000ca8:	2000010c 	.word	0x2000010c
 8000cac:	200000f0 	.word	0x200000f0
 8000cb0:	20000244 	.word	0x20000244
 8000cb4:	20000318 	.word	0x20000318
 8000cb8:	200002f0 	.word	0x200002f0

08000cbc <do_sv2E>:

void do_sv2E(){
 8000cbc:	b5b0      	push	{r4, r5, r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af04      	add	r7, sp, #16
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
			dataStorage[5], dataStorage[6], dataStorage[7], dataStorage[8], dataStorage[9], dataStorage[10]);
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <do_sv2E+0x7c>)
 8000cc4:	795b      	ldrb	r3, [r3, #5]
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
 8000cc6:	461c      	mov	r4, r3
			dataStorage[5], dataStorage[6], dataStorage[7], dataStorage[8], dataStorage[9], dataStorage[10]);
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <do_sv2E+0x7c>)
 8000cca:	799b      	ldrb	r3, [r3, #6]
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
 8000ccc:	461d      	mov	r5, r3
			dataStorage[5], dataStorage[6], dataStorage[7], dataStorage[8], dataStorage[9], dataStorage[10]);
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <do_sv2E+0x7c>)
 8000cd0:	79db      	ldrb	r3, [r3, #7]
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
 8000cd2:	461a      	mov	r2, r3
			dataStorage[5], dataStorage[6], dataStorage[7], dataStorage[8], dataStorage[9], dataStorage[10]);
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <do_sv2E+0x7c>)
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
 8000cd8:	4619      	mov	r1, r3
			dataStorage[5], dataStorage[6], dataStorage[7], dataStorage[8], dataStorage[9], dataStorage[10]);
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <do_sv2E+0x7c>)
 8000cdc:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
 8000cde:	4618      	mov	r0, r3
			dataStorage[5], dataStorage[6], dataStorage[7], dataStorage[8], dataStorage[9], dataStorage[10]);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <do_sv2E+0x7c>)
 8000ce2:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(buffer,"%#04x %#04x %#04x %#04x %#04x %#04x",
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	9002      	str	r0, [sp, #8]
 8000ce8:	9101      	str	r1, [sp, #4]
 8000cea:	9200      	str	r2, [sp, #0]
 8000cec:	462b      	mov	r3, r5
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4912      	ldr	r1, [pc, #72]	; (8000d3c <do_sv2E+0x80>)
 8000cf2:	4813      	ldr	r0, [pc, #76]	; (8000d40 <do_sv2E+0x84>)
 8000cf4:	f005 f824 	bl	8005d40 <siprintf>
	ST7789_WriteString(10, 20, buffer, Font_7x10, WHITE, BLACK);
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <do_sv2E+0x88>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	9202      	str	r2, [sp, #8]
 8000cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d02:	9201      	str	r2, [sp, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <do_sv2E+0x84>)
 8000d0c:	2114      	movs	r1, #20
 8000d0e:	200a      	movs	r0, #10
 8000d10:	f001 f8c8 	bl	8001ea4 <ST7789_WriteString>
	TxData[0] = 0x02;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <do_sv2E+0x8c>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x6E;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <do_sv2E+0x8c>)
 8000d1c:	226e      	movs	r2, #110	; 0x6e
 8000d1e:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x01;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <do_sv2E+0x8c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	709a      	strb	r2, [r3, #2]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <do_sv2E+0x90>)
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <do_sv2E+0x8c>)
 8000d2a:	4909      	ldr	r1, [pc, #36]	; (8000d50 <do_sv2E+0x94>)
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <do_sv2E+0x98>)
 8000d2e:	f002 f9f9 	bl	8003124 <HAL_CAN_AddTxMessage>
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bdb0      	pop	{r4, r5, r7, pc}
 8000d38:	20000110 	.word	0x20000110
 8000d3c:	080070e8 	.word	0x080070e8
 8000d40:	20000210 	.word	0x20000210
 8000d44:	20000000 	.word	0x20000000
 8000d48:	200000f0 	.word	0x200000f0
 8000d4c:	20000244 	.word	0x20000244
 8000d50:	20000318 	.word	0x20000318
 8000d54:	200002f0 	.word	0x200002f0

08000d58 <do_sv27>:

void do_sv27(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	if(seedRequested&&!keySent){
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <do_sv27+0x15c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d063      	beq.n	8000e2c <do_sv27+0xd4>
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <do_sv27+0x160>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d15f      	bne.n	8000e2c <do_sv27+0xd4>
		TxData[0] = 0x06;
 8000d6c:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <do_sv27+0x164>)
 8000d6e:	2206      	movs	r2, #6
 8000d70:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x67;
 8000d72:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <do_sv27+0x164>)
 8000d74:	2267      	movs	r2, #103	; 0x67
 8000d76:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x01;
 8000d78:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <do_sv27+0x164>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	709a      	strb	r2, [r3, #2]
		TxData[3] = (rand()-1) % 0xFF + 1;
 8000d7e:	f004 ff9f 	bl	8005cc0 <rand>
 8000d82:	4603      	mov	r3, r0
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <do_sv27+0x168>)
 8000d88:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	11d9      	asrs	r1, r3, #7
 8000d90:	17d3      	asrs	r3, r2, #31
 8000d92:	1ac9      	subs	r1, r1, r3
 8000d94:	460b      	mov	r3, r1
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	1ad1      	subs	r1, r2, r3
 8000d9c:	b2cb      	uxtb	r3, r1
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <do_sv27+0x164>)
 8000da4:	70da      	strb	r2, [r3, #3]
		TxData[4] = (rand()-1) % 0xFF + 1;
 8000da6:	f004 ff8b 	bl	8005cc0 <rand>
 8000daa:	4603      	mov	r3, r0
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <do_sv27+0x168>)
 8000db0:	fb83 1302 	smull	r1, r3, r3, r2
 8000db4:	4413      	add	r3, r2
 8000db6:	11d9      	asrs	r1, r3, #7
 8000db8:	17d3      	asrs	r3, r2, #31
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	1ad1      	subs	r1, r2, r3
 8000dc4:	b2cb      	uxtb	r3, r1
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <do_sv27+0x164>)
 8000dcc:	711a      	strb	r2, [r3, #4]
		TxData[5] = (rand()-1) % 0xFF + 1;
 8000dce:	f004 ff77 	bl	8005cc0 <rand>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <do_sv27+0x168>)
 8000dd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000ddc:	4413      	add	r3, r2
 8000dde:	11d9      	asrs	r1, r3, #7
 8000de0:	17d3      	asrs	r3, r2, #31
 8000de2:	1ac9      	subs	r1, r1, r3
 8000de4:	460b      	mov	r3, r1
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	1ad1      	subs	r1, r2, r3
 8000dec:	b2cb      	uxtb	r3, r1
 8000dee:	3301      	adds	r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <do_sv27+0x164>)
 8000df4:	715a      	strb	r2, [r3, #5]
		TxData[6] = (rand()-1) % 0xFF + 1;
 8000df6:	f004 ff63 	bl	8005cc0 <rand>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <do_sv27+0x168>)
 8000e00:	fb83 1302 	smull	r1, r3, r3, r2
 8000e04:	4413      	add	r3, r2
 8000e06:	11d9      	asrs	r1, r3, #7
 8000e08:	17d3      	asrs	r3, r2, #31
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	1ad1      	subs	r1, r2, r3
 8000e14:	b2cb      	uxtb	r3, r1
 8000e16:	3301      	adds	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <do_sv27+0x164>)
 8000e1c:	719a      	strb	r2, [r3, #6]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <do_sv27+0x16c>)
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <do_sv27+0x164>)
 8000e22:	4929      	ldr	r1, [pc, #164]	; (8000ec8 <do_sv27+0x170>)
 8000e24:	4829      	ldr	r0, [pc, #164]	; (8000ecc <do_sv27+0x174>)
 8000e26:	f002 f97d 	bl	8003124 <HAL_CAN_AddTxMessage>
 8000e2a:	e041      	b.n	8000eb0 <do_sv27+0x158>
	}else if(seedRequested&&keySent){
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <do_sv27+0x15c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d03d      	beq.n	8000eb0 <do_sv27+0x158>
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <do_sv27+0x160>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d039      	beq.n	8000eb0 <do_sv27+0x158>
		if((RxData[3] == TxData[3] + 1
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <do_sv27+0x178>)
 8000e3e:	78db      	ldrb	r3, [r3, #3]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <do_sv27+0x164>)
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	3301      	adds	r3, #1
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d12c      	bne.n	8000ea6 <do_sv27+0x14e>
			&& RxData[4] == TxData[4] + 1)
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <do_sv27+0x178>)
 8000e4e:	791b      	ldrb	r3, [r3, #4]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <do_sv27+0x164>)
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d124      	bne.n	8000ea6 <do_sv27+0x14e>
			&&(RxData[5] == TxData[5] + 1
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <do_sv27+0x178>)
 8000e5e:	795b      	ldrb	r3, [r3, #5]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <do_sv27+0x164>)
 8000e64:	795b      	ldrb	r3, [r3, #5]
 8000e66:	3301      	adds	r3, #1
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d11c      	bne.n	8000ea6 <do_sv27+0x14e>
			&& RxData[6] == TxData[6] + 1))
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <do_sv27+0x178>)
 8000e6e:	799b      	ldrb	r3, [r3, #6]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <do_sv27+0x164>)
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	3301      	adds	r3, #1
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d114      	bne.n	8000ea6 <do_sv27+0x14e>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4814      	ldr	r0, [pc, #80]	; (8000ed4 <do_sv27+0x17c>)
 8000e82:	f003 f857 	bl	8003f34 <HAL_GPIO_WritePin>
			TxData[0] = 0x02;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <do_sv27+0x164>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x67;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <do_sv27+0x164>)
 8000e8e:	2267      	movs	r2, #103	; 0x67
 8000e90:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x02;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <do_sv27+0x164>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	709a      	strb	r2, [r3, #2]
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <do_sv27+0x16c>)
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <do_sv27+0x164>)
 8000e9c:	490a      	ldr	r1, [pc, #40]	; (8000ec8 <do_sv27+0x170>)
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <do_sv27+0x174>)
 8000ea0:	f002 f940 	bl	8003124 <HAL_CAN_AddTxMessage>
 8000ea4:	e004      	b.n	8000eb0 <do_sv27+0x158>
		}else{
			HAL_Delay(10000);
 8000ea6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eaa:	f001 fbb5 	bl	8002618 <HAL_Delay>
		}
	}
}
 8000eae:	e7ff      	b.n	8000eb0 <do_sv27+0x158>
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000128 	.word	0x20000128
 8000eb8:	2000012c 	.word	0x2000012c
 8000ebc:	200000f0 	.word	0x200000f0
 8000ec0:	80808081 	.word	0x80808081
 8000ec4:	20000244 	.word	0x20000244
 8000ec8:	20000318 	.word	0x20000318
 8000ecc:	200002f0 	.word	0x200002f0
 8000ed0:	200002a0 	.word	0x200002a0
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 fb29 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 fa01 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fbd5 	bl	8001694 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000eea:	f000 faad 	bl	8001448 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000eee:	f000 fb85 	bl	80015fc <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ef2:	f000 fb4d 	bl	8001590 <MX_SPI1_Init>
  MX_CAN2_Init();
 8000ef6:	f000 faf9 	bl	80014ec <MX_CAN2_Init>
  MX_ADC1_Init();
 8000efa:	f000 fa53 	bl	80013a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start_IT(&hadc1);
  HAL_CAN_Start(&hcan1);
 8000efe:	4889      	ldr	r0, [pc, #548]	; (8001124 <main+0x24c>)
 8000f00:	f002 f8cc 	bl	800309c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000f04:	4888      	ldr	r0, [pc, #544]	; (8001128 <main+0x250>)
 8000f06:	f002 f8c9 	bl	800309c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4885      	ldr	r0, [pc, #532]	; (8001124 <main+0x24c>)
 8000f0e:	f002 faf6 	bl	80034fe <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f12:	2102      	movs	r1, #2
 8000f14:	4884      	ldr	r0, [pc, #528]	; (8001128 <main+0x250>)
 8000f16:	f002 faf2 	bl	80034fe <HAL_CAN_ActivateNotification>

  HAL_TIM_Base_Start_IT(&htim2);
 8000f1a:	4884      	ldr	r0, [pc, #528]	; (800112c <main+0x254>)
 8000f1c:	f004 fa3e 	bl	800539c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000f20:	4883      	ldr	r0, [pc, #524]	; (8001130 <main+0x258>)
 8000f22:	f001 fbe1 	bl	80026e8 <HAL_ADC_Start>

  TxHeader.DLC = 8;
 8000f26:	4b83      	ldr	r3, [pc, #524]	; (8001134 <main+0x25c>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000f2c:	4b81      	ldr	r3, [pc, #516]	; (8001134 <main+0x25c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000f32:	4b80      	ldr	r3, [pc, #512]	; (8001134 <main+0x25c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x7A2;		//response ID
 8000f38:	4b7e      	ldr	r3, [pc, #504]	; (8001134 <main+0x25c>)
 8000f3a:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000f3e:	601a      	str	r2, [r3, #0]

  TxHeader2.DLC = 8;
 8000f40:	4b7d      	ldr	r3, [pc, #500]	; (8001138 <main+0x260>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	611a      	str	r2, [r3, #16]
  TxHeader2.IDE = CAN_ID_STD;
 8000f46:	4b7c      	ldr	r3, [pc, #496]	; (8001138 <main+0x260>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000f4c:	4b7a      	ldr	r3, [pc, #488]	; (8001138 <main+0x260>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x712;		//request ID
 8000f52:	4b79      	ldr	r3, [pc, #484]	; (8001138 <main+0x260>)
 8000f54:	f240 7212 	movw	r2, #1810	; 0x712
 8000f58:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(time(NULL)); // Call for initialize random function
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f004 ff10 	bl	8005d80 <time>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4613      	mov	r3, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fe7c 	bl	8005c64 <srand>
  set_timer0(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f000 fce0 	bl	8001934 <set_timer0>



  // service 27 key variable

  lcd_init();
 8000f74:	f7ff fb9c 	bl	80006b0 <lcd_init>
  ST7789_Init();
 8000f78:	f000 fe38 	bl	8001bec <ST7789_Init>

  sprintf(buffer, "HELLO WORLD");
 8000f7c:	496f      	ldr	r1, [pc, #444]	; (800113c <main+0x264>)
 8000f7e:	4870      	ldr	r0, [pc, #448]	; (8001140 <main+0x268>)
 8000f80:	f004 fede 	bl	8005d40 <siprintf>
  ST7789_WriteString(10, 20, buffer, Font_7x10, WHITE, BLACK);
 8000f84:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <main+0x26c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	9202      	str	r2, [sp, #8]
 8000f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6a      	ldr	r2, [pc, #424]	; (8001140 <main+0x268>)
 8000f98:	2114      	movs	r1, #20
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 ff82 	bl	8001ea4 <ST7789_WriteString>
  int currentService = SERVICE_22;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  if(is_joy_pressed(USER_BUTTON)){
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f7ff fcf3 	bl	8000990 <is_joy_pressed>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <main+0xe8>
		  currentService++;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
		  if(currentService==4){
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d101      	bne.n	8000fc0 <main+0xe8>
			  currentService = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //todo:ECU
	  switch(currentService){
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d041      	beq.n	800104a <main+0x172>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	dc5a      	bgt.n	8001082 <main+0x1aa>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d003      	beq.n	8000fda <main+0x102>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d01c      	beq.n	8001012 <main+0x13a>
			  dataflag = 0;
			  do_sv27();
		  }
		  break;
	  default:
		  break;
 8000fd8:	e053      	b.n	8001082 <main+0x1aa>
		  sprintf(buffer,"SERVICE 22");
 8000fda:	495b      	ldr	r1, [pc, #364]	; (8001148 <main+0x270>)
 8000fdc:	4858      	ldr	r0, [pc, #352]	; (8001140 <main+0x268>)
 8000fde:	f004 feaf 	bl	8005d40 <siprintf>
		  ST7789_WriteString(10, 200, buffer, Font_11x18, WHITE, BLACK);
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	; (800114c <main+0x274>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	9202      	str	r2, [sp, #8]
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a52      	ldr	r2, [pc, #328]	; (8001140 <main+0x268>)
 8000ff6:	21c8      	movs	r1, #200	; 0xc8
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f000 ff53 	bl	8001ea4 <ST7789_WriteString>
		  if(dataflag){
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <main+0x278>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d03f      	beq.n	8001086 <main+0x1ae>
			  dataflag = 0;
 8001006:	4b52      	ldr	r3, [pc, #328]	; (8001150 <main+0x278>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
			  do_sv22();
 800100c:	f7ff fe14 	bl	8000c38 <do_sv22>
		  break;
 8001010:	e039      	b.n	8001086 <main+0x1ae>
		  sprintf(buffer,"SERVICE 2E");
 8001012:	4950      	ldr	r1, [pc, #320]	; (8001154 <main+0x27c>)
 8001014:	484a      	ldr	r0, [pc, #296]	; (8001140 <main+0x268>)
 8001016:	f004 fe93 	bl	8005d40 <siprintf>
		  ST7789_WriteString(10, 200, buffer, Font_11x18, WHITE, BLACK);
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <main+0x274>)
 800101c:	2200      	movs	r2, #0
 800101e:	9202      	str	r2, [sp, #8]
 8001020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001024:	9201      	str	r2, [sp, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	9200      	str	r2, [sp, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a44      	ldr	r2, [pc, #272]	; (8001140 <main+0x268>)
 800102e:	21c8      	movs	r1, #200	; 0xc8
 8001030:	200a      	movs	r0, #10
 8001032:	f000 ff37 	bl	8001ea4 <ST7789_WriteString>
		  if(dataflag){
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <main+0x278>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d025      	beq.n	800108a <main+0x1b2>
			  dataflag = 0;
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <main+0x278>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
			  do_sv2E();
 8001044:	f7ff fe3a 	bl	8000cbc <do_sv2E>
		  break;
 8001048:	e01f      	b.n	800108a <main+0x1b2>
		  sprintf(buffer,"SERVICE 27");
 800104a:	4943      	ldr	r1, [pc, #268]	; (8001158 <main+0x280>)
 800104c:	483c      	ldr	r0, [pc, #240]	; (8001140 <main+0x268>)
 800104e:	f004 fe77 	bl	8005d40 <siprintf>
		  ST7789_WriteString(10, 200, buffer, Font_11x18, WHITE, BLACK);
 8001052:	4b3e      	ldr	r3, [pc, #248]	; (800114c <main+0x274>)
 8001054:	2200      	movs	r2, #0
 8001056:	9202      	str	r2, [sp, #8]
 8001058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a36      	ldr	r2, [pc, #216]	; (8001140 <main+0x268>)
 8001066:	21c8      	movs	r1, #200	; 0xc8
 8001068:	200a      	movs	r0, #10
 800106a:	f000 ff1b 	bl	8001ea4 <ST7789_WriteString>
		  if(dataflag){
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <main+0x278>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <main+0x1b6>
			  dataflag = 0;
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <main+0x278>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
			  do_sv27();
 800107c:	f7ff fe6c 	bl	8000d58 <do_sv27>
		  break;
 8001080:	e005      	b.n	800108e <main+0x1b6>
		  break;
 8001082:	bf00      	nop
 8001084:	e004      	b.n	8001090 <main+0x1b8>
		  break;
 8001086:	bf00      	nop
 8001088:	e002      	b.n	8001090 <main+0x1b8>
		  break;
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <main+0x1b8>
		  break;
 800108e:	bf00      	nop
	  }
	  //todo: TESTER

	  switch(currentService){
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b03      	cmp	r3, #3
 8001094:	f000 80be 	beq.w	8001214 <main+0x33c>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b03      	cmp	r3, #3
 800109c:	f300 8107 	bgt.w	80012ae <main+0x3d6>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d003      	beq.n	80010ae <main+0x1d6>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d05f      	beq.n	800116c <main+0x294>
				  keySent = 1;
			  }
		  break;

	  default:
		  break;
 80010ac:	e0ff      	b.n	80012ae <main+0x3d6>
		  if(timer0Flag){
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <main+0x284>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <main+0x1ea>
			  set_timer0(1000);
 80010b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ba:	f000 fc3b 	bl	8001934 <set_timer0>
			  rq_sv22();
 80010be:	f7ff fd9d 	bl	8000bfc <rq_sv22>
		  if(dataflag2){
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <main+0x288>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80f3 	beq.w	80012b2 <main+0x3da>
			  dataflag2 = 0;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <main+0x288>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
			  for(int i = 0 ; i<4; i++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e00d      	b.n	80010f4 <main+0x21c>
				  received = received << 8;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	60bb      	str	r3, [r7, #8]
				  received = received + RxData2[i+4];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	4a20      	ldr	r2, [pc, #128]	; (8001164 <main+0x28c>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
			  for(int i = 0 ; i<4; i++){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3301      	adds	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	ddee      	ble.n	80010d8 <main+0x200>
			  sprintf(buffer, "ADC Value: %ld", received);
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	491a      	ldr	r1, [pc, #104]	; (8001168 <main+0x290>)
 80010fe:	4810      	ldr	r0, [pc, #64]	; (8001140 <main+0x268>)
 8001100:	f004 fe1e 	bl	8005d40 <siprintf>
			  ST7789_WriteString(10, 40, buffer, Font_7x10, WHITE, BLACK);
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <main+0x26c>)
 8001106:	2200      	movs	r2, #0
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	9201      	str	r2, [sp, #4]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <main+0x268>)
 8001118:	2128      	movs	r1, #40	; 0x28
 800111a:	200a      	movs	r0, #10
 800111c:	f000 fec2 	bl	8001ea4 <ST7789_WriteString>
		  break;
 8001120:	e0c7      	b.n	80012b2 <main+0x3da>
 8001122:	bf00      	nop
 8001124:	200002f0 	.word	0x200002f0
 8001128:	200001e4 	.word	0x200001e4
 800112c:	200002a8 	.word	0x200002a8
 8001130:	2000019c 	.word	0x2000019c
 8001134:	20000318 	.word	0x20000318
 8001138:	20000158 	.word	0x20000158
 800113c:	0800710c 	.word	0x0800710c
 8001140:	20000210 	.word	0x20000210
 8001144:	20000000 	.word	0x20000000
 8001148:	08007118 	.word	0x08007118
 800114c:	20000008 	.word	0x20000008
 8001150:	20000100 	.word	0x20000100
 8001154:	08007124 	.word	0x08007124
 8001158:	08007130 	.word	0x08007130
 800115c:	20000138 	.word	0x20000138
 8001160:	20000104 	.word	0x20000104
 8001164:	20000170 	.word	0x20000170
 8001168:	0800713c 	.word	0x0800713c
		  if(is_joy_pressed(JOY_LEFT)){
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fc0f 	bl	8000990 <is_joy_pressed>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <main+0x2ac>
			  CFdata = 0xAA;
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <main+0x3e8>)
 800117a:	22aa      	movs	r2, #170	; 0xaa
 800117c:	701a      	strb	r2, [r3, #0]
			  joyPressed = 1;
 800117e:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <main+0x3ec>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		  if(is_joy_pressed(JOY_RIGHT)){
 8001184:	2002      	movs	r0, #2
 8001186:	f7ff fc03 	bl	8000990 <is_joy_pressed>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <main+0x2c4>
			  CFdata = 0xFF;
 8001190:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <main+0x3e8>)
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	701a      	strb	r2, [r3, #0]
			  joyPressed = 1;
 8001196:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <main+0x3ec>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
		  if(is_joy_pressed(JOY_CTR)){
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fbf7 	bl	8000990 <is_joy_pressed>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <main+0x2dc>
			  CFdata = 0x00;
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <main+0x3e8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			  joyPressed = 1;
 80011ae:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <main+0x3ec>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		  if(joyPressed){
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <main+0x3ec>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <main+0x32c>
			  joyPressed = 0;
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <main+0x3ec>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
			  TxData2[0] = 0x10;
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <main+0x3f0>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	701a      	strb	r2, [r3, #0]
			  TxData2[1] = 0x09;
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <main+0x3f0>)
 80011ca:	2209      	movs	r2, #9
 80011cc:	705a      	strb	r2, [r3, #1]
			  TxData2[2] = 0x2E;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <main+0x3f0>)
 80011d0:	222e      	movs	r2, #46	; 0x2e
 80011d2:	709a      	strb	r2, [r3, #2]
			  TxData2[3] = 0xF0;
 80011d4:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <main+0x3f0>)
 80011d6:	22f0      	movs	r2, #240	; 0xf0
 80011d8:	70da      	strb	r2, [r3, #3]
			  TxData2[4] = 0x02;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <main+0x3f0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	711a      	strb	r2, [r3, #4]
			  TxData2[5] = CFdata;
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <main+0x3e8>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <main+0x3f0>)
 80011e6:	715a      	strb	r2, [r3, #5]
			  TxData2[6] = CFdata;
 80011e8:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <main+0x3e8>)
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <main+0x3f0>)
 80011ee:	719a      	strb	r2, [r3, #6]
			  TxData2[7] = CFdata;
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <main+0x3e8>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <main+0x3f0>)
 80011f6:	71da      	strb	r2, [r3, #7]
			  HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <main+0x3f4>)
 80011fa:	4a33      	ldr	r2, [pc, #204]	; (80012c8 <main+0x3f0>)
 80011fc:	4934      	ldr	r1, [pc, #208]	; (80012d0 <main+0x3f8>)
 80011fe:	4835      	ldr	r0, [pc, #212]	; (80012d4 <main+0x3fc>)
 8001200:	f001 ff90 	bl	8003124 <HAL_CAN_AddTxMessage>
		  if(dataflag2){
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <main+0x400>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d054      	beq.n	80012b6 <main+0x3de>
			  dataflag2 = 0;
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <main+0x400>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
		  break;
 8001212:	e050      	b.n	80012b6 <main+0x3de>
		  if(!seedRequested){
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <main+0x404>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d112      	bne.n	8001242 <main+0x36a>
			  TxData2[0] = 0x02;
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <main+0x3f0>)
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
			  TxData2[1] = 0x27;
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <main+0x3f0>)
 8001224:	2227      	movs	r2, #39	; 0x27
 8001226:	705a      	strb	r2, [r3, #1]
			  TxData2[2] = 0x01;
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <main+0x3f0>)
 800122a:	2201      	movs	r2, #1
 800122c:	709a      	strb	r2, [r3, #2]
			  HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <main+0x3f4>)
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <main+0x3f0>)
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <main+0x3f8>)
 8001234:	4827      	ldr	r0, [pc, #156]	; (80012d4 <main+0x3fc>)
 8001236:	f001 ff75 	bl	8003124 <HAL_CAN_AddTxMessage>
			  seedRequested = 1;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <main+0x404>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
		  break;
 8001240:	e03b      	b.n	80012ba <main+0x3e2>
			  if(!keySent&&dataflag2){
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <main+0x408>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d137      	bne.n	80012ba <main+0x3e2>
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <main+0x400>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d033      	beq.n	80012ba <main+0x3e2>
				  dataflag2 = 0;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <main+0x400>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
				  TxData2[0] = 0x06;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <main+0x3f0>)
 800125a:	2206      	movs	r2, #6
 800125c:	701a      	strb	r2, [r3, #0]
				  TxData2[1] = 0x27;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <main+0x3f0>)
 8001260:	2227      	movs	r2, #39	; 0x27
 8001262:	705a      	strb	r2, [r3, #1]
				  TxData2[2] = 0x02;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <main+0x3f0>)
 8001266:	2202      	movs	r2, #2
 8001268:	709a      	strb	r2, [r3, #2]
				  TxData2[3] = RxData2[3] + 1;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <main+0x40c>)
 800126c:	78db      	ldrb	r3, [r3, #3]
 800126e:	3301      	adds	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <main+0x3f0>)
 8001274:	70da      	strb	r2, [r3, #3]
				  TxData2[4] = RxData2[4] + 1;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <main+0x40c>)
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <main+0x3f0>)
 8001280:	711a      	strb	r2, [r3, #4]
				  TxData2[5] = RxData2[5] + 1;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <main+0x40c>)
 8001284:	795b      	ldrb	r3, [r3, #5]
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <main+0x3f0>)
 800128c:	715a      	strb	r2, [r3, #5]
				  TxData2[6] = RxData2[6] + 1;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <main+0x40c>)
 8001290:	799b      	ldrb	r3, [r3, #6]
 8001292:	3301      	adds	r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <main+0x3f0>)
 8001298:	719a      	strb	r2, [r3, #6]
				  HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <main+0x3f4>)
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <main+0x3f0>)
 800129e:	490c      	ldr	r1, [pc, #48]	; (80012d0 <main+0x3f8>)
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <main+0x3fc>)
 80012a2:	f001 ff3f 	bl	8003124 <HAL_CAN_AddTxMessage>
				  keySent = 1;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <main+0x408>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
		  break;
 80012ac:	e005      	b.n	80012ba <main+0x3e2>
		  break;
 80012ae:	bf00      	nop
 80012b0:	e678      	b.n	8000fa4 <main+0xcc>
		  break;
 80012b2:	bf00      	nop
 80012b4:	e676      	b.n	8000fa4 <main+0xcc>
		  break;
 80012b6:	bf00      	nop
 80012b8:	e674      	b.n	8000fa4 <main+0xcc>
		  break;
 80012ba:	bf00      	nop
	  if(is_joy_pressed(USER_BUTTON)){
 80012bc:	e672      	b.n	8000fa4 <main+0xcc>
 80012be:	bf00      	nop
 80012c0:	20000120 	.word	0x20000120
 80012c4:	20000124 	.word	0x20000124
 80012c8:	200000f8 	.word	0x200000f8
 80012cc:	2000020c 	.word	0x2000020c
 80012d0:	20000158 	.word	0x20000158
 80012d4:	200001e4 	.word	0x200001e4
 80012d8:	20000104 	.word	0x20000104
 80012dc:	20000128 	.word	0x20000128
 80012e0:	2000012c 	.word	0x2000012c
 80012e4:	20000170 	.word	0x20000170

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fcac 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xb4>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <SystemClock_Config+0xb4>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SystemClock_Config+0xb4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <SystemClock_Config+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <SystemClock_Config+0xb8>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <SystemClock_Config+0xb8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fe05 	bl	8003f68 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001364:	f000 fae0 	bl	8001928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f003 f868 	bl	8004458 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800138e:	f000 facb 	bl	8001928 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_ADC1_Init+0x98>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <MX_ADC1_Init+0x9c>)
 80013ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_ADC1_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_ADC1_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_ADC1_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_ADC1_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_ADC1_Init+0x98>)
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <MX_ADC1_Init+0xa0>)
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_ADC1_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_ADC1_Init+0x98>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_ADC1_Init+0x98>)
 80013fe:	2201      	movs	r2, #1
 8001400:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_ADC1_Init+0x98>)
 8001404:	f001 f92c 	bl	8002660 <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 fa8b 	bl	8001928 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001412:	2302      	movs	r3, #2
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_ADC1_Init+0x98>)
 8001424:	f001 fa40 	bl	80028a8 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800142e:	f000 fa7b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000019c 	.word	0x2000019c
 8001440:	40012000 	.word	0x40012000
 8001444:	0f000001 	.word	0x0f000001

08001448 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001450:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <MX_CAN1_Init+0xa0>)
 8001452:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001456:	2208      	movs	r2, #8
 8001458:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_CAN1_Init+0x9c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001468:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800146c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001476:	2200      	movs	r2, #0
 8001478:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_CAN1_Init+0x9c>)
 800147c:	2200      	movs	r2, #0
 800147e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001482:	2200      	movs	r2, #0
 8001484:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001488:	2200      	movs	r2, #0
 800148a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_CAN1_Init+0x9c>)
 800148e:	2200      	movs	r2, #0
 8001490:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_CAN1_Init+0x9c>)
 8001494:	2200      	movs	r2, #0
 8001496:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_CAN1_Init+0x9c>)
 800149a:	f001 fc23 	bl	8002ce4 <HAL_CAN_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014a4:	f000 fa40 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig1;

  canfilterconfig1.FilterActivation = CAN_FILTER_ENABLE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  canfilterconfig1.FilterBank = 0;  // which filter bank to use from the assigned ones
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  canfilterconfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  canfilterconfig1.FilterIdHigh = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  canfilterconfig1.FilterIdLow = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  canfilterconfig1.FilterMaskIdHigh = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  canfilterconfig1.FilterMaskIdLow = 0x0000;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  canfilterconfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  canfilterconfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
  canfilterconfig1.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 80014cc:	230e      	movs	r3, #14
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig1);
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_CAN1_Init+0x9c>)
 80014d6:	f001 fd01 	bl	8002edc <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002f0 	.word	0x200002f0
 80014e8:	40006400 	.word	0x40006400

080014ec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_CAN2_Init+0x9c>)
 80014f4:	4a25      	ldr	r2, [pc, #148]	; (800158c <MX_CAN2_Init+0xa0>)
 80014f6:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_CAN2_Init+0x9c>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_CAN2_Init+0x9c>)
 800150c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001510:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_CAN2_Init+0x9c>)
 800151a:	2200      	movs	r2, #0
 800151c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001520:	2200      	movs	r2, #0
 8001522:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001526:	2200      	movs	r2, #0
 8001528:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_CAN2_Init+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001532:	2200      	movs	r2, #0
 8001534:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_CAN2_Init+0x9c>)
 8001538:	2200      	movs	r2, #0
 800153a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <MX_CAN2_Init+0x9c>)
 800153e:	f001 fbd1 	bl	8002ce4 <HAL_CAN_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001548:	f000 f9ee 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig2;

    canfilterconfig2.FilterActivation = CAN_FILTER_ENABLE;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
    canfilterconfig2.FilterBank = 14;  // which filter bank to use from the assigned ones
 8001550:	230e      	movs	r3, #14
 8001552:	617b      	str	r3, [r7, #20]
    canfilterconfig2.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
    canfilterconfig2.FilterIdHigh = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	603b      	str	r3, [r7, #0]
    canfilterconfig2.FilterIdLow = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
    canfilterconfig2.FilterMaskIdHigh = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
    canfilterconfig2.FilterMaskIdLow = 0x0000;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
    canfilterconfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    canfilterconfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
    canfilterconfig2.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8001570:	230e      	movs	r3, #14
 8001572:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig2);
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_CAN2_Init+0x9c>)
 800157a:	f001 fcaf 	bl	8002edc <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001e4 	.word	0x200001e4
 800158c:	40006800 	.word	0x40006800

08001590 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_SPI1_Init+0x64>)
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <MX_SPI1_Init+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_SPI1_Init+0x64>)
 800159c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015b0:	2202      	movs	r2, #2
 80015b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015c4:	2208      	movs	r2, #8
 80015c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015dc:	220a      	movs	r2, #10
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_SPI1_Init+0x64>)
 80015e2:	f003 f8d5 	bl	8004790 <HAL_SPI_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ec:	f000 f99c 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000248 	.word	0x20000248
 80015f8:	40013000 	.word	0x40013000

080015fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM2_Init+0x94>)
 800161a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM2_Init+0x94>)
 8001622:	220f      	movs	r2, #15
 8001624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM2_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM2_Init+0x94>)
 800162e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM2_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <MX_TIM2_Init+0x94>)
 8001642:	f003 fe5b 	bl	80052fc <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800164c:	f000 f96c 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_TIM2_Init+0x94>)
 800165e:	f004 f815 	bl	800568c <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001668:	f000 f95e 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_TIM2_Init+0x94>)
 800167a:	f004 fa31 	bl	8005ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001684:	f000 f950 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200002a8 	.word	0x200002a8

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a34      	ldr	r2, [pc, #208]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a26      	ldr	r2, [pc, #152]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_GPIO_Init+0xf0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8
 80016fe:	2200      	movs	r2, #0
 8001700:	f240 3185 	movw	r1, #901	; 0x385
 8001704:	4820      	ldr	r0, [pc, #128]	; (8001788 <MX_GPIO_Init+0xf4>)
 8001706:	f002 fc15 	bl	8003f34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : JOY_CTR_Pin JOY_A_Pin JOY_B_Pin JOY_C_Pin
                           JOY_D_Pin */
  GPIO_InitStruct.Pin = JOY_CTR_Pin|JOY_A_Pin|JOY_B_Pin|JOY_C_Pin
 800170a:	f242 03f0 	movw	r3, #8432	; 0x20f0
 800170e:	60fb      	str	r3, [r7, #12]
                          |JOY_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4619      	mov	r1, r3
 800171e:	481b      	ldr	r0, [pc, #108]	; (800178c <MX_GPIO_Init+0xf8>)
 8001720:	f002 fa54 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Pin */
  GPIO_InitStruct.Pin = USER_Pin;
 8001724:	2302      	movs	r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172c:	2301      	movs	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	4816      	ldr	r0, [pc, #88]	; (8001790 <MX_GPIO_Init+0xfc>)
 8001738:	f002 fa48 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8
 800173c:	f240 3385 	movw	r3, #901	; 0x385
 8001740:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_GPIO_Init+0xf4>)
 8001756:	f002 fa39 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800175a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800175e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800176c:	2307      	movs	r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4619      	mov	r1, r3
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_GPIO_Init+0xf8>)
 8001778:	f002 fa28 	bl	8003bcc <HAL_GPIO_Init>

}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	get_joystick();
 800179c:	f7ff f912 	bl	80009c4 <get_joystick>
	timer_run();
 80017a0:	f000 f8e4 	bl	800196c <timer_run>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1){
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d154      	bne.n	8001868 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)==HAL_OK){
 80017be:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80017c0:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80017c2:	2100      	movs	r1, #0
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f001 fd88 	bl	80032da <HAL_CAN_GetRxMessage>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d149      	bne.n	8001864 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
			dataflag = 1;
 80017d0:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
			if(isFf){
 80017d6:	4b45      	ldr	r3, [pc, #276]	; (80018ec <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d014      	beq.n	8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
				isFf = 0;
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
				for(int i = 1; i<4; i++){
 80017e4:	2301      	movs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e00a      	b.n	8001800 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
					dataStorage[i+7] = RxData[i];
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3307      	adds	r3, #7
 80017ee:	493c      	ldr	r1, [pc, #240]	; (80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	440a      	add	r2, r1
 80017f4:	7811      	ldrb	r1, [r2, #0]
 80017f6:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80017f8:	54d1      	strb	r1, [r2, r3]
				for(int i = 1; i<4; i++){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b03      	cmp	r3, #3
 8001804:	ddf1      	ble.n	80017ea <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8001806:	e011      	b.n	800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
				}
			}else{
				for(int i = 0; i<8; i++){
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	e00b      	b.n	8001826 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
					dataStorage[i] = RxData[i];
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	4a36      	ldr	r2, [pc, #216]	; (80018f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	460a      	mov	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<8; i++){
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b07      	cmp	r3, #7
 800182a:	ddf0      	ble.n	800180e <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
				}
			}
			if(((RxData[0])&0xF0 )== 0x10){
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001834:	2b10      	cmp	r3, #16
 8001836:	d117      	bne.n	8001868 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				dataflag = 0;
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
				isFf = 1;
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
				TxData[0] = 0x30; 	//FT: flow control, Frame State: continue to send
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8001846:	2230      	movs	r2, #48	; 0x30
 8001848:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x08;	//BS: max 8 CFs till next FC
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 800184c:	2208      	movs	r2, #8
 800184e:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x19; 	//STmin: 25ms
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8001852:	2219      	movs	r2, #25
 8001854:	709a      	strb	r2, [r3, #2]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8001858:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 800185a:	4928      	ldr	r1, [pc, #160]	; (80018fc <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 800185c:	4828      	ldr	r0, [pc, #160]	; (8001900 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800185e:	f001 fc61 	bl	8003124 <HAL_CAN_AddTxMessage>
 8001862:	e001      	b.n	8001868 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			}
		}else{
			Error_Handler();
 8001864:	f000 f860 	bl	8001928 <Error_Handler>
		}
	}
	if(hcan->Instance == CAN2){
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a25      	ldr	r2, [pc, #148]	; (8001904 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12f      	bne.n	80018d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2)==HAL_OK){
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f001 fd2e 	bl	80032da <HAL_CAN_GetRxMessage>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d124      	bne.n	80018ce <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
			dataflag2 = 1;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
			if(((RxData2[0])&0xF0 )== 0x30){
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001892:	2b30      	cmp	r3, #48	; 0x30
 8001894:	d11d      	bne.n	80018d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
				dataflag2 = 0;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
				isFf = 1;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
				TxData2[0] = 0x21; 	//FT: flow control, Frame State: continue to send
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80018a4:	2221      	movs	r2, #33	; 0x21
 80018a6:	701a      	strb	r2, [r3, #0]
				TxData2[1] = CFdata;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80018ae:	705a      	strb	r2, [r3, #1]
				TxData2[2] = CFdata;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80018b6:	709a      	strb	r2, [r3, #2]
				TxData2[3] = CFdata;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80018be:	70da      	strb	r2, [r3, #3]
				HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018c6:	4817      	ldr	r0, [pc, #92]	; (8001924 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80018c8:	f001 fc2c 	bl	8003124 <HAL_CAN_AddTxMessage>
			}
		}else{
			Error_Handler();
		}
	}
}
 80018cc:	e001      	b.n	80018d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			Error_Handler();
 80018ce:	f000 f82b 	bl	8001928 <Error_Handler>
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40006400 	.word	0x40006400
 80018e0:	200002a0 	.word	0x200002a0
 80018e4:	20000330 	.word	0x20000330
 80018e8:	20000100 	.word	0x20000100
 80018ec:	20000108 	.word	0x20000108
 80018f0:	20000110 	.word	0x20000110
 80018f4:	200000f0 	.word	0x200000f0
 80018f8:	20000244 	.word	0x20000244
 80018fc:	20000318 	.word	0x20000318
 8001900:	200002f0 	.word	0x200002f0
 8001904:	40006800 	.word	0x40006800
 8001908:	20000170 	.word	0x20000170
 800190c:	20000180 	.word	0x20000180
 8001910:	20000104 	.word	0x20000104
 8001914:	200000f8 	.word	0x200000f8
 8001918:	20000120 	.word	0x20000120
 800191c:	2000020c 	.word	0x2000020c
 8001920:	20000158 	.word	0x20000158
 8001924:	200001e4 	.word	0x200001e4

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <set_timer0>:
void set_s27delay_timer(){
	s27delayFlag = 1;
	s27delayCount = 1000; //10 second
}

void set_timer0(int milisecond){
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	timer0Flag = 0;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <set_timer0+0x2c>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	timer0Count = milisecond/TIMER_CYCLE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <set_timer0+0x30>)
 8001946:	fb82 1203 	smull	r1, r2, r2, r3
 800194a:	1092      	asrs	r2, r2, #2
 800194c:	17db      	asrs	r3, r3, #31
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <set_timer0+0x34>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20000138 	.word	0x20000138
 8001964:	66666667 	.word	0x66666667
 8001968:	2000013c 	.word	0x2000013c

0800196c <timer_run>:
void set_timer1(int milisecond){
	timer1Flag = 0;
	timer1Count = milisecond/TIMER_CYCLE;
}

void timer_run(){
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	s27delayCount--;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <timer_run+0x58>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <timer_run+0x58>)
 8001978:	6013      	str	r3, [r2, #0]
	if(s27delayCount <= 0){
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <timer_run+0x58>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	dc02      	bgt.n	8001988 <timer_run+0x1c>
		s27delayFlag = 0;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <timer_run+0x5c>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
	}

	timer0Count--;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <timer_run+0x60>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <timer_run+0x60>)
 8001990:	6013      	str	r3, [r2, #0]
	if(timer0Count <= 0){
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <timer_run+0x60>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	dc02      	bgt.n	80019a0 <timer_run+0x34>
		timer0Flag = 1;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <timer_run+0x64>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
	}

	timer1Count--;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <timer_run+0x68>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <timer_run+0x68>)
 80019a8:	6013      	str	r3, [r2, #0]
	if(timer1Count <= 0){
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <timer_run+0x68>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	dc02      	bgt.n	80019b8 <timer_run+0x4c>
		timer1Flag = 1;
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <timer_run+0x6c>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
	}
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000134 	.word	0x20000134
 80019c8:	20000130 	.word	0x20000130
 80019cc:	2000013c 	.word	0x2000013c
 80019d0:	20000138 	.word	0x20000138
 80019d4:	20000144 	.word	0x20000144
 80019d8:	20000140 	.word	0x20000140

080019dc <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80019e6:	2200      	movs	r2, #0
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	480c      	ldr	r0, [pc, #48]	; (8001a1c <ST7789_WriteCommand+0x40>)
 80019ec:	f002 faa2 	bl	8003f34 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <ST7789_WriteCommand+0x40>)
 80019f8:	f002 fa9c 	bl	8003f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80019fc:	1df9      	adds	r1, r7, #7
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	2201      	movs	r2, #1
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <ST7789_WriteCommand+0x44>)
 8001a06:	f002 ff4c 	bl	80048a2 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <ST7789_WriteCommand+0x40>)
 8001a10:	f002 fa90 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	20000248 	.word	0x20000248

08001a24 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <ST7789_WriteData+0x68>)
 8001a34:	f002 fa7e 	bl	8003f34 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <ST7789_WriteData+0x68>)
 8001a40:	f002 fa78 	bl	8003f34 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001a44:	e015      	b.n	8001a72 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf28      	it	cs
 8001a50:	4613      	movcs	r3, r2
 8001a52:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001a54:	89fa      	ldrh	r2, [r7, #14]
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <ST7789_WriteData+0x6c>)
 8001a5e:	f002 ff20 	bl	80048a2 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e6      	bne.n	8001a46 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <ST7789_WriteData+0x68>)
 8001a7e:	f002 fa59 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	20000248 	.word	0x20000248

08001a94 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <ST7789_WriteSmallData+0x40>)
 8001aa4:	f002 fa46 	bl	8003f34 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <ST7789_WriteSmallData+0x40>)
 8001ab0:	f002 fa40 	bl	8003f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001ab4:	1df9      	adds	r1, r7, #7
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	2201      	movs	r2, #1
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <ST7789_WriteSmallData+0x44>)
 8001abe:	f002 fef0 	bl	80048a2 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <ST7789_WriteSmallData+0x40>)
 8001ac8:	f002 fa34 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	20000248 	.word	0x20000248

08001adc <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001ae6:	2036      	movs	r0, #54	; 0x36
 8001ae8:	f7ff ff78 	bl	80019dc <ST7789_WriteCommand>
	switch (m) {
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d81a      	bhi.n	8001b28 <ST7789_SetRotation+0x4c>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <ST7789_SetRotation+0x1c>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b11 	.word	0x08001b11
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b21 	.word	0x08001b21
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001b08:	20c0      	movs	r0, #192	; 0xc0
 8001b0a:	f7ff ffc3 	bl	8001a94 <ST7789_WriteSmallData>
		break;
 8001b0e:	e00c      	b.n	8001b2a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001b10:	20a0      	movs	r0, #160	; 0xa0
 8001b12:	f7ff ffbf 	bl	8001a94 <ST7789_WriteSmallData>
		break;
 8001b16:	e008      	b.n	8001b2a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff ffbb 	bl	8001a94 <ST7789_WriteSmallData>
		break;
 8001b1e:	e004      	b.n	8001b2a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001b20:	2060      	movs	r0, #96	; 0x60
 8001b22:	f7ff ffb7 	bl	8001a94 <ST7789_WriteSmallData>
		break;
 8001b26:	e000      	b.n	8001b2a <ST7789_SetRotation+0x4e>
	default:
		break;
 8001b28:	bf00      	nop
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop

08001b34 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	4611      	mov	r1, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	4603      	mov	r3, r0
 8001b48:	80bb      	strh	r3, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001b52:	2200      	movs	r2, #0
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	4824      	ldr	r0, [pc, #144]	; (8001be8 <ST7789_SetAddressWindow+0xb4>)
 8001b58:	f002 f9ec 	bl	8003f34 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	82fb      	strh	r3, [r7, #22]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	827b      	strh	r3, [r7, #18]
 8001b68:	883b      	ldrh	r3, [r7, #0]
 8001b6a:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 8001b6c:	202a      	movs	r0, #42	; 0x2a
 8001b6e:	f7ff ff35 	bl	80019dc <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001b72:	8afb      	ldrh	r3, [r7, #22]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	733b      	strb	r3, [r7, #12]
 8001b7c:	8afb      	ldrh	r3, [r7, #22]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	737b      	strb	r3, [r7, #13]
 8001b82:	8abb      	ldrh	r3, [r7, #20]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	73bb      	strb	r3, [r7, #14]
 8001b8c:	8abb      	ldrh	r3, [r7, #20]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2104      	movs	r1, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff43 	bl	8001a24 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001b9e:	202b      	movs	r0, #43	; 0x2b
 8001ba0:	f7ff ff1c 	bl	80019dc <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001ba4:	8a7b      	ldrh	r3, [r7, #18]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	723b      	strb	r3, [r7, #8]
 8001bae:	8a7b      	ldrh	r3, [r7, #18]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	727b      	strb	r3, [r7, #9]
 8001bb4:	8a3b      	ldrh	r3, [r7, #16]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	72bb      	strb	r3, [r7, #10]
 8001bbe:	8a3b      	ldrh	r3, [r7, #16]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff2a 	bl	8001a24 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001bd0:	202c      	movs	r0, #44	; 0x2c
 8001bd2:	f7ff ff03 	bl	80019dc <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <ST7789_SetAddressWindow+0xb4>)
 8001bdc:	f002 f9aa 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	40020400 	.word	0x40020400

08001bec <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8001bf2:	2019      	movs	r0, #25
 8001bf4:	f000 fd10 	bl	8002618 <HAL_Delay>
    ST7789_RST_Clr();
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	4846      	ldr	r0, [pc, #280]	; (8001d18 <ST7789_Init+0x12c>)
 8001bfe:	f002 f999 	bl	8003f34 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001c02:	2019      	movs	r0, #25
 8001c04:	f000 fd08 	bl	8002618 <HAL_Delay>
    ST7789_RST_Set();
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	4842      	ldr	r0, [pc, #264]	; (8001d18 <ST7789_Init+0x12c>)
 8001c0e:	f002 f991 	bl	8003f34 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001c12:	2032      	movs	r0, #50	; 0x32
 8001c14:	f000 fd00 	bl	8002618 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001c18:	203a      	movs	r0, #58	; 0x3a
 8001c1a:	f7ff fedf 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001c1e:	2055      	movs	r0, #85	; 0x55
 8001c20:	f7ff ff38 	bl	8001a94 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001c24:	20b2      	movs	r0, #178	; 0xb2
 8001c26:	f7ff fed9 	bl	80019dc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001c2a:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <ST7789_Init+0x130>)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c34:	6018      	str	r0, [r3, #0]
 8001c36:	3304      	adds	r3, #4
 8001c38:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2105      	movs	r1, #5
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff feef 	bl	8001a24 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff ff48 	bl	8001adc <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001c4c:	20b7      	movs	r0, #183	; 0xb7
 8001c4e:	f7ff fec5 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001c52:	2035      	movs	r0, #53	; 0x35
 8001c54:	f7ff ff1e 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001c58:	20bb      	movs	r0, #187	; 0xbb
 8001c5a:	f7ff febf 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001c5e:	2019      	movs	r0, #25
 8001c60:	f7ff ff18 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8001c64:	20c0      	movs	r0, #192	; 0xc0
 8001c66:	f7ff feb9 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001c6a:	202c      	movs	r0, #44	; 0x2c
 8001c6c:	f7ff ff12 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001c70:	20c2      	movs	r0, #194	; 0xc2
 8001c72:	f7ff feb3 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff ff0c 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001c7c:	20c3      	movs	r0, #195	; 0xc3
 8001c7e:	f7ff fead 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001c82:	2012      	movs	r0, #18
 8001c84:	f7ff ff06 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001c88:	20c4      	movs	r0, #196	; 0xc4
 8001c8a:	f7ff fea7 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001c8e:	2020      	movs	r0, #32
 8001c90:	f7ff ff00 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001c94:	20c6      	movs	r0, #198	; 0xc6
 8001c96:	f7ff fea1 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f7ff fefa 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001ca0:	20d0      	movs	r0, #208	; 0xd0
 8001ca2:	f7ff fe9b 	bl	80019dc <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001ca6:	20a4      	movs	r0, #164	; 0xa4
 8001ca8:	f7ff fef4 	bl	8001a94 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001cac:	20a1      	movs	r0, #161	; 0xa1
 8001cae:	f7ff fef1 	bl	8001a94 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001cb2:	20e0      	movs	r0, #224	; 0xe0
 8001cb4:	f7ff fe92 	bl	80019dc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <ST7789_Init+0x134>)
 8001cba:	f107 0410 	add.w	r4, r7, #16
 8001cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc0:	c407      	stmia	r4!, {r0, r1, r2}
 8001cc2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	210e      	movs	r1, #14
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff feaa 	bl	8001a24 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001cd0:	20e1      	movs	r0, #225	; 0xe1
 8001cd2:	f7ff fe83 	bl	80019dc <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <ST7789_Init+0x138>)
 8001cd8:	463c      	mov	r4, r7
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	c407      	stmia	r4!, {r0, r1, r2}
 8001cde:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	210e      	movs	r1, #14
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fe9d 	bl	8001a24 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001cea:	2021      	movs	r0, #33	; 0x21
 8001cec:	f7ff fe76 	bl	80019dc <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001cf0:	2011      	movs	r0, #17
 8001cf2:	f7ff fe73 	bl	80019dc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001cf6:	2013      	movs	r0, #19
 8001cf8:	f7ff fe70 	bl	80019dc <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8001cfc:	2029      	movs	r0, #41	; 0x29
 8001cfe:	f7ff fe6d 	bl	80019dc <ST7789_WriteCommand>

	HAL_Delay(50);
 8001d02:	2032      	movs	r0, #50	; 0x32
 8001d04:	f000 fc88 	bl	8002618 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 f80d 	bl	8001d28 <ST7789_Fill_Color>
}
 8001d0e:	bf00      	nop
 8001d10:	372c      	adds	r7, #44	; 0x2c
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	0800714c 	.word	0x0800714c
 8001d20:	08007154 	.word	0x08007154
 8001d24:	08007164 	.word	0x08007164

08001d28 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001d32:	23ef      	movs	r3, #239	; 0xef
 8001d34:	f240 123f 	movw	r2, #319	; 0x13f
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fefa 	bl	8001b34 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001d40:	2200      	movs	r2, #0
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	4816      	ldr	r0, [pc, #88]	; (8001da0 <ST7789_Fill_Color+0x78>)
 8001d46:	f002 f8f5 	bl	8003f34 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	81fb      	strh	r3, [r7, #14]
 8001d4e:	e019      	b.n	8001d84 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	81bb      	strh	r3, [r7, #12]
 8001d54:	e010      	b.n	8001d78 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	723b      	strb	r3, [r7, #8]
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe59 	bl	8001a24 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001d72:	89bb      	ldrh	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	81bb      	strh	r3, [r7, #12]
 8001d78:	89bb      	ldrh	r3, [r7, #12]
 8001d7a:	2bef      	cmp	r3, #239	; 0xef
 8001d7c:	d9eb      	bls.n	8001d56 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	3301      	adds	r3, #1
 8001d82:	81fb      	strh	r3, [r7, #14]
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d8a:	d3e1      	bcc.n	8001d50 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <ST7789_Fill_Color+0x78>)
 8001d92:	f002 f8cf 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020400 	.word	0x40020400

08001da4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001da4:	b082      	sub	sp, #8
 8001da6:	b590      	push	{r4, r7, lr}
 8001da8:	b089      	sub	sp, #36	; 0x24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	460b      	mov	r3, r1
 8001db4:	80bb      	strh	r3, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	4838      	ldr	r0, [pc, #224]	; (8001ea0 <ST7789_WriteChar+0xfc>)
 8001dc0:	f002 f8b8 	bl	8003f34 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001dc4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29c      	uxth	r4, r3
 8001dd4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	88bb      	ldrh	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	88b9      	ldrh	r1, [r7, #4]
 8001de6:	88f8      	ldrh	r0, [r7, #6]
 8001de8:	4622      	mov	r2, r4
 8001dea:	f7ff fea3 	bl	8001b34 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e043      	b.n	8001e7c <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8001df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	3b20      	subs	r3, #32
 8001dfa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	440b      	add	r3, r1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e029      	b.n	8001e6a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001e26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	743b      	strb	r3, [r7, #16]
 8001e30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fdf1 	bl	8001a24 <ST7789_WriteData>
 8001e42:	e00f      	b.n	8001e64 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	733b      	strb	r3, [r7, #12]
 8001e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fde0 	bl	8001a24 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e6e:	461a      	mov	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d3cf      	bcc.n	8001e16 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e80:	461a      	mov	r2, r3
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d3b5      	bcc.n	8001df4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <ST7789_WriteChar+0xfc>)
 8001e8e:	f002 f851 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001e92:	bf00      	nop
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e9c:	b002      	add	sp, #8
 8001e9e:	4770      	bx	lr
 8001ea0:	40020400 	.word	0x40020400

08001ea4 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af04      	add	r7, sp, #16
 8001eac:	603a      	str	r2, [r7, #0]
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	80fb      	strh	r3, [r7, #6]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	4822      	ldr	r0, [pc, #136]	; (8001f48 <ST7789_WriteString+0xa4>)
 8001ebe:	f002 f839 	bl	8003f34 <HAL_GPIO_WritePin>
	while (*str) {
 8001ec2:	e02e      	b.n	8001f22 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	7d3a      	ldrb	r2, [r7, #20]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ece:	db13      	blt.n	8001ef8 <ST7789_WriteString+0x54>
			x = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001ed4:	7d7b      	ldrb	r3, [r7, #21]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	88bb      	ldrh	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	7d7a      	ldrb	r2, [r7, #21]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	2bef      	cmp	r3, #239	; 0xef
 8001ee6:	dc21      	bgt.n	8001f2c <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d103      	bne.n	8001ef8 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	603b      	str	r3, [r7, #0]
				continue;
 8001ef6:	e014      	b.n	8001f22 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	88b9      	ldrh	r1, [r7, #4]
 8001efe:	88f8      	ldrh	r0, [r7, #6]
 8001f00:	8c3b      	ldrh	r3, [r7, #32]
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	8bbb      	ldrh	r3, [r7, #28]
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f7ff ff49 	bl	8001da4 <ST7789_WriteChar>
		x += font.width;
 8001f12:	7d3b      	ldrb	r3, [r7, #20]
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	4413      	add	r3, r2
 8001f1a:	80fb      	strh	r3, [r7, #6]
		str++;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1cc      	bne.n	8001ec4 <ST7789_WriteString+0x20>
 8001f2a:	e000      	b.n	8001f2e <ST7789_WriteString+0x8a>
				break;
 8001f2c:	bf00      	nop
	}
	ST7789_UnSelect();
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <ST7789_WriteString+0xa4>)
 8001f34:	f001 fffe 	bl	8003f34 <HAL_GPIO_WritePin>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f42:	b002      	add	sp, #8
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40020400 	.word	0x40020400

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_ADC_MspInit+0x7c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d127      	bne.n	800200e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_ADC_MspInit+0x80>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <HAL_ADC_MspInit+0x80>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_ADC_MspInit+0x80>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_ADC_MspInit+0x80>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_ADC_MspInit+0x80>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_ADC_MspInit+0x80>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_ADC_MspInit+0x84>)
 800200a:	f001 fddf 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40012000 	.word	0x40012000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_CAN_MspInit+0x148>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d13e      	bne.n	80020c4 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_CAN_MspInit+0x14c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_CAN_MspInit+0x14c>)
 800204e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_CAN_MspInit+0x14c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d10d      	bne.n	8002074 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a44      	ldr	r2, [pc, #272]	; (8002174 <HAL_CAN_MspInit+0x150>)
 8002062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a3d      	ldr	r2, [pc, #244]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_CAN_MspInit+0x150>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002090:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209a:	2301      	movs	r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020a2:	2309      	movs	r3, #9
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	4832      	ldr	r0, [pc, #200]	; (8002178 <HAL_CAN_MspInit+0x154>)
 80020ae:	f001 fd8d 	bl	8003bcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2014      	movs	r0, #20
 80020b8:	f001 fd51 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020bc:	2014      	movs	r0, #20
 80020be:	f001 fd6a 	bl	8003b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80020c2:	e04f      	b.n	8002164 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2c      	ldr	r2, [pc, #176]	; (800217c <HAL_CAN_MspInit+0x158>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d14a      	bne.n	8002164 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_CAN_MspInit+0x150>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_CAN_MspInit+0x150>)
 80020d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_CAN_MspInit+0x150>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_CAN_MspInit+0x14c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_CAN_MspInit+0x14c>)
 80020f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_CAN_MspInit+0x14c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10d      	bne.n	8002118 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_CAN_MspInit+0x150>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_CAN_MspInit+0x150>)
 8002106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <HAL_CAN_MspInit+0x150>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_CAN_MspInit+0x150>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002134:	2360      	movs	r3, #96	; 0x60
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213c:	2301      	movs	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002144:	2309      	movs	r3, #9
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <HAL_CAN_MspInit+0x15c>)
 8002150:	f001 fd3c 	bl	8003bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2040      	movs	r0, #64	; 0x40
 800215a:	f001 fd00 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800215e:	2040      	movs	r0, #64	; 0x40
 8002160:	f001 fd19 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	; 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40006400 	.word	0x40006400
 8002170:	20000148 	.word	0x20000148
 8002174:	40023800 	.word	0x40023800
 8002178:	40020000 	.word	0x40020000
 800217c:	40006800 	.word	0x40006800
 8002180:	40020400 	.word	0x40020400

08002184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_SPI_MspInit+0xc0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d149      	bne.n	800223a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220a:	2305      	movs	r3, #5
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <HAL_SPI_MspInit+0xc8>)
 8002216:	f001 fcd9 	bl	8003bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221a:	2308      	movs	r3, #8
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222a:	2305      	movs	r3, #5
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 8002236:	f001 fcc9 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40013000 	.word	0x40013000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d115      	bne.n	8002292 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_TIM_Base_MspInit+0x48>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_TIM_Base_MspInit+0x48>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_TIM_Base_MspInit+0x48>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	201c      	movs	r0, #28
 8002288:	f001 fc69 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800228c:	201c      	movs	r0, #28
 800228e:	f001 fc82 	bl	8003b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f000 f974 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <CAN1_RX0_IRQHandler+0x10>)
 80022fa:	f001 f926 	bl	800354a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200002f0 	.word	0x200002f0

08002308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <TIM2_IRQHandler+0x10>)
 800230e:	f003 f8b5 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200002a8 	.word	0x200002a8

0800231c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <CAN2_RX0_IRQHandler+0x10>)
 8002322:	f001 f912 	bl	800354a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200001e4 	.word	0x200001e4

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
	return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_kill>:

int _kill(int pid, int sig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800234a:	f003 fc59 	bl	8005c00 <__errno>
 800234e:	4603      	mov	r3, r0
 8002350:	2216      	movs	r2, #22
 8002352:	601a      	str	r2, [r3, #0]
	return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_exit>:

void _exit (int status)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffe7 	bl	8002340 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002372:	e7fe      	b.n	8002372 <_exit+0x12>

08002374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e00a      	b.n	800239c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002386:	f3af 8000 	nop.w
 800238a:	4601      	mov	r1, r0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf0      	blt.n	8002386 <_read+0x12>
	}

return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e009      	b.n	80023d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf1      	blt.n	80023c0 <_write+0x12>
	}
	return len;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_close>:

int _close(int file)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
	return -1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240e:	605a      	str	r2, [r3, #4]
	return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <_isatty>:

int _isatty(int file)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	return 1;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <_sbrk+0x5c>)
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <_sbrk+0x60>)
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <_sbrk+0x64>)
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <_sbrk+0x68>)
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002480:	f003 fbbe 	bl	8005c00 <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	220c      	movs	r2, #12
 8002488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	e009      	b.n	80024a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <_sbrk+0x64>)
 80024a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20020000 	.word	0x20020000
 80024b0:	00000400 	.word	0x00000400
 80024b4:	2000014c 	.word	0x2000014c
 80024b8:	20000360 	.word	0x20000360

080024bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024fc:	4c0b      	ldr	r4, [pc, #44]	; (800252c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800250a:	f7ff ffd7 	bl	80024bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f003 fb7d 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7fe fce1 	bl	8000ed8 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002524:	08008818 	.word	0x08008818
  ldr r2, =_sbss
 8002528:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800252c:	20000360 	.word	0x20000360

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <HAL_Init+0x40>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_Init+0x40>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800254e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <HAL_Init+0x40>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f001 faf3 	bl	8003b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	200f      	movs	r0, #15
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7ff fcf0 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fb0b 	bl	8003bb2 <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f001 fad3 	bl	8003b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000054 	.word	0x20000054
 80025d0:	2000005c 	.word	0x2000005c
 80025d4:	20000058 	.word	0x20000058

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000005c 	.word	0x2000005c
 80025fc:	2000034c 	.word	0x2000034c

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	2000034c 	.word	0x2000034c

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000005c 	.word	0x2000005c

08002660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e033      	b.n	80026de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fc8c 	bl	8001f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026a6:	f023 0302 	bic.w	r3, r3, #2
 80026aa:	f043 0202 	orr.w	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa1a 	bl	8002aec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
 80026ce:	e001      	b.n	80026d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_Start+0x1a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e0b2      	b.n	8002868 <HAL_ADC_Start+0x180>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d018      	beq.n	800274a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_ADC_Start+0x18c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_ADC_Start+0x190>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9a      	lsrs	r2, r3, #18
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800273c:	e002      	b.n	8002744 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b01      	subs	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d17a      	bne.n	800284e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002782:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	d106      	bne.n	80027a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f023 0206 	bic.w	r2, r3, #6
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
 80027a4:	e002      	b.n	80027ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b4:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_ADC_Start+0x194>)
 80027b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d12a      	bne.n	8002824 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_ADC_Start+0x198>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d015      	beq.n	8002804 <HAL_ADC_Start+0x11c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a29      	ldr	r2, [pc, #164]	; (8002884 <HAL_ADC_Start+0x19c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_Start+0x106>
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_ADC_Start+0x194>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a25      	ldr	r2, [pc, #148]	; (8002888 <HAL_ADC_Start+0x1a0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d136      	bne.n	8002866 <HAL_ADC_Start+0x17e>
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_ADC_Start+0x194>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d130      	bne.n	8002866 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d129      	bne.n	8002866 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	e020      	b.n	8002866 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_ADC_Start+0x198>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d11b      	bne.n	8002866 <HAL_ADC_Start+0x17e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d114      	bne.n	8002866 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e00b      	b.n	8002866 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20000054 	.word	0x20000054
 8002878:	431bde83 	.word	0x431bde83
 800287c:	40012300 	.word	0x40012300
 8002880:	40012000 	.word	0x40012000
 8002884:	40012100 	.word	0x40012100
 8002888:	40012200 	.word	0x40012200

0800288c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e105      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x228>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d925      	bls.n	8002920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68d9      	ldr	r1, [r3, #12]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	4603      	mov	r3, r0
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4403      	add	r3, r0
 8002912:	3b1e      	subs	r3, #30
 8002914:	409a      	lsls	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e022      	b.n	8002966 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	2207      	movs	r2, #7
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4618      	mov	r0, r3
 8002956:	4603      	mov	r3, r0
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4403      	add	r3, r0
 800295c:	409a      	lsls	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d824      	bhi.n	80029b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b05      	subs	r3, #5
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b05      	subs	r3, #5
 80029aa:	fa00 f203 	lsl.w	r2, r0, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
 80029b6:	e04c      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d824      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b23      	subs	r3, #35	; 0x23
 80029d2:	221f      	movs	r2, #31
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43da      	mvns	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b23      	subs	r3, #35	; 0x23
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
 8002a08:	e023      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b41      	subs	r3, #65	; 0x41
 8002a1c:	221f      	movs	r2, #31
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b41      	subs	r3, #65	; 0x41
 8002a46:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_ADC_ConfigChannel+0x234>)
 8002a54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <HAL_ADC_ConfigChannel+0x238>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1cc>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_ADC_ConfigChannel+0x238>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d123      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x21e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d003      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x1e6>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b11      	cmp	r3, #17
 8002a8c:	d11b      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d111      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_ADC_ConfigChannel+0x23c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_ADC_ConfigChannel+0x240>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	0c9a      	lsrs	r2, r3, #18
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ab8:	e002      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f9      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40012300 	.word	0x40012300
 8002ae0:	40012000 	.word	0x40012000
 8002ae4:	20000054 	.word	0x20000054
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af4:	4b79      	ldr	r3, [pc, #484]	; (8002cdc <ADC_Init+0x1f0>)
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <ADC_Init+0x1f4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e00f      	b.n	8002bea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002be8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0202 	bic.w	r2, r2, #2
 8002bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7e1b      	ldrb	r3, [r3, #24]
 8002c04:	005a      	lsls	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	3b01      	subs	r3, #1
 8002c44:	035a      	lsls	r2, r3, #13
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e007      	b.n	8002c60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	051a      	lsls	r2, r3, #20
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca2:	025a      	lsls	r2, r3, #9
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	029a      	lsls	r2, r3, #10
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40012300 	.word	0x40012300
 8002ce0:	0f000001 	.word	0x0f000001

08002ce4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0ed      	b.n	8002ed2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff f98e 	bl	8002024 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d18:	f7ff fc72 	bl	8002600 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d1e:	e012      	b.n	8002d46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d20:	f7ff fc6e 	bl	8002600 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b0a      	cmp	r3, #10
 8002d2c:	d90b      	bls.n	8002d46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0c5      	b.n	8002ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0e5      	beq.n	8002d20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0202 	bic.w	r2, r2, #2
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d64:	f7ff fc4c 	bl	8002600 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6a:	e012      	b.n	8002d92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d6c:	f7ff fc48 	bl	8002600 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b0a      	cmp	r3, #10
 8002d78:	d90b      	bls.n	8002d92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2205      	movs	r2, #5
 8002d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e09f      	b.n	8002ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7e1b      	ldrb	r3, [r3, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e007      	b.n	8002dca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7e5b      	ldrb	r3, [r3, #25]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e007      	b.n	8002df4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7e9b      	ldrb	r3, [r3, #26]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e007      	b.n	8002e1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0220 	bic.w	r2, r2, #32
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7edb      	ldrb	r3, [r3, #27]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d108      	bne.n	8002e38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0210 	bic.w	r2, r2, #16
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e007      	b.n	8002e48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0210 	orr.w	r2, r2, #16
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7f1b      	ldrb	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d108      	bne.n	8002e62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e007      	b.n	8002e72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0208 	bic.w	r2, r2, #8
 8002e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7f5b      	ldrb	r3, [r3, #29]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0204 	orr.w	r2, r2, #4
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e007      	b.n	8002e9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d003      	beq.n	8002f02 <HAL_CAN_ConfigFilter+0x26>
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	f040 80be 	bne.w	800307e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_CAN_ConfigFilter+0x1bc>)
 8002f04:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	431a      	orrs	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2201      	movs	r2, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	401a      	ands	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d123      	bne.n	8002fac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3248      	adds	r2, #72	; 0x48
 8002f8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fa0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fa2:	6979      	ldr	r1, [r7, #20]
 8002fa4:	3348      	adds	r3, #72	; 0x48
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d122      	bne.n	8002ffa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3248      	adds	r2, #72	; 0x48
 8002fda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	3348      	adds	r3, #72	; 0x48
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	401a      	ands	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003014:	e007      	b.n	8003026 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	431a      	orrs	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	43db      	mvns	r3, r3
 8003038:	401a      	ands	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003040:	e007      	b.n	8003052 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	431a      	orrs	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	431a      	orrs	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003070:	f023 0201 	bic.w	r2, r3, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e006      	b.n	800308c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40006400 	.word	0x40006400

0800309c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d12e      	bne.n	800310e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030c8:	f7ff fa9a 	bl	8002600 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030ce:	e012      	b.n	80030f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030d0:	f7ff fa96 	bl	8002600 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b0a      	cmp	r3, #10
 80030dc:	d90b      	bls.n	80030f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2205      	movs	r2, #5
 80030ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e012      	b.n	800311c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e006      	b.n	800311c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003138:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d003      	beq.n	8003150 <HAL_CAN_AddTxMessage+0x2c>
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	2b02      	cmp	r3, #2
 800314c:	f040 80b8 	bne.w	80032c0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80a0 	beq.w	80032b0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	0e1b      	lsrs	r3, r3, #24
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d907      	bls.n	8003190 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e09e      	b.n	80032ce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003190:	2201      	movs	r2, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	409a      	lsls	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3318      	adds	r3, #24
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	440b      	add	r3, r1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e00f      	b.n	80031de <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80031d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3318      	adds	r3, #24
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	440b      	add	r3, r1
 80031dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3318      	adds	r3, #24
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	440b      	add	r3, r1
 80031ee:	3304      	adds	r3, #4
 80031f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	7d1b      	ldrb	r3, [r3, #20]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d111      	bne.n	800321e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3318      	adds	r3, #24
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	6811      	ldr	r1, [r2, #0]
 800320e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3318      	adds	r3, #24
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	440b      	add	r3, r1
 800321a:	3304      	adds	r3, #4
 800321c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3307      	adds	r3, #7
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	061a      	lsls	r2, r3, #24
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3306      	adds	r3, #6
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3305      	adds	r3, #5
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	4313      	orrs	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	3204      	adds	r2, #4
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	4610      	mov	r0, r2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6811      	ldr	r1, [r2, #0]
 8003246:	ea43 0200 	orr.w	r2, r3, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	440b      	add	r3, r1
 8003250:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003254:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3303      	adds	r3, #3
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	061a      	lsls	r2, r3, #24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3302      	adds	r3, #2
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3301      	adds	r3, #1
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4313      	orrs	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	4610      	mov	r0, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	6811      	ldr	r1, [r2, #0]
 800327c:	ea43 0200 	orr.w	r2, r3, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	440b      	add	r3, r1
 8003286:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800328a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3318      	adds	r3, #24
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	4413      	add	r3, r2
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3318      	adds	r3, #24
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e00e      	b.n	80032ce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e006      	b.n	80032ce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <HAL_CAN_GetRxMessage+0x24>
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	f040 80f3 	bne.w	80034e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10e      	bne.n	8003322 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0e7      	b.n	80034f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0d8      	b.n	80034f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	331b      	adds	r3, #27
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4413      	add	r3, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0204 	and.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	331b      	adds	r3, #27
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4413      	add	r3, r2
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e00b      	b.n	8003390 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	331b      	adds	r3, #27
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4413      	add	r3, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	08db      	lsrs	r3, r3, #3
 8003388:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	331b      	adds	r3, #27
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4413      	add	r3, r2
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0202 	and.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	331b      	adds	r3, #27
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 020f 	and.w	r2, r3, #15
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	331b      	adds	r3, #27
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	331b      	adds	r3, #27
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	4413      	add	r3, r2
 800340e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0a1a      	lsrs	r2, r3, #8
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	4413      	add	r3, r2
 8003428:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	0c1a      	lsrs	r2, r3, #16
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	3302      	adds	r3, #2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4413      	add	r3, r2
 8003442:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e1a      	lsrs	r2, r3, #24
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3303      	adds	r3, #3
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	4413      	add	r3, r2
 800345c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	3304      	adds	r3, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	4413      	add	r3, r2
 8003474:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0a1a      	lsrs	r2, r3, #8
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	3305      	adds	r3, #5
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0c1a      	lsrs	r2, r3, #16
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3306      	adds	r3, #6
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e1a      	lsrs	r2, r3, #24
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	3307      	adds	r3, #7
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d108      	bne.n	80034d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	e007      	b.n	80034e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e006      	b.n	80034f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <HAL_CAN_ActivateNotification+0x1e>
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d109      	bne.n	8003530 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6959      	ldr	r1, [r3, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e006      	b.n	800353e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b08a      	sub	sp, #40	; 0x28
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d07c      	beq.n	800368a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d023      	beq.n	80035e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f983 	bl	80038b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80035b2:	e016      	b.n	80035e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
 80035c6:	e00c      	b.n	80035e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	e002      	b.n	80035e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f989 	bl	80038f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d024      	beq.n	8003636 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f963 	bl	80038cc <HAL_CAN_TxMailbox1CompleteCallback>
 8003606:	e016      	b.n	8003636 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	e00c      	b.n	8003636 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	e002      	b.n	8003636 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f969 	bl	8003908 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d024      	beq.n	800368a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003648:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f943 	bl	80038e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800365a:	e016      	b.n	800368a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	e00c      	b.n	800368a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	e002      	b.n	800368a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f949 	bl	800391c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2210      	movs	r2, #16
 80036ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2208      	movs	r2, #8
 80036c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f930 	bl	8003930 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fe f85f 	bl	80017ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00c      	beq.n	8003712 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003708:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d006      	beq.n	8003734 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2208      	movs	r2, #8
 800372c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f912 	bl	8003958 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8f9 	bl	8003944 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2210      	movs	r2, #16
 800376c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8fc 	bl	800396c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2208      	movs	r2, #8
 800378e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8f5 	bl	8003980 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d07b      	beq.n	8003898 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d072      	beq.n	8003890 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003804:	2b00      	cmp	r3, #0
 8003806:	d043      	beq.n	8003890 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03e      	beq.n	8003890 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d02b      	beq.n	8003874 <HAL_CAN_IRQHandler+0x32a>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d82e      	bhi.n	800387e <HAL_CAN_IRQHandler+0x334>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d022      	beq.n	800386a <HAL_CAN_IRQHandler+0x320>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d82a      	bhi.n	800387e <HAL_CAN_IRQHandler+0x334>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d019      	beq.n	8003860 <HAL_CAN_IRQHandler+0x316>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d826      	bhi.n	800387e <HAL_CAN_IRQHandler+0x334>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d010      	beq.n	8003856 <HAL_CAN_IRQHandler+0x30c>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d822      	bhi.n	800387e <HAL_CAN_IRQHandler+0x334>
 8003838:	2b10      	cmp	r3, #16
 800383a:	d002      	beq.n	8003842 <HAL_CAN_IRQHandler+0x2f8>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d005      	beq.n	800384c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003840:	e01d      	b.n	800387e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800384a:	e019      	b.n	8003880 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f043 0310 	orr.w	r3, r3, #16
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003854:	e014      	b.n	8003880 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f043 0320 	orr.w	r3, r3, #32
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800385e:	e00f      	b.n	8003880 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003868:	e00a      	b.n	8003880 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003872:	e005      	b.n	8003880 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800387c:	e000      	b.n	8003880 <HAL_CAN_IRQHandler+0x336>
            break;
 800387e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800388e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2204      	movs	r2, #4
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f872 	bl	8003994 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038b0:	bf00      	nop
 80038b2:	3728      	adds	r7, #40	; 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	db0b      	blt.n	8003a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <__NVIC_EnableIRQ+0x38>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	; (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf28      	it	cs
 8003aba:	2304      	movcs	r3, #4
 8003abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <NVIC_EncodePriority+0x30>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b03      	subs	r3, #3
 8003aca:	e000      	b.n	8003ace <NVIC_EncodePriority+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	4313      	orrs	r3, r2
         );
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b14:	d301      	bcc.n	8003b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <SysTick_Config+0x40>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b22:	210f      	movs	r1, #15
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	f7ff ff8e 	bl	8003a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <SysTick_Config+0x40>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <SysTick_Config+0x40>)
 8003b34:	2207      	movs	r2, #7
 8003b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	e000e010 	.word	0xe000e010

08003b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff29 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b70:	f7ff ff3e 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ff8e 	bl	8003a9c <NVIC_EncodePriority>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff5d 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff31 	bl	8003a0c <__NVIC_EnableIRQ>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffa2 	bl	8003b04 <SysTick_Config>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e16b      	b.n	8003ec0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 815a 	bne.w	8003eba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d005      	beq.n	8003c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d017      	beq.n	8003cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d123      	bne.n	8003d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	220f      	movs	r2, #15
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80b4 	beq.w	8003eba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b60      	ldr	r3, [pc, #384]	; (8003ed8 <HAL_GPIO_Init+0x30c>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a5f      	ldr	r2, [pc, #380]	; (8003ed8 <HAL_GPIO_Init+0x30c>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <HAL_GPIO_Init+0x30c>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6e:	4a5b      	ldr	r2, [pc, #364]	; (8003edc <HAL_GPIO_Init+0x310>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a52      	ldr	r2, [pc, #328]	; (8003ee0 <HAL_GPIO_Init+0x314>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02b      	beq.n	8003df2 <HAL_GPIO_Init+0x226>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_GPIO_Init+0x318>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d025      	beq.n	8003dee <HAL_GPIO_Init+0x222>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a50      	ldr	r2, [pc, #320]	; (8003ee8 <HAL_GPIO_Init+0x31c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <HAL_GPIO_Init+0x21e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4f      	ldr	r2, [pc, #316]	; (8003eec <HAL_GPIO_Init+0x320>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d019      	beq.n	8003de6 <HAL_GPIO_Init+0x21a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4e      	ldr	r2, [pc, #312]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0x216>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4d      	ldr	r2, [pc, #308]	; (8003ef4 <HAL_GPIO_Init+0x328>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_GPIO_Init+0x212>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4c      	ldr	r2, [pc, #304]	; (8003ef8 <HAL_GPIO_Init+0x32c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_Init+0x20e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4b      	ldr	r2, [pc, #300]	; (8003efc <HAL_GPIO_Init+0x330>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_GPIO_Init+0x20a>
 8003dd2:	2307      	movs	r3, #7
 8003dd4:	e00e      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	e00c      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003dda:	2306      	movs	r3, #6
 8003ddc:	e00a      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003dde:	2305      	movs	r3, #5
 8003de0:	e008      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003de2:	2304      	movs	r3, #4
 8003de4:	e006      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003de6:	2303      	movs	r3, #3
 8003de8:	e004      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e002      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_GPIO_Init+0x228>
 8003df2:	2300      	movs	r3, #0
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f002 0203 	and.w	r2, r2, #3
 8003dfa:	0092      	lsls	r2, r2, #2
 8003dfc:	4093      	lsls	r3, r2
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e04:	4935      	ldr	r1, [pc, #212]	; (8003edc <HAL_GPIO_Init+0x310>)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e36:	4a32      	ldr	r2, [pc, #200]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb4:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <HAL_GPIO_Init+0x334>)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	f67f ae90 	bls.w	8003be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	40020400 	.word	0x40020400
 8003ee8:	40020800 	.word	0x40020800
 8003eec:	40020c00 	.word	0x40020c00
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40021400 	.word	0x40021400
 8003ef8:	40021800 	.word	0x40021800
 8003efc:	40021c00 	.word	0x40021c00
 8003f00:	40013c00 	.word	0x40013c00

08003f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e001      	b.n	8003f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
 8003f40:	4613      	mov	r3, r2
 8003f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f44:	787b      	ldrb	r3, [r7, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f50:	e003      	b.n	8003f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f52:	887b      	ldrh	r3, [r7, #2]
 8003f54:	041a      	lsls	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e264      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	4ba3      	ldr	r3, [pc, #652]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4ba0      	ldr	r3, [pc, #640]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b9d      	ldr	r3, [pc, #628]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b99      	ldr	r3, [pc, #612]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e23f      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x74>
 8003fce:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a90      	ldr	r2, [pc, #576]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b8b      	ldr	r3, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a8a      	ldr	r2, [pc, #552]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a87      	ldr	r2, [pc, #540]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8004000:	4b84      	ldr	r3, [pc, #528]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a83      	ldr	r2, [pc, #524]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b81      	ldr	r3, [pc, #516]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a80      	ldr	r2, [pc, #512]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe faee 	bl	8002600 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe faea 	bl	8002600 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e204      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe fada 	bl	8002600 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe fad6 	bl	8002600 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e1f0      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0xe8>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b5f      	ldr	r3, [pc, #380]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e1c4      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b56      	ldr	r3, [pc, #344]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4952      	ldr	r1, [pc, #328]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	e03a      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <HAL_RCC_OscConfig+0x2b0>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fe fa8f 	bl	8002600 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e6:	f7fe fa8b 	bl	8002600 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1a5      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4940      	ldr	r1, [pc, #256]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e015      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_OscConfig+0x2b0>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe fa6e 	bl	8002600 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004128:	f7fe fa6a 	bl	8002600 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e184      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d030      	beq.n	80041b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b30      	ldr	r3, [pc, #192]	; (800421c <HAL_RCC_OscConfig+0x2b4>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fe fa4e 	bl	8002600 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004168:	f7fe fa4a 	bl	8002600 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e164      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x200>
 8004186:	e015      	b.n	80041b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_OscConfig+0x2b4>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe fa37 	bl	8002600 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe fa33 	bl	8002600 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e14d      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a0 	beq.w	8004302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a0e      	ldr	r2, [pc, #56]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_OscConfig+0x2b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_RCC_OscConfig+0x2b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_RCC_OscConfig+0x2b8>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fe f9f9 	bl	8002600 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	e011      	b.n	8004236 <HAL_RCC_OscConfig+0x2ce>
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	42470000 	.word	0x42470000
 800421c:	42470e80 	.word	0x42470e80
 8004220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fe f9ec 	bl	8002600 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e106      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCC_OscConfig+0x4e4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x2f0>
 800424a:	4b81      	ldr	r3, [pc, #516]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a80      	ldr	r2, [pc, #512]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e01c      	b.n	8004292 <HAL_RCC_OscConfig+0x32a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d10c      	bne.n	800427a <HAL_RCC_OscConfig+0x312>
 8004260:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a7a      	ldr	r2, [pc, #488]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b78      	ldr	r3, [pc, #480]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a77      	ldr	r2, [pc, #476]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	e00b      	b.n	8004292 <HAL_RCC_OscConfig+0x32a>
 800427a:	4b75      	ldr	r3, [pc, #468]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a74      	ldr	r2, [pc, #464]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b72      	ldr	r3, [pc, #456]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a71      	ldr	r2, [pc, #452]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe f9b1 	bl	8002600 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fe f9ad 	bl	8002600 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0c5      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ee      	beq.n	80042a2 <HAL_RCC_OscConfig+0x33a>
 80042c4:	e014      	b.n	80042f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe f99b 	bl	8002600 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fe f997 	bl	8002600 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0af      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ee      	bne.n	80042ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f6:	4b56      	ldr	r3, [pc, #344]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a55      	ldr	r2, [pc, #340]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 809b 	beq.w	8004442 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800430c:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d05c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d141      	bne.n	80043a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fe f96b 	bl	8002600 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432e:	f7fe f967 	bl	8002600 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e081      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004340:	4b43      	ldr	r3, [pc, #268]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	019b      	lsls	r3, r3, #6
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	4937      	ldr	r1, [pc, #220]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe f940 	bl	8002600 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004384:	f7fe f93c 	bl	8002600 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e056      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x41c>
 80043a2:	e04e      	b.n	8004442 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fe f929 	bl	8002600 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe f925 	bl	8002600 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e03f      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x44a>
 80043d0:	e037      	b.n	8004442 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e032      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d028      	beq.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d121      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d11a      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004414:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d107      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d001      	beq.n	8004442 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40007000 	.word	0x40007000
 8004450:	40023800 	.word	0x40023800
 8004454:	42470060 	.word	0x42470060

08004458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0cc      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b68      	ldr	r3, [pc, #416]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d90c      	bls.n	8004494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0b8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ac:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a58      	ldr	r2, [pc, #352]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	494d      	ldr	r1, [pc, #308]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d044      	beq.n	8004578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d119      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d003      	beq.n	8004516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	2b03      	cmp	r3, #3
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e067      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4934      	ldr	r1, [pc, #208]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fe f85a 	bl	8002600 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe f856 	bl	8002600 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d20c      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e032      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4916      	ldr	r1, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	490e      	ldr	r1, [pc, #56]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045de:	f000 f821 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	5ccb      	ldrb	r3, [r1, r3]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd ffba 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023c00 	.word	0x40023c00
 8004614:	40023800 	.word	0x40023800
 8004618:	080086ac 	.word	0x080086ac
 800461c:	20000054 	.word	0x20000054
 8004620:	20000058 	.word	0x20000058

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462a:	2100      	movs	r1, #0
 800462c:	6079      	str	r1, [r7, #4]
 800462e:	2100      	movs	r1, #0
 8004630:	60f9      	str	r1, [r7, #12]
 8004632:	2100      	movs	r1, #0
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004636:	2100      	movs	r1, #0
 8004638:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463a:	4952      	ldr	r1, [pc, #328]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800463c:	6889      	ldr	r1, [r1, #8]
 800463e:	f001 010c 	and.w	r1, r1, #12
 8004642:	2908      	cmp	r1, #8
 8004644:	d00d      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x3e>
 8004646:	2908      	cmp	r1, #8
 8004648:	f200 8094 	bhi.w	8004774 <HAL_RCC_GetSysClockFreq+0x150>
 800464c:	2900      	cmp	r1, #0
 800464e:	d002      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x32>
 8004650:	2904      	cmp	r1, #4
 8004652:	d003      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x38>
 8004654:	e08e      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004656:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <HAL_RCC_GetSysClockFreq+0x164>)
 8004658:	60bb      	str	r3, [r7, #8]
       break;
 800465a:	e08e      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCC_GetSysClockFreq+0x168>)
 800465e:	60bb      	str	r3, [r7, #8]
      break;
 8004660:	e08b      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004662:	4948      	ldr	r1, [pc, #288]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 8004664:	6849      	ldr	r1, [r1, #4]
 8004666:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800466a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466c:	4945      	ldr	r1, [pc, #276]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800466e:	6849      	ldr	r1, [r1, #4]
 8004670:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004674:	2900      	cmp	r1, #0
 8004676:	d024      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004678:	4942      	ldr	r1, [pc, #264]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800467a:	6849      	ldr	r1, [r1, #4]
 800467c:	0989      	lsrs	r1, r1, #6
 800467e:	4608      	mov	r0, r1
 8004680:	f04f 0100 	mov.w	r1, #0
 8004684:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004688:	f04f 0500 	mov.w	r5, #0
 800468c:	ea00 0204 	and.w	r2, r0, r4
 8004690:	ea01 0305 	and.w	r3, r1, r5
 8004694:	493d      	ldr	r1, [pc, #244]	; (800478c <HAL_RCC_GetSysClockFreq+0x168>)
 8004696:	fb01 f003 	mul.w	r0, r1, r3
 800469a:	2100      	movs	r1, #0
 800469c:	fb01 f102 	mul.w	r1, r1, r2
 80046a0:	1844      	adds	r4, r0, r1
 80046a2:	493a      	ldr	r1, [pc, #232]	; (800478c <HAL_RCC_GetSysClockFreq+0x168>)
 80046a4:	fba2 0101 	umull	r0, r1, r2, r1
 80046a8:	1863      	adds	r3, r4, r1
 80046aa:	4619      	mov	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	f7fb fddc 	bl	8000270 <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4613      	mov	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e04a      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	461a      	mov	r2, r3
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	ea02 0400 	and.w	r4, r2, r0
 80046da:	ea03 0501 	and.w	r5, r3, r1
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	014b      	lsls	r3, r1, #5
 80046ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046f0:	0142      	lsls	r2, r0, #5
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	1b00      	subs	r0, r0, r4
 80046f8:	eb61 0105 	sbc.w	r1, r1, r5
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	018b      	lsls	r3, r1, #6
 8004706:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800470a:	0182      	lsls	r2, r0, #6
 800470c:	1a12      	subs	r2, r2, r0
 800470e:	eb63 0301 	sbc.w	r3, r3, r1
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	00d9      	lsls	r1, r3, #3
 800471c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004720:	00d0      	lsls	r0, r2, #3
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	1912      	adds	r2, r2, r4
 8004728:	eb45 0303 	adc.w	r3, r5, r3
 800472c:	f04f 0000 	mov.w	r0, #0
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	0299      	lsls	r1, r3, #10
 8004736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800473a:	0290      	lsls	r0, r2, #10
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	461a      	mov	r2, r3
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f7fb fd90 	bl	8000270 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
      break;
 8004772:	e002      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_GetSysClockFreq+0x164>)
 8004776:	60bb      	str	r3, [r7, #8]
      break;
 8004778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477a:	68bb      	ldr	r3, [r7, #8]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bdb0      	pop	{r4, r5, r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	017d7840 	.word	0x017d7840

08004790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07b      	b.n	800489a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b2:	d009      	beq.n	80047c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	61da      	str	r2, [r3, #28]
 80047ba:	e005      	b.n	80047c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fcce 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0104 	and.w	r1, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0210 	and.w	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004888:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_SPI_Transmit+0x22>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e126      	b.n	8004b12 <HAL_SPI_Transmit+0x270>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048cc:	f7fd fe98 	bl	8002600 <HAL_GetTick>
 80048d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
 80048e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048e6:	e10b      	b.n	8004b00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0x52>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f8:	e102      	b.n	8004b00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	d10f      	bne.n	8004962 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004950:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004960:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d007      	beq.n	8004980 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800497e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004988:	d14b      	bne.n	8004a22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Transmit+0xf6>
 8004992:	8afb      	ldrh	r3, [r7, #22]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d13e      	bne.n	8004a16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	881a      	ldrh	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049bc:	e02b      	b.n	8004a16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d112      	bne.n	80049f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80049f0:	e011      	b.n	8004a16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f2:	f7fd fe05 	bl	8002600 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d803      	bhi.n	8004a0a <HAL_SPI_Transmit+0x168>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_Transmit+0x16e>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a14:	e074      	b.n	8004b00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ce      	bne.n	80049be <HAL_SPI_Transmit+0x11c>
 8004a20:	e04c      	b.n	8004abc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0x18e>
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d140      	bne.n	8004ab2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a56:	e02c      	b.n	8004ab2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d113      	bne.n	8004a8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	7812      	ldrb	r2, [r2, #0]
 8004a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a8c:	e011      	b.n	8004ab2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a8e:	f7fd fdb7 	bl	8002600 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d803      	bhi.n	8004aa6 <HAL_SPI_Transmit+0x204>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d102      	bne.n	8004aac <HAL_SPI_Transmit+0x20a>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ab0:	e026      	b.n	8004b00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1cd      	bne.n	8004a58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fbd9 	bl	8005278 <SPI_EndRxTxTransaction>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e000      	b.n	8004b00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b088      	sub	sp, #32
 8004b1e:	af02      	add	r7, sp, #8
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b36:	d112      	bne.n	8004b5e <HAL_SPI_Receive+0x44>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10e      	bne.n	8004b5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f8f1 	bl	8004d3c <HAL_SPI_TransmitReceive>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	e0ea      	b.n	8004d34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_Receive+0x52>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0e3      	b.n	8004d34 <HAL_SPI_Receive+0x21a>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b74:	f7fd fd44 	bl	8002600 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b8a:	e0ca      	b.n	8004d22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_SPI_Receive+0x7e>
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9c:	e0c1      	b.n	8004d22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be4:	d10f      	bne.n	8004c06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d007      	beq.n	8004c24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d162      	bne.n	8004cf2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c2c:	e02e      	b.n	8004c8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d115      	bne.n	8004c68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f103 020c 	add.w	r2, r3, #12
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c66:	e011      	b.n	8004c8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c68:	f7fd fcca 	bl	8002600 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d803      	bhi.n	8004c80 <HAL_SPI_Receive+0x166>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Receive+0x16c>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c8a:	e04a      	b.n	8004d22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cb      	bne.n	8004c2e <HAL_SPI_Receive+0x114>
 8004c96:	e031      	b.n	8004cfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d113      	bne.n	8004cce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ccc:	e011      	b.n	8004cf2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cce:	f7fd fc97 	bl	8002600 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_Receive+0x1cc>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Receive+0x1d2>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cf0:	e017      	b.n	8004d22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1cd      	bne.n	8004c98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fa53 	bl	80051ac <SPI_EndRxTransaction>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
 8004d1e:	e000      	b.n	8004d22 <HAL_SPI_Receive+0x208>
  }

error :
 8004d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	; 0x30
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x26>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e18a      	b.n	8005078 <HAL_SPI_TransmitReceive+0x33c>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6a:	f7fd fc49 	bl	8002600 <HAL_GetTick>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d80:	887b      	ldrh	r3, [r7, #2]
 8004d82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d00f      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x70>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d107      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x68>
 8004d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d003      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004daa:	e15b      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x82>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x82>
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dc4:	e14e      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d003      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	887a      	ldrh	r2, [r7, #2]
 8004dea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	887a      	ldrh	r2, [r7, #2]
 8004e02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d007      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	d178      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x10a>
 8004e40:	8b7b      	ldrh	r3, [r7, #26]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d166      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6a:	e053      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d11b      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x176>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x176>
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d113      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d119      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x1b8>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	b292      	uxth	r2, r2
 8004ed6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ef4:	f7fd fb84 	bl	8002600 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d807      	bhi.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f12:	e0a7      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1a6      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x130>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1a1      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x130>
 8004f28:	e07c      	b.n	8005024 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x1fc>
 8004f32:	8b7b      	ldrh	r3, [r7, #26]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d16b      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5e:	e057      	b.n	8005010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x26c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d017      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x26c>
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d114      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d119      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x2ae>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d014      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fea:	f7fd fb09 	bl	8002600 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d803      	bhi.n	8005002 <HAL_SPI_TransmitReceive+0x2c6>
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d102      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x2cc>
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800500e:	e029      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1a2      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x224>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d19d      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f925 	bl	8005278 <SPI_EndRxTxTransaction>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005040:	e010      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	e000      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005078:	4618      	mov	r0, r3
 800507a:	3730      	adds	r7, #48	; 0x30
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800508e:	b2db      	uxtb	r3, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050ac:	f7fd faa8 	bl	8002600 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050bc:	f7fd faa0 	bl	8002600 <HAL_GetTick>
 80050c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	015b      	lsls	r3, r3, #5
 80050c8:	0d1b      	lsrs	r3, r3, #20
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050d2:	e054      	b.n	800517e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d050      	beq.n	800517e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050dc:	f7fd fa90 	bl	8002600 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d902      	bls.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d13d      	bne.n	800516e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d111      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x94>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005114:	d004      	beq.n	8005120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511e:	d107      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005138:	d10f      	bne.n	800515a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e017      	b.n	800519e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3b01      	subs	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	429a      	cmp	r2, r3
 800519a:	d19b      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000054 	.word	0x20000054

080051ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c0:	d111      	bne.n	80051e6 <SPI_EndRxTransaction+0x3a>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ca:	d004      	beq.n	80051d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d107      	bne.n	80051e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d12a      	bne.n	8005246 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d012      	beq.n	8005220 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff ff49 	bl	800509c <SPI_WaitFlagStateUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02d      	beq.n	800526c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e026      	b.n	800526e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2200      	movs	r2, #0
 8005228:	2101      	movs	r1, #1
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff36 	bl	800509c <SPI_WaitFlagStateUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01a      	beq.n	800526c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e013      	b.n	800526e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	2101      	movs	r1, #1
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff23 	bl	800509c <SPI_WaitFlagStateUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e000      	b.n	800526e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <SPI_EndRxTxTransaction+0x7c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <SPI_EndRxTxTransaction+0x80>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	0d5b      	lsrs	r3, r3, #21
 8005290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a2:	d112      	bne.n	80052ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fef4 	bl	800509c <SPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e00f      	b.n	80052ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e0:	2b80      	cmp	r3, #128	; 0x80
 80052e2:	d0f2      	beq.n	80052ca <SPI_EndRxTxTransaction+0x52>
 80052e4:	e000      	b.n	80052e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80052e6:	bf00      	nop
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000054 	.word	0x20000054
 80052f8:	165e9f81 	.word	0x165e9f81

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e041      	b.n	8005392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc ff96 	bl	8002254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fa96 	bl	800586c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d001      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e04e      	b.n	8005452 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a23      	ldr	r2, [pc, #140]	; (8005460 <HAL_TIM_Base_Start_IT+0xc4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d022      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d01d      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_TIM_Base_Start_IT+0xc8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d018      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <HAL_TIM_Base_Start_IT+0xcc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_TIM_Base_Start_IT+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <HAL_TIM_Base_Start_IT+0xd4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a19      	ldr	r2, [pc, #100]	; (8005474 <HAL_TIM_Base_Start_IT+0xd8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x80>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_TIM_Base_Start_IT+0xdc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d111      	bne.n	8005440 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b06      	cmp	r3, #6
 800542c:	d010      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	e007      	b.n	8005450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40001800 	.word	0x40001800

0800547c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0202 	mvn.w	r2, #2
 80054a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f9b5 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f9a7 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9b8 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d122      	bne.n	800552c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d11b      	bne.n	800552c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0204 	mvn.w	r2, #4
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f98b 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f97d 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f98e 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0208 	mvn.w	r2, #8
 8005550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f961 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f953 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f964 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b10      	cmp	r3, #16
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b10      	cmp	r3, #16
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0210 	mvn.w	r2, #16
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f937 	bl	800582e <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f929 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f93a 	bl	8005842 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0201 	mvn.w	r2, #1
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc f8ca 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fae0 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8ff 	bl	8005856 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b20      	cmp	r3, #32
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0220 	mvn.w	r2, #32
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 faaa 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e0b4      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x186>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e0:	d03e      	beq.n	8005760 <HAL_TIM_ConfigClockSource+0xd4>
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e6:	f200 8087 	bhi.w	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	f000 8086 	beq.w	80057fe <HAL_TIM_ConfigClockSource+0x172>
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d87f      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d01a      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0xa6>
 80056fc:	2b70      	cmp	r3, #112	; 0x70
 80056fe:	d87b      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d050      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005704:	2b60      	cmp	r3, #96	; 0x60
 8005706:	d877      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b50      	cmp	r3, #80	; 0x50
 800570a:	d03c      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0xfa>
 800570c:	2b50      	cmp	r3, #80	; 0x50
 800570e:	d873      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d058      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d86f      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d064      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 800571c:	2b30      	cmp	r3, #48	; 0x30
 800571e:	d86b      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d060      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005724:	2b20      	cmp	r3, #32
 8005726:	d867      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d05c      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	2b10      	cmp	r3, #16
 800572e:	d05a      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005730:	e062      	b.n	80057f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6899      	ldr	r1, [r3, #8]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f000 f9ad 	bl	8005aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	609a      	str	r2, [r3, #8]
      break;
 800575e:	e04f      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6899      	ldr	r1, [r3, #8]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f000 f996 	bl	8005aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005782:	609a      	str	r2, [r3, #8]
      break;
 8005784:	e03c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	461a      	mov	r2, r3
 8005794:	f000 f90a 	bl	80059ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2150      	movs	r1, #80	; 0x50
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f963 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057a4:	e02c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 f929 	bl	8005a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2160      	movs	r1, #96	; 0x60
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f953 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057c4:	e01c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 f8ea 	bl	80059ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f943 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057e4:	e00c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 f93a 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057f6:	e003      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e000      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a40      	ldr	r2, [pc, #256]	; (8005980 <TIM_Base_SetConfig+0x114>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d00f      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3d      	ldr	r2, [pc, #244]	; (8005984 <TIM_Base_SetConfig+0x118>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00b      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3c      	ldr	r2, [pc, #240]	; (8005988 <TIM_Base_SetConfig+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3b      	ldr	r2, [pc, #236]	; (800598c <TIM_Base_SetConfig+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3a      	ldr	r2, [pc, #232]	; (8005990 <TIM_Base_SetConfig+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d108      	bne.n	80058be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <TIM_Base_SetConfig+0x114>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d027      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <TIM_Base_SetConfig+0x118>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d023      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2b      	ldr	r2, [pc, #172]	; (8005988 <TIM_Base_SetConfig+0x11c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2a      	ldr	r2, [pc, #168]	; (800598c <TIM_Base_SetConfig+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a29      	ldr	r2, [pc, #164]	; (8005990 <TIM_Base_SetConfig+0x124>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a28      	ldr	r2, [pc, #160]	; (8005994 <TIM_Base_SetConfig+0x128>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a27      	ldr	r2, [pc, #156]	; (8005998 <TIM_Base_SetConfig+0x12c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a26      	ldr	r2, [pc, #152]	; (800599c <TIM_Base_SetConfig+0x130>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <TIM_Base_SetConfig+0x134>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <TIM_Base_SetConfig+0x138>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a23      	ldr	r2, [pc, #140]	; (80059a8 <TIM_Base_SetConfig+0x13c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <TIM_Base_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xf8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40010400 	.word	0x40010400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	40001800 	.word	0x40001800
 80059a4:	40001c00 	.word	0x40001c00
 80059a8:	40002000 	.word	0x40002000

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f043 0307 	orr.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e05a      	b.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d01d      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10c      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40010400 	.word	0x40010400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40001800 	.word	0x40001800

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <__errno>:
 8005c00:	4b01      	ldr	r3, [pc, #4]	; (8005c08 <__errno+0x8>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000060 	.word	0x20000060

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4d0d      	ldr	r5, [pc, #52]	; (8005c44 <__libc_init_array+0x38>)
 8005c10:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c12:	1b64      	subs	r4, r4, r5
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	2600      	movs	r6, #0
 8005c18:	42a6      	cmp	r6, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	4d0b      	ldr	r5, [pc, #44]	; (8005c4c <__libc_init_array+0x40>)
 8005c1e:	4c0c      	ldr	r4, [pc, #48]	; (8005c50 <__libc_init_array+0x44>)
 8005c20:	f001 fa56 	bl	80070d0 <_init>
 8005c24:	1b64      	subs	r4, r4, r5
 8005c26:	10a4      	asrs	r4, r4, #2
 8005c28:	2600      	movs	r6, #0
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c34:	4798      	blx	r3
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3e:	4798      	blx	r3
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08008810 	.word	0x08008810
 8005c48:	08008810 	.word	0x08008810
 8005c4c:	08008810 	.word	0x08008810
 8005c50:	08008814 	.word	0x08008814

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <srand>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <srand+0x44>)
 8005c68:	681d      	ldr	r5, [r3, #0]
 8005c6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	b9b3      	cbnz	r3, 8005c9e <srand+0x3a>
 8005c70:	2018      	movs	r0, #24
 8005c72:	f000 f8e1 	bl	8005e38 <malloc>
 8005c76:	4602      	mov	r2, r0
 8005c78:	63a8      	str	r0, [r5, #56]	; 0x38
 8005c7a:	b920      	cbnz	r0, 8005c86 <srand+0x22>
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <srand+0x48>)
 8005c7e:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <srand+0x4c>)
 8005c80:	2142      	movs	r1, #66	; 0x42
 8005c82:	f000 f897 	bl	8005db4 <__assert_func>
 8005c86:	490b      	ldr	r1, [pc, #44]	; (8005cb4 <srand+0x50>)
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <srand+0x54>)
 8005c8a:	e9c0 1300 	strd	r1, r3, [r0]
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <srand+0x58>)
 8005c90:	6083      	str	r3, [r0, #8]
 8005c92:	230b      	movs	r3, #11
 8005c94:	8183      	strh	r3, [r0, #12]
 8005c96:	2100      	movs	r1, #0
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	611c      	str	r4, [r3, #16]
 8005ca4:	615a      	str	r2, [r3, #20]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	20000060 	.word	0x20000060
 8005cac:	080086c0 	.word	0x080086c0
 8005cb0:	080086d7 	.word	0x080086d7
 8005cb4:	abcd330e 	.word	0xabcd330e
 8005cb8:	e66d1234 	.word	0xe66d1234
 8005cbc:	0005deec 	.word	0x0005deec

08005cc0 <rand>:
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <rand+0x60>)
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	681c      	ldr	r4, [r3, #0]
 8005cc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cc8:	b9b3      	cbnz	r3, 8005cf8 <rand+0x38>
 8005cca:	2018      	movs	r0, #24
 8005ccc:	f000 f8b4 	bl	8005e38 <malloc>
 8005cd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cd2:	b928      	cbnz	r0, 8005ce0 <rand+0x20>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <rand+0x64>)
 8005cd8:	4813      	ldr	r0, [pc, #76]	; (8005d28 <rand+0x68>)
 8005cda:	214e      	movs	r1, #78	; 0x4e
 8005cdc:	f000 f86a 	bl	8005db4 <__assert_func>
 8005ce0:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <rand+0x6c>)
 8005ce2:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <rand+0x70>)
 8005ce4:	e9c0 2300 	strd	r2, r3, [r0]
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <rand+0x74>)
 8005cea:	6083      	str	r3, [r0, #8]
 8005cec:	230b      	movs	r3, #11
 8005cee:	8183      	strh	r3, [r0, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005cf8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005cfa:	480f      	ldr	r0, [pc, #60]	; (8005d38 <rand+0x78>)
 8005cfc:	690a      	ldr	r2, [r1, #16]
 8005cfe:	694b      	ldr	r3, [r1, #20]
 8005d00:	4c0e      	ldr	r4, [pc, #56]	; (8005d3c <rand+0x7c>)
 8005d02:	4350      	muls	r0, r2
 8005d04:	fb04 0003 	mla	r0, r4, r3, r0
 8005d08:	fba2 3404 	umull	r3, r4, r2, r4
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	4404      	add	r4, r0
 8005d10:	f144 0000 	adc.w	r0, r4, #0
 8005d14:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005d18:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000060 	.word	0x20000060
 8005d24:	080086c0 	.word	0x080086c0
 8005d28:	080086d7 	.word	0x080086d7
 8005d2c:	abcd330e 	.word	0xabcd330e
 8005d30:	e66d1234 	.word	0xe66d1234
 8005d34:	0005deec 	.word	0x0005deec
 8005d38:	5851f42d 	.word	0x5851f42d
 8005d3c:	4c957f2d 	.word	0x4c957f2d

08005d40 <siprintf>:
 8005d40:	b40e      	push	{r1, r2, r3}
 8005d42:	b500      	push	{lr}
 8005d44:	b09c      	sub	sp, #112	; 0x70
 8005d46:	ab1d      	add	r3, sp, #116	; 0x74
 8005d48:	9002      	str	r0, [sp, #8]
 8005d4a:	9006      	str	r0, [sp, #24]
 8005d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d50:	4809      	ldr	r0, [pc, #36]	; (8005d78 <siprintf+0x38>)
 8005d52:	9107      	str	r1, [sp, #28]
 8005d54:	9104      	str	r1, [sp, #16]
 8005d56:	4909      	ldr	r1, [pc, #36]	; (8005d7c <siprintf+0x3c>)
 8005d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d5c:	9105      	str	r1, [sp, #20]
 8005d5e:	6800      	ldr	r0, [r0, #0]
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	a902      	add	r1, sp, #8
 8005d64:	f000 f976 	bl	8006054 <_svfiprintf_r>
 8005d68:	9b02      	ldr	r3, [sp, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	b01c      	add	sp, #112	; 0x70
 8005d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d74:	b003      	add	sp, #12
 8005d76:	4770      	bx	lr
 8005d78:	20000060 	.word	0x20000060
 8005d7c:	ffff0208 	.word	0xffff0208

08005d80 <time>:
 8005d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d82:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <time+0x30>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	4669      	mov	r1, sp
 8005d88:	4604      	mov	r4, r0
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	f000 f842 	bl	8005e14 <_gettimeofday_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bfbe      	ittt	lt
 8005d94:	f04f 32ff 	movlt.w	r2, #4294967295
 8005d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d9c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005da4:	b10c      	cbz	r4, 8005daa <time+0x2a>
 8005da6:	e9c4 0100 	strd	r0, r1, [r4]
 8005daa:	b004      	add	sp, #16
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop
 8005db0:	20000060 	.word	0x20000060

08005db4 <__assert_func>:
 8005db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005db6:	4614      	mov	r4, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <__assert_func+0x2c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	68d8      	ldr	r0, [r3, #12]
 8005dc2:	b14c      	cbz	r4, 8005dd8 <__assert_func+0x24>
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <__assert_func+0x30>)
 8005dc6:	9100      	str	r1, [sp, #0]
 8005dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dcc:	4906      	ldr	r1, [pc, #24]	; (8005de8 <__assert_func+0x34>)
 8005dce:	462b      	mov	r3, r5
 8005dd0:	f000 f80e 	bl	8005df0 <fiprintf>
 8005dd4:	f000 fdfc 	bl	80069d0 <abort>
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <__assert_func+0x38>)
 8005dda:	461c      	mov	r4, r3
 8005ddc:	e7f3      	b.n	8005dc6 <__assert_func+0x12>
 8005dde:	bf00      	nop
 8005de0:	20000060 	.word	0x20000060
 8005de4:	08008736 	.word	0x08008736
 8005de8:	08008743 	.word	0x08008743
 8005dec:	08008771 	.word	0x08008771

08005df0 <fiprintf>:
 8005df0:	b40e      	push	{r1, r2, r3}
 8005df2:	b503      	push	{r0, r1, lr}
 8005df4:	4601      	mov	r1, r0
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	4805      	ldr	r0, [pc, #20]	; (8005e10 <fiprintf+0x20>)
 8005dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dfe:	6800      	ldr	r0, [r0, #0]
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	f000 fa51 	bl	80062a8 <_vfiprintf_r>
 8005e06:	b002      	add	sp, #8
 8005e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e0c:	b003      	add	sp, #12
 8005e0e:	4770      	bx	lr
 8005e10:	20000060 	.word	0x20000060

08005e14 <_gettimeofday_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d07      	ldr	r5, [pc, #28]	; (8005e34 <_gettimeofday_r+0x20>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f001 f94d 	bl	80070c0 <_gettimeofday>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d102      	bne.n	8005e30 <_gettimeofday_r+0x1c>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b103      	cbz	r3, 8005e30 <_gettimeofday_r+0x1c>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	20000350 	.word	0x20000350

08005e38 <malloc>:
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <malloc+0xc>)
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f000 b853 	b.w	8005ee8 <_malloc_r>
 8005e42:	bf00      	nop
 8005e44:	20000060 	.word	0x20000060

08005e48 <_free_r>:
 8005e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	d048      	beq.n	8005ee0 <_free_r+0x98>
 8005e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e52:	9001      	str	r0, [sp, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f1a1 0404 	sub.w	r4, r1, #4
 8005e5a:	bfb8      	it	lt
 8005e5c:	18e4      	addlt	r4, r4, r3
 8005e5e:	f001 f805 	bl	8006e6c <__malloc_lock>
 8005e62:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <_free_r+0x9c>)
 8005e64:	9801      	ldr	r0, [sp, #4]
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	4615      	mov	r5, r2
 8005e6a:	b933      	cbnz	r3, 8005e7a <_free_r+0x32>
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	6014      	str	r4, [r2, #0]
 8005e70:	b003      	add	sp, #12
 8005e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e76:	f000 bfff 	b.w	8006e78 <__malloc_unlock>
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	d90b      	bls.n	8005e96 <_free_r+0x4e>
 8005e7e:	6821      	ldr	r1, [r4, #0]
 8005e80:	1862      	adds	r2, r4, r1
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bf04      	itt	eq
 8005e86:	681a      	ldreq	r2, [r3, #0]
 8005e88:	685b      	ldreq	r3, [r3, #4]
 8005e8a:	6063      	str	r3, [r4, #4]
 8005e8c:	bf04      	itt	eq
 8005e8e:	1852      	addeq	r2, r2, r1
 8005e90:	6022      	streq	r2, [r4, #0]
 8005e92:	602c      	str	r4, [r5, #0]
 8005e94:	e7ec      	b.n	8005e70 <_free_r+0x28>
 8005e96:	461a      	mov	r2, r3
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	b10b      	cbz	r3, 8005ea0 <_free_r+0x58>
 8005e9c:	42a3      	cmp	r3, r4
 8005e9e:	d9fa      	bls.n	8005e96 <_free_r+0x4e>
 8005ea0:	6811      	ldr	r1, [r2, #0]
 8005ea2:	1855      	adds	r5, r2, r1
 8005ea4:	42a5      	cmp	r5, r4
 8005ea6:	d10b      	bne.n	8005ec0 <_free_r+0x78>
 8005ea8:	6824      	ldr	r4, [r4, #0]
 8005eaa:	4421      	add	r1, r4
 8005eac:	1854      	adds	r4, r2, r1
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	6011      	str	r1, [r2, #0]
 8005eb2:	d1dd      	bne.n	8005e70 <_free_r+0x28>
 8005eb4:	681c      	ldr	r4, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	6053      	str	r3, [r2, #4]
 8005eba:	4421      	add	r1, r4
 8005ebc:	6011      	str	r1, [r2, #0]
 8005ebe:	e7d7      	b.n	8005e70 <_free_r+0x28>
 8005ec0:	d902      	bls.n	8005ec8 <_free_r+0x80>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	6003      	str	r3, [r0, #0]
 8005ec6:	e7d3      	b.n	8005e70 <_free_r+0x28>
 8005ec8:	6825      	ldr	r5, [r4, #0]
 8005eca:	1961      	adds	r1, r4, r5
 8005ecc:	428b      	cmp	r3, r1
 8005ece:	bf04      	itt	eq
 8005ed0:	6819      	ldreq	r1, [r3, #0]
 8005ed2:	685b      	ldreq	r3, [r3, #4]
 8005ed4:	6063      	str	r3, [r4, #4]
 8005ed6:	bf04      	itt	eq
 8005ed8:	1949      	addeq	r1, r1, r5
 8005eda:	6021      	streq	r1, [r4, #0]
 8005edc:	6054      	str	r4, [r2, #4]
 8005ede:	e7c7      	b.n	8005e70 <_free_r+0x28>
 8005ee0:	b003      	add	sp, #12
 8005ee2:	bd30      	pop	{r4, r5, pc}
 8005ee4:	20000150 	.word	0x20000150

08005ee8 <_malloc_r>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	1ccd      	adds	r5, r1, #3
 8005eec:	f025 0503 	bic.w	r5, r5, #3
 8005ef0:	3508      	adds	r5, #8
 8005ef2:	2d0c      	cmp	r5, #12
 8005ef4:	bf38      	it	cc
 8005ef6:	250c      	movcc	r5, #12
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	4606      	mov	r6, r0
 8005efc:	db01      	blt.n	8005f02 <_malloc_r+0x1a>
 8005efe:	42a9      	cmp	r1, r5
 8005f00:	d903      	bls.n	8005f0a <_malloc_r+0x22>
 8005f02:	230c      	movs	r3, #12
 8005f04:	6033      	str	r3, [r6, #0]
 8005f06:	2000      	movs	r0, #0
 8005f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0a:	f000 ffaf 	bl	8006e6c <__malloc_lock>
 8005f0e:	4921      	ldr	r1, [pc, #132]	; (8005f94 <_malloc_r+0xac>)
 8005f10:	680a      	ldr	r2, [r1, #0]
 8005f12:	4614      	mov	r4, r2
 8005f14:	b99c      	cbnz	r4, 8005f3e <_malloc_r+0x56>
 8005f16:	4f20      	ldr	r7, [pc, #128]	; (8005f98 <_malloc_r+0xb0>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	b923      	cbnz	r3, 8005f26 <_malloc_r+0x3e>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f000 fc86 	bl	8006830 <_sbrk_r>
 8005f24:	6038      	str	r0, [r7, #0]
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f000 fc81 	bl	8006830 <_sbrk_r>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	d123      	bne.n	8005f7a <_malloc_r+0x92>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 ff9e 	bl	8006e78 <__malloc_unlock>
 8005f3c:	e7e3      	b.n	8005f06 <_malloc_r+0x1e>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	1b5b      	subs	r3, r3, r5
 8005f42:	d417      	bmi.n	8005f74 <_malloc_r+0x8c>
 8005f44:	2b0b      	cmp	r3, #11
 8005f46:	d903      	bls.n	8005f50 <_malloc_r+0x68>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	441c      	add	r4, r3
 8005f4c:	6025      	str	r5, [r4, #0]
 8005f4e:	e004      	b.n	8005f5a <_malloc_r+0x72>
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	42a2      	cmp	r2, r4
 8005f54:	bf0c      	ite	eq
 8005f56:	600b      	streq	r3, [r1, #0]
 8005f58:	6053      	strne	r3, [r2, #4]
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f000 ff8c 	bl	8006e78 <__malloc_unlock>
 8005f60:	f104 000b 	add.w	r0, r4, #11
 8005f64:	1d23      	adds	r3, r4, #4
 8005f66:	f020 0007 	bic.w	r0, r0, #7
 8005f6a:	1ac2      	subs	r2, r0, r3
 8005f6c:	d0cc      	beq.n	8005f08 <_malloc_r+0x20>
 8005f6e:	1a1b      	subs	r3, r3, r0
 8005f70:	50a3      	str	r3, [r4, r2]
 8005f72:	e7c9      	b.n	8005f08 <_malloc_r+0x20>
 8005f74:	4622      	mov	r2, r4
 8005f76:	6864      	ldr	r4, [r4, #4]
 8005f78:	e7cc      	b.n	8005f14 <_malloc_r+0x2c>
 8005f7a:	1cc4      	adds	r4, r0, #3
 8005f7c:	f024 0403 	bic.w	r4, r4, #3
 8005f80:	42a0      	cmp	r0, r4
 8005f82:	d0e3      	beq.n	8005f4c <_malloc_r+0x64>
 8005f84:	1a21      	subs	r1, r4, r0
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 fc52 	bl	8006830 <_sbrk_r>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d1dd      	bne.n	8005f4c <_malloc_r+0x64>
 8005f90:	e7cf      	b.n	8005f32 <_malloc_r+0x4a>
 8005f92:	bf00      	nop
 8005f94:	20000150 	.word	0x20000150
 8005f98:	20000154 	.word	0x20000154

08005f9c <__ssputs_r>:
 8005f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	688e      	ldr	r6, [r1, #8]
 8005fa2:	429e      	cmp	r6, r3
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	4690      	mov	r8, r2
 8005faa:	461f      	mov	r7, r3
 8005fac:	d838      	bhi.n	8006020 <__ssputs_r+0x84>
 8005fae:	898a      	ldrh	r2, [r1, #12]
 8005fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fb4:	d032      	beq.n	800601c <__ssputs_r+0x80>
 8005fb6:	6825      	ldr	r5, [r4, #0]
 8005fb8:	6909      	ldr	r1, [r1, #16]
 8005fba:	eba5 0901 	sub.w	r9, r5, r1
 8005fbe:	6965      	ldr	r5, [r4, #20]
 8005fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc8:	3301      	adds	r3, #1
 8005fca:	444b      	add	r3, r9
 8005fcc:	106d      	asrs	r5, r5, #1
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	bf38      	it	cc
 8005fd2:	461d      	movcc	r5, r3
 8005fd4:	0553      	lsls	r3, r2, #21
 8005fd6:	d531      	bpl.n	800603c <__ssputs_r+0xa0>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7ff ff85 	bl	8005ee8 <_malloc_r>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	b950      	cbnz	r0, 8005ff8 <__ssputs_r+0x5c>
 8005fe2:	230c      	movs	r3, #12
 8005fe4:	f8ca 3000 	str.w	r3, [sl]
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff8:	6921      	ldr	r1, [r4, #16]
 8005ffa:	464a      	mov	r2, r9
 8005ffc:	f000 ff0e 	bl	8006e1c <memcpy>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	6126      	str	r6, [r4, #16]
 800600e:	6165      	str	r5, [r4, #20]
 8006010:	444e      	add	r6, r9
 8006012:	eba5 0509 	sub.w	r5, r5, r9
 8006016:	6026      	str	r6, [r4, #0]
 8006018:	60a5      	str	r5, [r4, #8]
 800601a:	463e      	mov	r6, r7
 800601c:	42be      	cmp	r6, r7
 800601e:	d900      	bls.n	8006022 <__ssputs_r+0x86>
 8006020:	463e      	mov	r6, r7
 8006022:	4632      	mov	r2, r6
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	4641      	mov	r1, r8
 8006028:	f000 ff06 	bl	8006e38 <memmove>
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	1b9b      	subs	r3, r3, r6
 8006032:	4432      	add	r2, r6
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	2000      	movs	r0, #0
 800603a:	e7db      	b.n	8005ff4 <__ssputs_r+0x58>
 800603c:	462a      	mov	r2, r5
 800603e:	f000 ff21 	bl	8006e84 <_realloc_r>
 8006042:	4606      	mov	r6, r0
 8006044:	2800      	cmp	r0, #0
 8006046:	d1e1      	bne.n	800600c <__ssputs_r+0x70>
 8006048:	6921      	ldr	r1, [r4, #16]
 800604a:	4650      	mov	r0, sl
 800604c:	f7ff fefc 	bl	8005e48 <_free_r>
 8006050:	e7c7      	b.n	8005fe2 <__ssputs_r+0x46>
	...

08006054 <_svfiprintf_r>:
 8006054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	4698      	mov	r8, r3
 800605a:	898b      	ldrh	r3, [r1, #12]
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	b09d      	sub	sp, #116	; 0x74
 8006060:	4607      	mov	r7, r0
 8006062:	460d      	mov	r5, r1
 8006064:	4614      	mov	r4, r2
 8006066:	d50e      	bpl.n	8006086 <_svfiprintf_r+0x32>
 8006068:	690b      	ldr	r3, [r1, #16]
 800606a:	b963      	cbnz	r3, 8006086 <_svfiprintf_r+0x32>
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	f7ff ff3b 	bl	8005ee8 <_malloc_r>
 8006072:	6028      	str	r0, [r5, #0]
 8006074:	6128      	str	r0, [r5, #16]
 8006076:	b920      	cbnz	r0, 8006082 <_svfiprintf_r+0x2e>
 8006078:	230c      	movs	r3, #12
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e0d1      	b.n	8006226 <_svfiprintf_r+0x1d2>
 8006082:	2340      	movs	r3, #64	; 0x40
 8006084:	616b      	str	r3, [r5, #20]
 8006086:	2300      	movs	r3, #0
 8006088:	9309      	str	r3, [sp, #36]	; 0x24
 800608a:	2320      	movs	r3, #32
 800608c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006090:	f8cd 800c 	str.w	r8, [sp, #12]
 8006094:	2330      	movs	r3, #48	; 0x30
 8006096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006240 <_svfiprintf_r+0x1ec>
 800609a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800609e:	f04f 0901 	mov.w	r9, #1
 80060a2:	4623      	mov	r3, r4
 80060a4:	469a      	mov	sl, r3
 80060a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060aa:	b10a      	cbz	r2, 80060b0 <_svfiprintf_r+0x5c>
 80060ac:	2a25      	cmp	r2, #37	; 0x25
 80060ae:	d1f9      	bne.n	80060a4 <_svfiprintf_r+0x50>
 80060b0:	ebba 0b04 	subs.w	fp, sl, r4
 80060b4:	d00b      	beq.n	80060ce <_svfiprintf_r+0x7a>
 80060b6:	465b      	mov	r3, fp
 80060b8:	4622      	mov	r2, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	4638      	mov	r0, r7
 80060be:	f7ff ff6d 	bl	8005f9c <__ssputs_r>
 80060c2:	3001      	adds	r0, #1
 80060c4:	f000 80aa 	beq.w	800621c <_svfiprintf_r+0x1c8>
 80060c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ca:	445a      	add	r2, fp
 80060cc:	9209      	str	r2, [sp, #36]	; 0x24
 80060ce:	f89a 3000 	ldrb.w	r3, [sl]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80a2 	beq.w	800621c <_svfiprintf_r+0x1c8>
 80060d8:	2300      	movs	r3, #0
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e2:	f10a 0a01 	add.w	sl, sl, #1
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ee:	931a      	str	r3, [sp, #104]	; 0x68
 80060f0:	4654      	mov	r4, sl
 80060f2:	2205      	movs	r2, #5
 80060f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f8:	4851      	ldr	r0, [pc, #324]	; (8006240 <_svfiprintf_r+0x1ec>)
 80060fa:	f7fa f869 	bl	80001d0 <memchr>
 80060fe:	9a04      	ldr	r2, [sp, #16]
 8006100:	b9d8      	cbnz	r0, 800613a <_svfiprintf_r+0xe6>
 8006102:	06d0      	lsls	r0, r2, #27
 8006104:	bf44      	itt	mi
 8006106:	2320      	movmi	r3, #32
 8006108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800610c:	0711      	lsls	r1, r2, #28
 800610e:	bf44      	itt	mi
 8006110:	232b      	movmi	r3, #43	; 0x2b
 8006112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b2a      	cmp	r3, #42	; 0x2a
 800611c:	d015      	beq.n	800614a <_svfiprintf_r+0xf6>
 800611e:	9a07      	ldr	r2, [sp, #28]
 8006120:	4654      	mov	r4, sl
 8006122:	2000      	movs	r0, #0
 8006124:	f04f 0c0a 	mov.w	ip, #10
 8006128:	4621      	mov	r1, r4
 800612a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800612e:	3b30      	subs	r3, #48	; 0x30
 8006130:	2b09      	cmp	r3, #9
 8006132:	d94e      	bls.n	80061d2 <_svfiprintf_r+0x17e>
 8006134:	b1b0      	cbz	r0, 8006164 <_svfiprintf_r+0x110>
 8006136:	9207      	str	r2, [sp, #28]
 8006138:	e014      	b.n	8006164 <_svfiprintf_r+0x110>
 800613a:	eba0 0308 	sub.w	r3, r0, r8
 800613e:	fa09 f303 	lsl.w	r3, r9, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	46a2      	mov	sl, r4
 8006148:	e7d2      	b.n	80060f0 <_svfiprintf_r+0x9c>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	9103      	str	r1, [sp, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfbb      	ittet	lt
 8006156:	425b      	neglt	r3, r3
 8006158:	f042 0202 	orrlt.w	r2, r2, #2
 800615c:	9307      	strge	r3, [sp, #28]
 800615e:	9307      	strlt	r3, [sp, #28]
 8006160:	bfb8      	it	lt
 8006162:	9204      	strlt	r2, [sp, #16]
 8006164:	7823      	ldrb	r3, [r4, #0]
 8006166:	2b2e      	cmp	r3, #46	; 0x2e
 8006168:	d10c      	bne.n	8006184 <_svfiprintf_r+0x130>
 800616a:	7863      	ldrb	r3, [r4, #1]
 800616c:	2b2a      	cmp	r3, #42	; 0x2a
 800616e:	d135      	bne.n	80061dc <_svfiprintf_r+0x188>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	9203      	str	r2, [sp, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	bfb8      	it	lt
 800617c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006180:	3402      	adds	r4, #2
 8006182:	9305      	str	r3, [sp, #20]
 8006184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006250 <_svfiprintf_r+0x1fc>
 8006188:	7821      	ldrb	r1, [r4, #0]
 800618a:	2203      	movs	r2, #3
 800618c:	4650      	mov	r0, sl
 800618e:	f7fa f81f 	bl	80001d0 <memchr>
 8006192:	b140      	cbz	r0, 80061a6 <_svfiprintf_r+0x152>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	eba0 000a 	sub.w	r0, r0, sl
 800619a:	fa03 f000 	lsl.w	r0, r3, r0
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	4303      	orrs	r3, r0
 80061a2:	3401      	adds	r4, #1
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061aa:	4826      	ldr	r0, [pc, #152]	; (8006244 <_svfiprintf_r+0x1f0>)
 80061ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b0:	2206      	movs	r2, #6
 80061b2:	f7fa f80d 	bl	80001d0 <memchr>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d038      	beq.n	800622c <_svfiprintf_r+0x1d8>
 80061ba:	4b23      	ldr	r3, [pc, #140]	; (8006248 <_svfiprintf_r+0x1f4>)
 80061bc:	bb1b      	cbnz	r3, 8006206 <_svfiprintf_r+0x1b2>
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	3307      	adds	r3, #7
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	3308      	adds	r3, #8
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061cc:	4433      	add	r3, r6
 80061ce:	9309      	str	r3, [sp, #36]	; 0x24
 80061d0:	e767      	b.n	80060a2 <_svfiprintf_r+0x4e>
 80061d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d6:	460c      	mov	r4, r1
 80061d8:	2001      	movs	r0, #1
 80061da:	e7a5      	b.n	8006128 <_svfiprintf_r+0xd4>
 80061dc:	2300      	movs	r3, #0
 80061de:	3401      	adds	r4, #1
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	4619      	mov	r1, r3
 80061e4:	f04f 0c0a 	mov.w	ip, #10
 80061e8:	4620      	mov	r0, r4
 80061ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ee:	3a30      	subs	r2, #48	; 0x30
 80061f0:	2a09      	cmp	r2, #9
 80061f2:	d903      	bls.n	80061fc <_svfiprintf_r+0x1a8>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0c5      	beq.n	8006184 <_svfiprintf_r+0x130>
 80061f8:	9105      	str	r1, [sp, #20]
 80061fa:	e7c3      	b.n	8006184 <_svfiprintf_r+0x130>
 80061fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006200:	4604      	mov	r4, r0
 8006202:	2301      	movs	r3, #1
 8006204:	e7f0      	b.n	80061e8 <_svfiprintf_r+0x194>
 8006206:	ab03      	add	r3, sp, #12
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	462a      	mov	r2, r5
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <_svfiprintf_r+0x1f8>)
 800620e:	a904      	add	r1, sp, #16
 8006210:	4638      	mov	r0, r7
 8006212:	f3af 8000 	nop.w
 8006216:	1c42      	adds	r2, r0, #1
 8006218:	4606      	mov	r6, r0
 800621a:	d1d6      	bne.n	80061ca <_svfiprintf_r+0x176>
 800621c:	89ab      	ldrh	r3, [r5, #12]
 800621e:	065b      	lsls	r3, r3, #25
 8006220:	f53f af2c 	bmi.w	800607c <_svfiprintf_r+0x28>
 8006224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006226:	b01d      	add	sp, #116	; 0x74
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622c:	ab03      	add	r3, sp, #12
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	462a      	mov	r2, r5
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <_svfiprintf_r+0x1f8>)
 8006234:	a904      	add	r1, sp, #16
 8006236:	4638      	mov	r0, r7
 8006238:	f000 f9d4 	bl	80065e4 <_printf_i>
 800623c:	e7eb      	b.n	8006216 <_svfiprintf_r+0x1c2>
 800623e:	bf00      	nop
 8006240:	08008772 	.word	0x08008772
 8006244:	0800877c 	.word	0x0800877c
 8006248:	00000000 	.word	0x00000000
 800624c:	08005f9d 	.word	0x08005f9d
 8006250:	08008778 	.word	0x08008778

08006254 <__sfputc_r>:
 8006254:	6893      	ldr	r3, [r2, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	b410      	push	{r4}
 800625c:	6093      	str	r3, [r2, #8]
 800625e:	da08      	bge.n	8006272 <__sfputc_r+0x1e>
 8006260:	6994      	ldr	r4, [r2, #24]
 8006262:	42a3      	cmp	r3, r4
 8006264:	db01      	blt.n	800626a <__sfputc_r+0x16>
 8006266:	290a      	cmp	r1, #10
 8006268:	d103      	bne.n	8006272 <__sfputc_r+0x1e>
 800626a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626e:	f000 baef 	b.w	8006850 <__swbuf_r>
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	1c58      	adds	r0, r3, #1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	7019      	strb	r1, [r3, #0]
 800627a:	4608      	mov	r0, r1
 800627c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006280:	4770      	bx	lr

08006282 <__sfputs_r>:
 8006282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	4614      	mov	r4, r2
 800628a:	18d5      	adds	r5, r2, r3
 800628c:	42ac      	cmp	r4, r5
 800628e:	d101      	bne.n	8006294 <__sfputs_r+0x12>
 8006290:	2000      	movs	r0, #0
 8006292:	e007      	b.n	80062a4 <__sfputs_r+0x22>
 8006294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006298:	463a      	mov	r2, r7
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ffda 	bl	8006254 <__sfputc_r>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d1f3      	bne.n	800628c <__sfputs_r+0xa>
 80062a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a8 <_vfiprintf_r>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	460d      	mov	r5, r1
 80062ae:	b09d      	sub	sp, #116	; 0x74
 80062b0:	4614      	mov	r4, r2
 80062b2:	4698      	mov	r8, r3
 80062b4:	4606      	mov	r6, r0
 80062b6:	b118      	cbz	r0, 80062c0 <_vfiprintf_r+0x18>
 80062b8:	6983      	ldr	r3, [r0, #24]
 80062ba:	b90b      	cbnz	r3, 80062c0 <_vfiprintf_r+0x18>
 80062bc:	f000 fcaa 	bl	8006c14 <__sinit>
 80062c0:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <_vfiprintf_r+0x240>)
 80062c2:	429d      	cmp	r5, r3
 80062c4:	d11b      	bne.n	80062fe <_vfiprintf_r+0x56>
 80062c6:	6875      	ldr	r5, [r6, #4]
 80062c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062ca:	07d9      	lsls	r1, r3, #31
 80062cc:	d405      	bmi.n	80062da <_vfiprintf_r+0x32>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	059a      	lsls	r2, r3, #22
 80062d2:	d402      	bmi.n	80062da <_vfiprintf_r+0x32>
 80062d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062d6:	f000 fd3b 	bl	8006d50 <__retarget_lock_acquire_recursive>
 80062da:	89ab      	ldrh	r3, [r5, #12]
 80062dc:	071b      	lsls	r3, r3, #28
 80062de:	d501      	bpl.n	80062e4 <_vfiprintf_r+0x3c>
 80062e0:	692b      	ldr	r3, [r5, #16]
 80062e2:	b9eb      	cbnz	r3, 8006320 <_vfiprintf_r+0x78>
 80062e4:	4629      	mov	r1, r5
 80062e6:	4630      	mov	r0, r6
 80062e8:	f000 fb04 	bl	80068f4 <__swsetup_r>
 80062ec:	b1c0      	cbz	r0, 8006320 <_vfiprintf_r+0x78>
 80062ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f0:	07dc      	lsls	r4, r3, #31
 80062f2:	d50e      	bpl.n	8006312 <_vfiprintf_r+0x6a>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	b01d      	add	sp, #116	; 0x74
 80062fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fe:	4b7b      	ldr	r3, [pc, #492]	; (80064ec <_vfiprintf_r+0x244>)
 8006300:	429d      	cmp	r5, r3
 8006302:	d101      	bne.n	8006308 <_vfiprintf_r+0x60>
 8006304:	68b5      	ldr	r5, [r6, #8]
 8006306:	e7df      	b.n	80062c8 <_vfiprintf_r+0x20>
 8006308:	4b79      	ldr	r3, [pc, #484]	; (80064f0 <_vfiprintf_r+0x248>)
 800630a:	429d      	cmp	r5, r3
 800630c:	bf08      	it	eq
 800630e:	68f5      	ldreq	r5, [r6, #12]
 8006310:	e7da      	b.n	80062c8 <_vfiprintf_r+0x20>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	0598      	lsls	r0, r3, #22
 8006316:	d4ed      	bmi.n	80062f4 <_vfiprintf_r+0x4c>
 8006318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800631a:	f000 fd1a 	bl	8006d52 <__retarget_lock_release_recursive>
 800631e:	e7e9      	b.n	80062f4 <_vfiprintf_r+0x4c>
 8006320:	2300      	movs	r3, #0
 8006322:	9309      	str	r3, [sp, #36]	; 0x24
 8006324:	2320      	movs	r3, #32
 8006326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800632a:	f8cd 800c 	str.w	r8, [sp, #12]
 800632e:	2330      	movs	r3, #48	; 0x30
 8006330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064f4 <_vfiprintf_r+0x24c>
 8006334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006338:	f04f 0901 	mov.w	r9, #1
 800633c:	4623      	mov	r3, r4
 800633e:	469a      	mov	sl, r3
 8006340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006344:	b10a      	cbz	r2, 800634a <_vfiprintf_r+0xa2>
 8006346:	2a25      	cmp	r2, #37	; 0x25
 8006348:	d1f9      	bne.n	800633e <_vfiprintf_r+0x96>
 800634a:	ebba 0b04 	subs.w	fp, sl, r4
 800634e:	d00b      	beq.n	8006368 <_vfiprintf_r+0xc0>
 8006350:	465b      	mov	r3, fp
 8006352:	4622      	mov	r2, r4
 8006354:	4629      	mov	r1, r5
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ff93 	bl	8006282 <__sfputs_r>
 800635c:	3001      	adds	r0, #1
 800635e:	f000 80aa 	beq.w	80064b6 <_vfiprintf_r+0x20e>
 8006362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006364:	445a      	add	r2, fp
 8006366:	9209      	str	r2, [sp, #36]	; 0x24
 8006368:	f89a 3000 	ldrb.w	r3, [sl]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a2 	beq.w	80064b6 <_vfiprintf_r+0x20e>
 8006372:	2300      	movs	r3, #0
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800637c:	f10a 0a01 	add.w	sl, sl, #1
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006388:	931a      	str	r3, [sp, #104]	; 0x68
 800638a:	4654      	mov	r4, sl
 800638c:	2205      	movs	r2, #5
 800638e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006392:	4858      	ldr	r0, [pc, #352]	; (80064f4 <_vfiprintf_r+0x24c>)
 8006394:	f7f9 ff1c 	bl	80001d0 <memchr>
 8006398:	9a04      	ldr	r2, [sp, #16]
 800639a:	b9d8      	cbnz	r0, 80063d4 <_vfiprintf_r+0x12c>
 800639c:	06d1      	lsls	r1, r2, #27
 800639e:	bf44      	itt	mi
 80063a0:	2320      	movmi	r3, #32
 80063a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a6:	0713      	lsls	r3, r2, #28
 80063a8:	bf44      	itt	mi
 80063aa:	232b      	movmi	r3, #43	; 0x2b
 80063ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b0:	f89a 3000 	ldrb.w	r3, [sl]
 80063b4:	2b2a      	cmp	r3, #42	; 0x2a
 80063b6:	d015      	beq.n	80063e4 <_vfiprintf_r+0x13c>
 80063b8:	9a07      	ldr	r2, [sp, #28]
 80063ba:	4654      	mov	r4, sl
 80063bc:	2000      	movs	r0, #0
 80063be:	f04f 0c0a 	mov.w	ip, #10
 80063c2:	4621      	mov	r1, r4
 80063c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c8:	3b30      	subs	r3, #48	; 0x30
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	d94e      	bls.n	800646c <_vfiprintf_r+0x1c4>
 80063ce:	b1b0      	cbz	r0, 80063fe <_vfiprintf_r+0x156>
 80063d0:	9207      	str	r2, [sp, #28]
 80063d2:	e014      	b.n	80063fe <_vfiprintf_r+0x156>
 80063d4:	eba0 0308 	sub.w	r3, r0, r8
 80063d8:	fa09 f303 	lsl.w	r3, r9, r3
 80063dc:	4313      	orrs	r3, r2
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	46a2      	mov	sl, r4
 80063e2:	e7d2      	b.n	800638a <_vfiprintf_r+0xe2>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1d19      	adds	r1, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	9103      	str	r1, [sp, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfbb      	ittet	lt
 80063f0:	425b      	neglt	r3, r3
 80063f2:	f042 0202 	orrlt.w	r2, r2, #2
 80063f6:	9307      	strge	r3, [sp, #28]
 80063f8:	9307      	strlt	r3, [sp, #28]
 80063fa:	bfb8      	it	lt
 80063fc:	9204      	strlt	r2, [sp, #16]
 80063fe:	7823      	ldrb	r3, [r4, #0]
 8006400:	2b2e      	cmp	r3, #46	; 0x2e
 8006402:	d10c      	bne.n	800641e <_vfiprintf_r+0x176>
 8006404:	7863      	ldrb	r3, [r4, #1]
 8006406:	2b2a      	cmp	r3, #42	; 0x2a
 8006408:	d135      	bne.n	8006476 <_vfiprintf_r+0x1ce>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	9203      	str	r2, [sp, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfb8      	it	lt
 8006416:	f04f 33ff 	movlt.w	r3, #4294967295
 800641a:	3402      	adds	r4, #2
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006504 <_vfiprintf_r+0x25c>
 8006422:	7821      	ldrb	r1, [r4, #0]
 8006424:	2203      	movs	r2, #3
 8006426:	4650      	mov	r0, sl
 8006428:	f7f9 fed2 	bl	80001d0 <memchr>
 800642c:	b140      	cbz	r0, 8006440 <_vfiprintf_r+0x198>
 800642e:	2340      	movs	r3, #64	; 0x40
 8006430:	eba0 000a 	sub.w	r0, r0, sl
 8006434:	fa03 f000 	lsl.w	r0, r3, r0
 8006438:	9b04      	ldr	r3, [sp, #16]
 800643a:	4303      	orrs	r3, r0
 800643c:	3401      	adds	r4, #1
 800643e:	9304      	str	r3, [sp, #16]
 8006440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006444:	482c      	ldr	r0, [pc, #176]	; (80064f8 <_vfiprintf_r+0x250>)
 8006446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800644a:	2206      	movs	r2, #6
 800644c:	f7f9 fec0 	bl	80001d0 <memchr>
 8006450:	2800      	cmp	r0, #0
 8006452:	d03f      	beq.n	80064d4 <_vfiprintf_r+0x22c>
 8006454:	4b29      	ldr	r3, [pc, #164]	; (80064fc <_vfiprintf_r+0x254>)
 8006456:	bb1b      	cbnz	r3, 80064a0 <_vfiprintf_r+0x1f8>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	3307      	adds	r3, #7
 800645c:	f023 0307 	bic.w	r3, r3, #7
 8006460:	3308      	adds	r3, #8
 8006462:	9303      	str	r3, [sp, #12]
 8006464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006466:	443b      	add	r3, r7
 8006468:	9309      	str	r3, [sp, #36]	; 0x24
 800646a:	e767      	b.n	800633c <_vfiprintf_r+0x94>
 800646c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006470:	460c      	mov	r4, r1
 8006472:	2001      	movs	r0, #1
 8006474:	e7a5      	b.n	80063c2 <_vfiprintf_r+0x11a>
 8006476:	2300      	movs	r3, #0
 8006478:	3401      	adds	r4, #1
 800647a:	9305      	str	r3, [sp, #20]
 800647c:	4619      	mov	r1, r3
 800647e:	f04f 0c0a 	mov.w	ip, #10
 8006482:	4620      	mov	r0, r4
 8006484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006488:	3a30      	subs	r2, #48	; 0x30
 800648a:	2a09      	cmp	r2, #9
 800648c:	d903      	bls.n	8006496 <_vfiprintf_r+0x1ee>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0c5      	beq.n	800641e <_vfiprintf_r+0x176>
 8006492:	9105      	str	r1, [sp, #20]
 8006494:	e7c3      	b.n	800641e <_vfiprintf_r+0x176>
 8006496:	fb0c 2101 	mla	r1, ip, r1, r2
 800649a:	4604      	mov	r4, r0
 800649c:	2301      	movs	r3, #1
 800649e:	e7f0      	b.n	8006482 <_vfiprintf_r+0x1da>
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4b16      	ldr	r3, [pc, #88]	; (8006500 <_vfiprintf_r+0x258>)
 80064a8:	a904      	add	r1, sp, #16
 80064aa:	4630      	mov	r0, r6
 80064ac:	f3af 8000 	nop.w
 80064b0:	4607      	mov	r7, r0
 80064b2:	1c78      	adds	r0, r7, #1
 80064b4:	d1d6      	bne.n	8006464 <_vfiprintf_r+0x1bc>
 80064b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b8:	07d9      	lsls	r1, r3, #31
 80064ba:	d405      	bmi.n	80064c8 <_vfiprintf_r+0x220>
 80064bc:	89ab      	ldrh	r3, [r5, #12]
 80064be:	059a      	lsls	r2, r3, #22
 80064c0:	d402      	bmi.n	80064c8 <_vfiprintf_r+0x220>
 80064c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064c4:	f000 fc45 	bl	8006d52 <__retarget_lock_release_recursive>
 80064c8:	89ab      	ldrh	r3, [r5, #12]
 80064ca:	065b      	lsls	r3, r3, #25
 80064cc:	f53f af12 	bmi.w	80062f4 <_vfiprintf_r+0x4c>
 80064d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064d2:	e711      	b.n	80062f8 <_vfiprintf_r+0x50>
 80064d4:	ab03      	add	r3, sp, #12
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	462a      	mov	r2, r5
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <_vfiprintf_r+0x258>)
 80064dc:	a904      	add	r1, sp, #16
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 f880 	bl	80065e4 <_printf_i>
 80064e4:	e7e4      	b.n	80064b0 <_vfiprintf_r+0x208>
 80064e6:	bf00      	nop
 80064e8:	080087c8 	.word	0x080087c8
 80064ec:	080087e8 	.word	0x080087e8
 80064f0:	080087a8 	.word	0x080087a8
 80064f4:	08008772 	.word	0x08008772
 80064f8:	0800877c 	.word	0x0800877c
 80064fc:	00000000 	.word	0x00000000
 8006500:	08006283 	.word	0x08006283
 8006504:	08008778 	.word	0x08008778

08006508 <_printf_common>:
 8006508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	4616      	mov	r6, r2
 800650e:	4699      	mov	r9, r3
 8006510:	688a      	ldr	r2, [r1, #8]
 8006512:	690b      	ldr	r3, [r1, #16]
 8006514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006518:	4293      	cmp	r3, r2
 800651a:	bfb8      	it	lt
 800651c:	4613      	movlt	r3, r2
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006524:	4607      	mov	r7, r0
 8006526:	460c      	mov	r4, r1
 8006528:	b10a      	cbz	r2, 800652e <_printf_common+0x26>
 800652a:	3301      	adds	r3, #1
 800652c:	6033      	str	r3, [r6, #0]
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	0699      	lsls	r1, r3, #26
 8006532:	bf42      	ittt	mi
 8006534:	6833      	ldrmi	r3, [r6, #0]
 8006536:	3302      	addmi	r3, #2
 8006538:	6033      	strmi	r3, [r6, #0]
 800653a:	6825      	ldr	r5, [r4, #0]
 800653c:	f015 0506 	ands.w	r5, r5, #6
 8006540:	d106      	bne.n	8006550 <_printf_common+0x48>
 8006542:	f104 0a19 	add.w	sl, r4, #25
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	6832      	ldr	r2, [r6, #0]
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	42ab      	cmp	r3, r5
 800654e:	dc26      	bgt.n	800659e <_printf_common+0x96>
 8006550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006554:	1e13      	subs	r3, r2, #0
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	bf18      	it	ne
 800655a:	2301      	movne	r3, #1
 800655c:	0692      	lsls	r2, r2, #26
 800655e:	d42b      	bmi.n	80065b8 <_printf_common+0xb0>
 8006560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006564:	4649      	mov	r1, r9
 8006566:	4638      	mov	r0, r7
 8006568:	47c0      	blx	r8
 800656a:	3001      	adds	r0, #1
 800656c:	d01e      	beq.n	80065ac <_printf_common+0xa4>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	68e5      	ldr	r5, [r4, #12]
 8006572:	6832      	ldr	r2, [r6, #0]
 8006574:	f003 0306 	and.w	r3, r3, #6
 8006578:	2b04      	cmp	r3, #4
 800657a:	bf08      	it	eq
 800657c:	1aad      	subeq	r5, r5, r2
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	bf0c      	ite	eq
 8006584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006588:	2500      	movne	r5, #0
 800658a:	4293      	cmp	r3, r2
 800658c:	bfc4      	itt	gt
 800658e:	1a9b      	subgt	r3, r3, r2
 8006590:	18ed      	addgt	r5, r5, r3
 8006592:	2600      	movs	r6, #0
 8006594:	341a      	adds	r4, #26
 8006596:	42b5      	cmp	r5, r6
 8006598:	d11a      	bne.n	80065d0 <_printf_common+0xc8>
 800659a:	2000      	movs	r0, #0
 800659c:	e008      	b.n	80065b0 <_printf_common+0xa8>
 800659e:	2301      	movs	r3, #1
 80065a0:	4652      	mov	r2, sl
 80065a2:	4649      	mov	r1, r9
 80065a4:	4638      	mov	r0, r7
 80065a6:	47c0      	blx	r8
 80065a8:	3001      	adds	r0, #1
 80065aa:	d103      	bne.n	80065b4 <_printf_common+0xac>
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b4:	3501      	adds	r5, #1
 80065b6:	e7c6      	b.n	8006546 <_printf_common+0x3e>
 80065b8:	18e1      	adds	r1, r4, r3
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	2030      	movs	r0, #48	; 0x30
 80065be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065c2:	4422      	add	r2, r4
 80065c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065cc:	3302      	adds	r3, #2
 80065ce:	e7c7      	b.n	8006560 <_printf_common+0x58>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4622      	mov	r2, r4
 80065d4:	4649      	mov	r1, r9
 80065d6:	4638      	mov	r0, r7
 80065d8:	47c0      	blx	r8
 80065da:	3001      	adds	r0, #1
 80065dc:	d0e6      	beq.n	80065ac <_printf_common+0xa4>
 80065de:	3601      	adds	r6, #1
 80065e0:	e7d9      	b.n	8006596 <_printf_common+0x8e>
	...

080065e4 <_printf_i>:
 80065e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	4691      	mov	r9, r2
 80065ec:	7e27      	ldrb	r7, [r4, #24]
 80065ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065f0:	2f78      	cmp	r7, #120	; 0x78
 80065f2:	4680      	mov	r8, r0
 80065f4:	469a      	mov	sl, r3
 80065f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065fa:	d807      	bhi.n	800660c <_printf_i+0x28>
 80065fc:	2f62      	cmp	r7, #98	; 0x62
 80065fe:	d80a      	bhi.n	8006616 <_printf_i+0x32>
 8006600:	2f00      	cmp	r7, #0
 8006602:	f000 80d8 	beq.w	80067b6 <_printf_i+0x1d2>
 8006606:	2f58      	cmp	r7, #88	; 0x58
 8006608:	f000 80a3 	beq.w	8006752 <_printf_i+0x16e>
 800660c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006614:	e03a      	b.n	800668c <_printf_i+0xa8>
 8006616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800661a:	2b15      	cmp	r3, #21
 800661c:	d8f6      	bhi.n	800660c <_printf_i+0x28>
 800661e:	a001      	add	r0, pc, #4	; (adr r0, 8006624 <_printf_i+0x40>)
 8006620:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006624:	0800667d 	.word	0x0800667d
 8006628:	08006691 	.word	0x08006691
 800662c:	0800660d 	.word	0x0800660d
 8006630:	0800660d 	.word	0x0800660d
 8006634:	0800660d 	.word	0x0800660d
 8006638:	0800660d 	.word	0x0800660d
 800663c:	08006691 	.word	0x08006691
 8006640:	0800660d 	.word	0x0800660d
 8006644:	0800660d 	.word	0x0800660d
 8006648:	0800660d 	.word	0x0800660d
 800664c:	0800660d 	.word	0x0800660d
 8006650:	0800679d 	.word	0x0800679d
 8006654:	080066c1 	.word	0x080066c1
 8006658:	0800677f 	.word	0x0800677f
 800665c:	0800660d 	.word	0x0800660d
 8006660:	0800660d 	.word	0x0800660d
 8006664:	080067bf 	.word	0x080067bf
 8006668:	0800660d 	.word	0x0800660d
 800666c:	080066c1 	.word	0x080066c1
 8006670:	0800660d 	.word	0x0800660d
 8006674:	0800660d 	.word	0x0800660d
 8006678:	08006787 	.word	0x08006787
 800667c:	680b      	ldr	r3, [r1, #0]
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	600a      	str	r2, [r1, #0]
 8006684:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800668c:	2301      	movs	r3, #1
 800668e:	e0a3      	b.n	80067d8 <_printf_i+0x1f4>
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	6808      	ldr	r0, [r1, #0]
 8006694:	062e      	lsls	r6, r5, #24
 8006696:	f100 0304 	add.w	r3, r0, #4
 800669a:	d50a      	bpl.n	80066b2 <_printf_i+0xce>
 800669c:	6805      	ldr	r5, [r0, #0]
 800669e:	600b      	str	r3, [r1, #0]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	da03      	bge.n	80066ac <_printf_i+0xc8>
 80066a4:	232d      	movs	r3, #45	; 0x2d
 80066a6:	426d      	negs	r5, r5
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ac:	485e      	ldr	r0, [pc, #376]	; (8006828 <_printf_i+0x244>)
 80066ae:	230a      	movs	r3, #10
 80066b0:	e019      	b.n	80066e6 <_printf_i+0x102>
 80066b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066b6:	6805      	ldr	r5, [r0, #0]
 80066b8:	600b      	str	r3, [r1, #0]
 80066ba:	bf18      	it	ne
 80066bc:	b22d      	sxthne	r5, r5
 80066be:	e7ef      	b.n	80066a0 <_printf_i+0xbc>
 80066c0:	680b      	ldr	r3, [r1, #0]
 80066c2:	6825      	ldr	r5, [r4, #0]
 80066c4:	1d18      	adds	r0, r3, #4
 80066c6:	6008      	str	r0, [r1, #0]
 80066c8:	0628      	lsls	r0, r5, #24
 80066ca:	d501      	bpl.n	80066d0 <_printf_i+0xec>
 80066cc:	681d      	ldr	r5, [r3, #0]
 80066ce:	e002      	b.n	80066d6 <_printf_i+0xf2>
 80066d0:	0669      	lsls	r1, r5, #25
 80066d2:	d5fb      	bpl.n	80066cc <_printf_i+0xe8>
 80066d4:	881d      	ldrh	r5, [r3, #0]
 80066d6:	4854      	ldr	r0, [pc, #336]	; (8006828 <_printf_i+0x244>)
 80066d8:	2f6f      	cmp	r7, #111	; 0x6f
 80066da:	bf0c      	ite	eq
 80066dc:	2308      	moveq	r3, #8
 80066de:	230a      	movne	r3, #10
 80066e0:	2100      	movs	r1, #0
 80066e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066e6:	6866      	ldr	r6, [r4, #4]
 80066e8:	60a6      	str	r6, [r4, #8]
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	bfa2      	ittt	ge
 80066ee:	6821      	ldrge	r1, [r4, #0]
 80066f0:	f021 0104 	bicge.w	r1, r1, #4
 80066f4:	6021      	strge	r1, [r4, #0]
 80066f6:	b90d      	cbnz	r5, 80066fc <_printf_i+0x118>
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	d04d      	beq.n	8006798 <_printf_i+0x1b4>
 80066fc:	4616      	mov	r6, r2
 80066fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006702:	fb03 5711 	mls	r7, r3, r1, r5
 8006706:	5dc7      	ldrb	r7, [r0, r7]
 8006708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800670c:	462f      	mov	r7, r5
 800670e:	42bb      	cmp	r3, r7
 8006710:	460d      	mov	r5, r1
 8006712:	d9f4      	bls.n	80066fe <_printf_i+0x11a>
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10b      	bne.n	8006730 <_printf_i+0x14c>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07df      	lsls	r7, r3, #31
 800671c:	d508      	bpl.n	8006730 <_printf_i+0x14c>
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6861      	ldr	r1, [r4, #4]
 8006722:	4299      	cmp	r1, r3
 8006724:	bfde      	ittt	le
 8006726:	2330      	movle	r3, #48	; 0x30
 8006728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800672c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006730:	1b92      	subs	r2, r2, r6
 8006732:	6122      	str	r2, [r4, #16]
 8006734:	f8cd a000 	str.w	sl, [sp]
 8006738:	464b      	mov	r3, r9
 800673a:	aa03      	add	r2, sp, #12
 800673c:	4621      	mov	r1, r4
 800673e:	4640      	mov	r0, r8
 8006740:	f7ff fee2 	bl	8006508 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	d14c      	bne.n	80067e2 <_printf_i+0x1fe>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	b004      	add	sp, #16
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	4835      	ldr	r0, [pc, #212]	; (8006828 <_printf_i+0x244>)
 8006754:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	680e      	ldr	r6, [r1, #0]
 800675c:	061f      	lsls	r7, r3, #24
 800675e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006762:	600e      	str	r6, [r1, #0]
 8006764:	d514      	bpl.n	8006790 <_printf_i+0x1ac>
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	bf44      	itt	mi
 800676a:	f043 0320 	orrmi.w	r3, r3, #32
 800676e:	6023      	strmi	r3, [r4, #0]
 8006770:	b91d      	cbnz	r5, 800677a <_printf_i+0x196>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f023 0320 	bic.w	r3, r3, #32
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	2310      	movs	r3, #16
 800677c:	e7b0      	b.n	80066e0 <_printf_i+0xfc>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f043 0320 	orr.w	r3, r3, #32
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	2378      	movs	r3, #120	; 0x78
 8006788:	4828      	ldr	r0, [pc, #160]	; (800682c <_printf_i+0x248>)
 800678a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678e:	e7e3      	b.n	8006758 <_printf_i+0x174>
 8006790:	065e      	lsls	r6, r3, #25
 8006792:	bf48      	it	mi
 8006794:	b2ad      	uxthmi	r5, r5
 8006796:	e7e6      	b.n	8006766 <_printf_i+0x182>
 8006798:	4616      	mov	r6, r2
 800679a:	e7bb      	b.n	8006714 <_printf_i+0x130>
 800679c:	680b      	ldr	r3, [r1, #0]
 800679e:	6826      	ldr	r6, [r4, #0]
 80067a0:	6960      	ldr	r0, [r4, #20]
 80067a2:	1d1d      	adds	r5, r3, #4
 80067a4:	600d      	str	r5, [r1, #0]
 80067a6:	0635      	lsls	r5, r6, #24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	d501      	bpl.n	80067b0 <_printf_i+0x1cc>
 80067ac:	6018      	str	r0, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <_printf_i+0x1d2>
 80067b0:	0671      	lsls	r1, r6, #25
 80067b2:	d5fb      	bpl.n	80067ac <_printf_i+0x1c8>
 80067b4:	8018      	strh	r0, [r3, #0]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	4616      	mov	r6, r2
 80067bc:	e7ba      	b.n	8006734 <_printf_i+0x150>
 80067be:	680b      	ldr	r3, [r1, #0]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	600a      	str	r2, [r1, #0]
 80067c4:	681e      	ldr	r6, [r3, #0]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4630      	mov	r0, r6
 80067cc:	f7f9 fd00 	bl	80001d0 <memchr>
 80067d0:	b108      	cbz	r0, 80067d6 <_printf_i+0x1f2>
 80067d2:	1b80      	subs	r0, r0, r6
 80067d4:	6060      	str	r0, [r4, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	2300      	movs	r3, #0
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	e7a8      	b.n	8006734 <_printf_i+0x150>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	4632      	mov	r2, r6
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	47d0      	blx	sl
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0ab      	beq.n	8006748 <_printf_i+0x164>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d413      	bmi.n	800681e <_printf_i+0x23a>
 80067f6:	68e0      	ldr	r0, [r4, #12]
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	4298      	cmp	r0, r3
 80067fc:	bfb8      	it	lt
 80067fe:	4618      	movlt	r0, r3
 8006800:	e7a4      	b.n	800674c <_printf_i+0x168>
 8006802:	2301      	movs	r3, #1
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d09b      	beq.n	8006748 <_printf_i+0x164>
 8006810:	3501      	adds	r5, #1
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	1a5b      	subs	r3, r3, r1
 8006818:	42ab      	cmp	r3, r5
 800681a:	dcf2      	bgt.n	8006802 <_printf_i+0x21e>
 800681c:	e7eb      	b.n	80067f6 <_printf_i+0x212>
 800681e:	2500      	movs	r5, #0
 8006820:	f104 0619 	add.w	r6, r4, #25
 8006824:	e7f5      	b.n	8006812 <_printf_i+0x22e>
 8006826:	bf00      	nop
 8006828:	08008783 	.word	0x08008783
 800682c:	08008794 	.word	0x08008794

08006830 <_sbrk_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d06      	ldr	r5, [pc, #24]	; (800684c <_sbrk_r+0x1c>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	f7fb fe08 	bl	8002450 <_sbrk>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_sbrk_r+0x1a>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_sbrk_r+0x1a>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	20000350 	.word	0x20000350

08006850 <__swbuf_r>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	460e      	mov	r6, r1
 8006854:	4614      	mov	r4, r2
 8006856:	4605      	mov	r5, r0
 8006858:	b118      	cbz	r0, 8006862 <__swbuf_r+0x12>
 800685a:	6983      	ldr	r3, [r0, #24]
 800685c:	b90b      	cbnz	r3, 8006862 <__swbuf_r+0x12>
 800685e:	f000 f9d9 	bl	8006c14 <__sinit>
 8006862:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <__swbuf_r+0x98>)
 8006864:	429c      	cmp	r4, r3
 8006866:	d12b      	bne.n	80068c0 <__swbuf_r+0x70>
 8006868:	686c      	ldr	r4, [r5, #4]
 800686a:	69a3      	ldr	r3, [r4, #24]
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	071a      	lsls	r2, r3, #28
 8006872:	d52f      	bpl.n	80068d4 <__swbuf_r+0x84>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	b36b      	cbz	r3, 80068d4 <__swbuf_r+0x84>
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	1ac0      	subs	r0, r0, r3
 800687e:	6963      	ldr	r3, [r4, #20]
 8006880:	b2f6      	uxtb	r6, r6
 8006882:	4283      	cmp	r3, r0
 8006884:	4637      	mov	r7, r6
 8006886:	dc04      	bgt.n	8006892 <__swbuf_r+0x42>
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f92e 	bl	8006aec <_fflush_r>
 8006890:	bb30      	cbnz	r0, 80068e0 <__swbuf_r+0x90>
 8006892:	68a3      	ldr	r3, [r4, #8]
 8006894:	3b01      	subs	r3, #1
 8006896:	60a3      	str	r3, [r4, #8]
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	701e      	strb	r6, [r3, #0]
 80068a0:	6963      	ldr	r3, [r4, #20]
 80068a2:	3001      	adds	r0, #1
 80068a4:	4283      	cmp	r3, r0
 80068a6:	d004      	beq.n	80068b2 <__swbuf_r+0x62>
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	07db      	lsls	r3, r3, #31
 80068ac:	d506      	bpl.n	80068bc <__swbuf_r+0x6c>
 80068ae:	2e0a      	cmp	r6, #10
 80068b0:	d104      	bne.n	80068bc <__swbuf_r+0x6c>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f919 	bl	8006aec <_fflush_r>
 80068ba:	b988      	cbnz	r0, 80068e0 <__swbuf_r+0x90>
 80068bc:	4638      	mov	r0, r7
 80068be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <__swbuf_r+0x9c>)
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d101      	bne.n	80068ca <__swbuf_r+0x7a>
 80068c6:	68ac      	ldr	r4, [r5, #8]
 80068c8:	e7cf      	b.n	800686a <__swbuf_r+0x1a>
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <__swbuf_r+0xa0>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	bf08      	it	eq
 80068d0:	68ec      	ldreq	r4, [r5, #12]
 80068d2:	e7ca      	b.n	800686a <__swbuf_r+0x1a>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f80c 	bl	80068f4 <__swsetup_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d0cb      	beq.n	8006878 <__swbuf_r+0x28>
 80068e0:	f04f 37ff 	mov.w	r7, #4294967295
 80068e4:	e7ea      	b.n	80068bc <__swbuf_r+0x6c>
 80068e6:	bf00      	nop
 80068e8:	080087c8 	.word	0x080087c8
 80068ec:	080087e8 	.word	0x080087e8
 80068f0:	080087a8 	.word	0x080087a8

080068f4 <__swsetup_r>:
 80068f4:	4b32      	ldr	r3, [pc, #200]	; (80069c0 <__swsetup_r+0xcc>)
 80068f6:	b570      	push	{r4, r5, r6, lr}
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	4606      	mov	r6, r0
 80068fc:	460c      	mov	r4, r1
 80068fe:	b125      	cbz	r5, 800690a <__swsetup_r+0x16>
 8006900:	69ab      	ldr	r3, [r5, #24]
 8006902:	b913      	cbnz	r3, 800690a <__swsetup_r+0x16>
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f985 	bl	8006c14 <__sinit>
 800690a:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <__swsetup_r+0xd0>)
 800690c:	429c      	cmp	r4, r3
 800690e:	d10f      	bne.n	8006930 <__swsetup_r+0x3c>
 8006910:	686c      	ldr	r4, [r5, #4]
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006918:	0719      	lsls	r1, r3, #28
 800691a:	d42c      	bmi.n	8006976 <__swsetup_r+0x82>
 800691c:	06dd      	lsls	r5, r3, #27
 800691e:	d411      	bmi.n	8006944 <__swsetup_r+0x50>
 8006920:	2309      	movs	r3, #9
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	e03e      	b.n	80069ae <__swsetup_r+0xba>
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <__swsetup_r+0xd4>)
 8006932:	429c      	cmp	r4, r3
 8006934:	d101      	bne.n	800693a <__swsetup_r+0x46>
 8006936:	68ac      	ldr	r4, [r5, #8]
 8006938:	e7eb      	b.n	8006912 <__swsetup_r+0x1e>
 800693a:	4b24      	ldr	r3, [pc, #144]	; (80069cc <__swsetup_r+0xd8>)
 800693c:	429c      	cmp	r4, r3
 800693e:	bf08      	it	eq
 8006940:	68ec      	ldreq	r4, [r5, #12]
 8006942:	e7e6      	b.n	8006912 <__swsetup_r+0x1e>
 8006944:	0758      	lsls	r0, r3, #29
 8006946:	d512      	bpl.n	800696e <__swsetup_r+0x7a>
 8006948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800694a:	b141      	cbz	r1, 800695e <__swsetup_r+0x6a>
 800694c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006950:	4299      	cmp	r1, r3
 8006952:	d002      	beq.n	800695a <__swsetup_r+0x66>
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff fa77 	bl	8005e48 <_free_r>
 800695a:	2300      	movs	r3, #0
 800695c:	6363      	str	r3, [r4, #52]	; 0x34
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	2300      	movs	r3, #0
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f043 0308 	orr.w	r3, r3, #8
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	b94b      	cbnz	r3, 800698e <__swsetup_r+0x9a>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006984:	d003      	beq.n	800698e <__swsetup_r+0x9a>
 8006986:	4621      	mov	r1, r4
 8006988:	4630      	mov	r0, r6
 800698a:	f000 fa07 	bl	8006d9c <__smakebuf_r>
 800698e:	89a0      	ldrh	r0, [r4, #12]
 8006990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006994:	f010 0301 	ands.w	r3, r0, #1
 8006998:	d00a      	beq.n	80069b0 <__swsetup_r+0xbc>
 800699a:	2300      	movs	r3, #0
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	6963      	ldr	r3, [r4, #20]
 80069a0:	425b      	negs	r3, r3
 80069a2:	61a3      	str	r3, [r4, #24]
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	b943      	cbnz	r3, 80069ba <__swsetup_r+0xc6>
 80069a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069ac:	d1ba      	bne.n	8006924 <__swsetup_r+0x30>
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	0781      	lsls	r1, r0, #30
 80069b2:	bf58      	it	pl
 80069b4:	6963      	ldrpl	r3, [r4, #20]
 80069b6:	60a3      	str	r3, [r4, #8]
 80069b8:	e7f4      	b.n	80069a4 <__swsetup_r+0xb0>
 80069ba:	2000      	movs	r0, #0
 80069bc:	e7f7      	b.n	80069ae <__swsetup_r+0xba>
 80069be:	bf00      	nop
 80069c0:	20000060 	.word	0x20000060
 80069c4:	080087c8 	.word	0x080087c8
 80069c8:	080087e8 	.word	0x080087e8
 80069cc:	080087a8 	.word	0x080087a8

080069d0 <abort>:
 80069d0:	b508      	push	{r3, lr}
 80069d2:	2006      	movs	r0, #6
 80069d4:	f000 faa4 	bl	8006f20 <raise>
 80069d8:	2001      	movs	r0, #1
 80069da:	f7fb fcc1 	bl	8002360 <_exit>
	...

080069e0 <__sflush_r>:
 80069e0:	898a      	ldrh	r2, [r1, #12]
 80069e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	4605      	mov	r5, r0
 80069e8:	0710      	lsls	r0, r2, #28
 80069ea:	460c      	mov	r4, r1
 80069ec:	d458      	bmi.n	8006aa0 <__sflush_r+0xc0>
 80069ee:	684b      	ldr	r3, [r1, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dc05      	bgt.n	8006a00 <__sflush_r+0x20>
 80069f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dc02      	bgt.n	8006a00 <__sflush_r+0x20>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	d0f9      	beq.n	80069fa <__sflush_r+0x1a>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a0c:	682f      	ldr	r7, [r5, #0]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	d032      	beq.n	8006a78 <__sflush_r+0x98>
 8006a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	075a      	lsls	r2, r3, #29
 8006a18:	d505      	bpl.n	8006a26 <__sflush_r+0x46>
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	1ac0      	subs	r0, r0, r3
 8006a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a20:	b10b      	cbz	r3, 8006a26 <__sflush_r+0x46>
 8006a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a24:	1ac0      	subs	r0, r0, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b0      	blx	r6
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	d106      	bne.n	8006a46 <__sflush_r+0x66>
 8006a38:	6829      	ldr	r1, [r5, #0]
 8006a3a:	291d      	cmp	r1, #29
 8006a3c:	d82c      	bhi.n	8006a98 <__sflush_r+0xb8>
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <__sflush_r+0x108>)
 8006a40:	40ca      	lsrs	r2, r1
 8006a42:	07d6      	lsls	r6, r2, #31
 8006a44:	d528      	bpl.n	8006a98 <__sflush_r+0xb8>
 8006a46:	2200      	movs	r2, #0
 8006a48:	6062      	str	r2, [r4, #4]
 8006a4a:	04d9      	lsls	r1, r3, #19
 8006a4c:	6922      	ldr	r2, [r4, #16]
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	d504      	bpl.n	8006a5c <__sflush_r+0x7c>
 8006a52:	1c42      	adds	r2, r0, #1
 8006a54:	d101      	bne.n	8006a5a <__sflush_r+0x7a>
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	b903      	cbnz	r3, 8006a5c <__sflush_r+0x7c>
 8006a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d0ca      	beq.n	80069fa <__sflush_r+0x1a>
 8006a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__sflush_r+0x92>
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f7ff f9eb 	bl	8005e48 <_free_r>
 8006a72:	2000      	movs	r0, #0
 8006a74:	6360      	str	r0, [r4, #52]	; 0x34
 8006a76:	e7c1      	b.n	80069fc <__sflush_r+0x1c>
 8006a78:	6a21      	ldr	r1, [r4, #32]
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b0      	blx	r6
 8006a80:	1c41      	adds	r1, r0, #1
 8006a82:	d1c7      	bne.n	8006a14 <__sflush_r+0x34>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0c4      	beq.n	8006a14 <__sflush_r+0x34>
 8006a8a:	2b1d      	cmp	r3, #29
 8006a8c:	d001      	beq.n	8006a92 <__sflush_r+0xb2>
 8006a8e:	2b16      	cmp	r3, #22
 8006a90:	d101      	bne.n	8006a96 <__sflush_r+0xb6>
 8006a92:	602f      	str	r7, [r5, #0]
 8006a94:	e7b1      	b.n	80069fa <__sflush_r+0x1a>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	e7ad      	b.n	80069fc <__sflush_r+0x1c>
 8006aa0:	690f      	ldr	r7, [r1, #16]
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	d0a9      	beq.n	80069fa <__sflush_r+0x1a>
 8006aa6:	0793      	lsls	r3, r2, #30
 8006aa8:	680e      	ldr	r6, [r1, #0]
 8006aaa:	bf08      	it	eq
 8006aac:	694b      	ldreq	r3, [r1, #20]
 8006aae:	600f      	str	r7, [r1, #0]
 8006ab0:	bf18      	it	ne
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	eba6 0807 	sub.w	r8, r6, r7
 8006ab8:	608b      	str	r3, [r1, #8]
 8006aba:	f1b8 0f00 	cmp.w	r8, #0
 8006abe:	dd9c      	ble.n	80069fa <__sflush_r+0x1a>
 8006ac0:	6a21      	ldr	r1, [r4, #32]
 8006ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b0      	blx	r6
 8006acc:	2800      	cmp	r0, #0
 8006ace:	dc06      	bgt.n	8006ade <__sflush_r+0xfe>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e78e      	b.n	80069fc <__sflush_r+0x1c>
 8006ade:	4407      	add	r7, r0
 8006ae0:	eba8 0800 	sub.w	r8, r8, r0
 8006ae4:	e7e9      	b.n	8006aba <__sflush_r+0xda>
 8006ae6:	bf00      	nop
 8006ae8:	20400001 	.word	0x20400001

08006aec <_fflush_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	b913      	cbnz	r3, 8006afc <_fflush_r+0x10>
 8006af6:	2500      	movs	r5, #0
 8006af8:	4628      	mov	r0, r5
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	b118      	cbz	r0, 8006b06 <_fflush_r+0x1a>
 8006afe:	6983      	ldr	r3, [r0, #24]
 8006b00:	b90b      	cbnz	r3, 8006b06 <_fflush_r+0x1a>
 8006b02:	f000 f887 	bl	8006c14 <__sinit>
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <_fflush_r+0x6c>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d11b      	bne.n	8006b44 <_fflush_r+0x58>
 8006b0c:	686c      	ldr	r4, [r5, #4]
 8006b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0ef      	beq.n	8006af6 <_fflush_r+0xa>
 8006b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b18:	07d0      	lsls	r0, r2, #31
 8006b1a:	d404      	bmi.n	8006b26 <_fflush_r+0x3a>
 8006b1c:	0599      	lsls	r1, r3, #22
 8006b1e:	d402      	bmi.n	8006b26 <_fflush_r+0x3a>
 8006b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b22:	f000 f915 	bl	8006d50 <__retarget_lock_acquire_recursive>
 8006b26:	4628      	mov	r0, r5
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f7ff ff59 	bl	80069e0 <__sflush_r>
 8006b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b30:	07da      	lsls	r2, r3, #31
 8006b32:	4605      	mov	r5, r0
 8006b34:	d4e0      	bmi.n	8006af8 <_fflush_r+0xc>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	059b      	lsls	r3, r3, #22
 8006b3a:	d4dd      	bmi.n	8006af8 <_fflush_r+0xc>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3e:	f000 f908 	bl	8006d52 <__retarget_lock_release_recursive>
 8006b42:	e7d9      	b.n	8006af8 <_fflush_r+0xc>
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <_fflush_r+0x70>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <_fflush_r+0x62>
 8006b4a:	68ac      	ldr	r4, [r5, #8]
 8006b4c:	e7df      	b.n	8006b0e <_fflush_r+0x22>
 8006b4e:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <_fflush_r+0x74>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68ec      	ldreq	r4, [r5, #12]
 8006b56:	e7da      	b.n	8006b0e <_fflush_r+0x22>
 8006b58:	080087c8 	.word	0x080087c8
 8006b5c:	080087e8 	.word	0x080087e8
 8006b60:	080087a8 	.word	0x080087a8

08006b64 <std>:
 8006b64:	2300      	movs	r3, #0
 8006b66:	b510      	push	{r4, lr}
 8006b68:	4604      	mov	r4, r0
 8006b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b72:	6083      	str	r3, [r0, #8]
 8006b74:	8181      	strh	r1, [r0, #12]
 8006b76:	6643      	str	r3, [r0, #100]	; 0x64
 8006b78:	81c2      	strh	r2, [r0, #14]
 8006b7a:	6183      	str	r3, [r0, #24]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	2208      	movs	r2, #8
 8006b80:	305c      	adds	r0, #92	; 0x5c
 8006b82:	f7ff f867 	bl	8005c54 <memset>
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <std+0x38>)
 8006b88:	6263      	str	r3, [r4, #36]	; 0x24
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <std+0x3c>)
 8006b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <std+0x40>)
 8006b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <std+0x44>)
 8006b94:	6224      	str	r4, [r4, #32]
 8006b96:	6323      	str	r3, [r4, #48]	; 0x30
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08006f59 	.word	0x08006f59
 8006ba0:	08006f7b 	.word	0x08006f7b
 8006ba4:	08006fb3 	.word	0x08006fb3
 8006ba8:	08006fd7 	.word	0x08006fd7

08006bac <_cleanup_r>:
 8006bac:	4901      	ldr	r1, [pc, #4]	; (8006bb4 <_cleanup_r+0x8>)
 8006bae:	f000 b8af 	b.w	8006d10 <_fwalk_reent>
 8006bb2:	bf00      	nop
 8006bb4:	08006aed 	.word	0x08006aed

08006bb8 <__sfmoreglue>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	1e4a      	subs	r2, r1, #1
 8006bbc:	2568      	movs	r5, #104	; 0x68
 8006bbe:	4355      	muls	r5, r2
 8006bc0:	460e      	mov	r6, r1
 8006bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bc6:	f7ff f98f 	bl	8005ee8 <_malloc_r>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	b140      	cbz	r0, 8006be0 <__sfmoreglue+0x28>
 8006bce:	2100      	movs	r1, #0
 8006bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8006bd4:	300c      	adds	r0, #12
 8006bd6:	60a0      	str	r0, [r4, #8]
 8006bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bdc:	f7ff f83a 	bl	8005c54 <memset>
 8006be0:	4620      	mov	r0, r4
 8006be2:	bd70      	pop	{r4, r5, r6, pc}

08006be4 <__sfp_lock_acquire>:
 8006be4:	4801      	ldr	r0, [pc, #4]	; (8006bec <__sfp_lock_acquire+0x8>)
 8006be6:	f000 b8b3 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006bea:	bf00      	nop
 8006bec:	2000035c 	.word	0x2000035c

08006bf0 <__sfp_lock_release>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	; (8006bf8 <__sfp_lock_release+0x8>)
 8006bf2:	f000 b8ae 	b.w	8006d52 <__retarget_lock_release_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	2000035c 	.word	0x2000035c

08006bfc <__sinit_lock_acquire>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__sinit_lock_acquire+0x8>)
 8006bfe:	f000 b8a7 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006c02:	bf00      	nop
 8006c04:	20000357 	.word	0x20000357

08006c08 <__sinit_lock_release>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__sinit_lock_release+0x8>)
 8006c0a:	f000 b8a2 	b.w	8006d52 <__retarget_lock_release_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20000357 	.word	0x20000357

08006c14 <__sinit>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4604      	mov	r4, r0
 8006c18:	f7ff fff0 	bl	8006bfc <__sinit_lock_acquire>
 8006c1c:	69a3      	ldr	r3, [r4, #24]
 8006c1e:	b11b      	cbz	r3, 8006c28 <__sinit+0x14>
 8006c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c24:	f7ff bff0 	b.w	8006c08 <__sinit_lock_release>
 8006c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <__sinit+0x68>)
 8006c30:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <__sinit+0x6c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	bf04      	itt	eq
 8006c3a:	2301      	moveq	r3, #1
 8006c3c:	61a3      	streq	r3, [r4, #24]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f820 	bl	8006c84 <__sfp>
 8006c44:	6060      	str	r0, [r4, #4]
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f81c 	bl	8006c84 <__sfp>
 8006c4c:	60a0      	str	r0, [r4, #8]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 f818 	bl	8006c84 <__sfp>
 8006c54:	2200      	movs	r2, #0
 8006c56:	60e0      	str	r0, [r4, #12]
 8006c58:	2104      	movs	r1, #4
 8006c5a:	6860      	ldr	r0, [r4, #4]
 8006c5c:	f7ff ff82 	bl	8006b64 <std>
 8006c60:	68a0      	ldr	r0, [r4, #8]
 8006c62:	2201      	movs	r2, #1
 8006c64:	2109      	movs	r1, #9
 8006c66:	f7ff ff7d 	bl	8006b64 <std>
 8006c6a:	68e0      	ldr	r0, [r4, #12]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	2112      	movs	r1, #18
 8006c70:	f7ff ff78 	bl	8006b64 <std>
 8006c74:	2301      	movs	r3, #1
 8006c76:	61a3      	str	r3, [r4, #24]
 8006c78:	e7d2      	b.n	8006c20 <__sinit+0xc>
 8006c7a:	bf00      	nop
 8006c7c:	080086bc 	.word	0x080086bc
 8006c80:	08006bad 	.word	0x08006bad

08006c84 <__sfp>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	4607      	mov	r7, r0
 8006c88:	f7ff ffac 	bl	8006be4 <__sfp_lock_acquire>
 8006c8c:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <__sfp+0x84>)
 8006c8e:	681e      	ldr	r6, [r3, #0]
 8006c90:	69b3      	ldr	r3, [r6, #24]
 8006c92:	b913      	cbnz	r3, 8006c9a <__sfp+0x16>
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff ffbd 	bl	8006c14 <__sinit>
 8006c9a:	3648      	adds	r6, #72	; 0x48
 8006c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	d503      	bpl.n	8006cac <__sfp+0x28>
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	b30b      	cbz	r3, 8006cec <__sfp+0x68>
 8006ca8:	6836      	ldr	r6, [r6, #0]
 8006caa:	e7f7      	b.n	8006c9c <__sfp+0x18>
 8006cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cb0:	b9d5      	cbnz	r5, 8006ce8 <__sfp+0x64>
 8006cb2:	4b16      	ldr	r3, [pc, #88]	; (8006d0c <__sfp+0x88>)
 8006cb4:	60e3      	str	r3, [r4, #12]
 8006cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cba:	6665      	str	r5, [r4, #100]	; 0x64
 8006cbc:	f000 f847 	bl	8006d4e <__retarget_lock_init_recursive>
 8006cc0:	f7ff ff96 	bl	8006bf0 <__sfp_lock_release>
 8006cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ccc:	6025      	str	r5, [r4, #0]
 8006cce:	61a5      	str	r5, [r4, #24]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cd8:	f7fe ffbc 	bl	8005c54 <memset>
 8006cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	3468      	adds	r4, #104	; 0x68
 8006cea:	e7d9      	b.n	8006ca0 <__sfp+0x1c>
 8006cec:	2104      	movs	r1, #4
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f7ff ff62 	bl	8006bb8 <__sfmoreglue>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	6030      	str	r0, [r6, #0]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d1d5      	bne.n	8006ca8 <__sfp+0x24>
 8006cfc:	f7ff ff78 	bl	8006bf0 <__sfp_lock_release>
 8006d00:	230c      	movs	r3, #12
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	e7ee      	b.n	8006ce4 <__sfp+0x60>
 8006d06:	bf00      	nop
 8006d08:	080086bc 	.word	0x080086bc
 8006d0c:	ffff0001 	.word	0xffff0001

08006d10 <_fwalk_reent>:
 8006d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d14:	4606      	mov	r6, r0
 8006d16:	4688      	mov	r8, r1
 8006d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d1c:	2700      	movs	r7, #0
 8006d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d22:	f1b9 0901 	subs.w	r9, r9, #1
 8006d26:	d505      	bpl.n	8006d34 <_fwalk_reent+0x24>
 8006d28:	6824      	ldr	r4, [r4, #0]
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	d1f7      	bne.n	8006d1e <_fwalk_reent+0xe>
 8006d2e:	4638      	mov	r0, r7
 8006d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d34:	89ab      	ldrh	r3, [r5, #12]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d907      	bls.n	8006d4a <_fwalk_reent+0x3a>
 8006d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	d003      	beq.n	8006d4a <_fwalk_reent+0x3a>
 8006d42:	4629      	mov	r1, r5
 8006d44:	4630      	mov	r0, r6
 8006d46:	47c0      	blx	r8
 8006d48:	4307      	orrs	r7, r0
 8006d4a:	3568      	adds	r5, #104	; 0x68
 8006d4c:	e7e9      	b.n	8006d22 <_fwalk_reent+0x12>

08006d4e <__retarget_lock_init_recursive>:
 8006d4e:	4770      	bx	lr

08006d50 <__retarget_lock_acquire_recursive>:
 8006d50:	4770      	bx	lr

08006d52 <__retarget_lock_release_recursive>:
 8006d52:	4770      	bx	lr

08006d54 <__swhatbuf_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	460e      	mov	r6, r1
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	b096      	sub	sp, #88	; 0x58
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	da07      	bge.n	8006d76 <__swhatbuf_r+0x22>
 8006d66:	2300      	movs	r3, #0
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	89b3      	ldrh	r3, [r6, #12]
 8006d6c:	061a      	lsls	r2, r3, #24
 8006d6e:	d410      	bmi.n	8006d92 <__swhatbuf_r+0x3e>
 8006d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d74:	e00e      	b.n	8006d94 <__swhatbuf_r+0x40>
 8006d76:	466a      	mov	r2, sp
 8006d78:	f000 f954 	bl	8007024 <_fstat_r>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	dbf2      	blt.n	8006d66 <__swhatbuf_r+0x12>
 8006d80:	9a01      	ldr	r2, [sp, #4]
 8006d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d8a:	425a      	negs	r2, r3
 8006d8c:	415a      	adcs	r2, r3
 8006d8e:	602a      	str	r2, [r5, #0]
 8006d90:	e7ee      	b.n	8006d70 <__swhatbuf_r+0x1c>
 8006d92:	2340      	movs	r3, #64	; 0x40
 8006d94:	2000      	movs	r0, #0
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	b016      	add	sp, #88	; 0x58
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}

08006d9c <__smakebuf_r>:
 8006d9c:	898b      	ldrh	r3, [r1, #12]
 8006d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006da0:	079d      	lsls	r5, r3, #30
 8006da2:	4606      	mov	r6, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	d507      	bpl.n	8006db8 <__smakebuf_r+0x1c>
 8006da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	2301      	movs	r3, #1
 8006db2:	6163      	str	r3, [r4, #20]
 8006db4:	b002      	add	sp, #8
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	ab01      	add	r3, sp, #4
 8006dba:	466a      	mov	r2, sp
 8006dbc:	f7ff ffca 	bl	8006d54 <__swhatbuf_r>
 8006dc0:	9900      	ldr	r1, [sp, #0]
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff f88f 	bl	8005ee8 <_malloc_r>
 8006dca:	b948      	cbnz	r0, 8006de0 <__smakebuf_r+0x44>
 8006dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd0:	059a      	lsls	r2, r3, #22
 8006dd2:	d4ef      	bmi.n	8006db4 <__smakebuf_r+0x18>
 8006dd4:	f023 0303 	bic.w	r3, r3, #3
 8006dd8:	f043 0302 	orr.w	r3, r3, #2
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	e7e3      	b.n	8006da8 <__smakebuf_r+0xc>
 8006de0:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <__smakebuf_r+0x7c>)
 8006de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	6020      	str	r0, [r4, #0]
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	6163      	str	r3, [r4, #20]
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	6120      	str	r0, [r4, #16]
 8006df6:	b15b      	cbz	r3, 8006e10 <__smakebuf_r+0x74>
 8006df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 f923 	bl	8007048 <_isatty_r>
 8006e02:	b128      	cbz	r0, 8006e10 <__smakebuf_r+0x74>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	89a0      	ldrh	r0, [r4, #12]
 8006e12:	4305      	orrs	r5, r0
 8006e14:	81a5      	strh	r5, [r4, #12]
 8006e16:	e7cd      	b.n	8006db4 <__smakebuf_r+0x18>
 8006e18:	08006bad 	.word	0x08006bad

08006e1c <memcpy>:
 8006e1c:	440a      	add	r2, r1
 8006e1e:	4291      	cmp	r1, r2
 8006e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e24:	d100      	bne.n	8006e28 <memcpy+0xc>
 8006e26:	4770      	bx	lr
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e32:	4291      	cmp	r1, r2
 8006e34:	d1f9      	bne.n	8006e2a <memcpy+0xe>
 8006e36:	bd10      	pop	{r4, pc}

08006e38 <memmove>:
 8006e38:	4288      	cmp	r0, r1
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	eb01 0402 	add.w	r4, r1, r2
 8006e40:	d902      	bls.n	8006e48 <memmove+0x10>
 8006e42:	4284      	cmp	r4, r0
 8006e44:	4623      	mov	r3, r4
 8006e46:	d807      	bhi.n	8006e58 <memmove+0x20>
 8006e48:	1e43      	subs	r3, r0, #1
 8006e4a:	42a1      	cmp	r1, r4
 8006e4c:	d008      	beq.n	8006e60 <memmove+0x28>
 8006e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e56:	e7f8      	b.n	8006e4a <memmove+0x12>
 8006e58:	4402      	add	r2, r0
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	428a      	cmp	r2, r1
 8006e5e:	d100      	bne.n	8006e62 <memmove+0x2a>
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e6a:	e7f7      	b.n	8006e5c <memmove+0x24>

08006e6c <__malloc_lock>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__malloc_lock+0x8>)
 8006e6e:	f7ff bf6f 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	20000358 	.word	0x20000358

08006e78 <__malloc_unlock>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__malloc_unlock+0x8>)
 8006e7a:	f7ff bf6a 	b.w	8006d52 <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20000358 	.word	0x20000358

08006e84 <_realloc_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	4607      	mov	r7, r0
 8006e88:	4614      	mov	r4, r2
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	b921      	cbnz	r1, 8006e98 <_realloc_r+0x14>
 8006e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e92:	4611      	mov	r1, r2
 8006e94:	f7ff b828 	b.w	8005ee8 <_malloc_r>
 8006e98:	b922      	cbnz	r2, 8006ea4 <_realloc_r+0x20>
 8006e9a:	f7fe ffd5 	bl	8005e48 <_free_r>
 8006e9e:	4625      	mov	r5, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea4:	f000 f8f2 	bl	800708c <_malloc_usable_size_r>
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d20f      	bcs.n	8006ecc <_realloc_r+0x48>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f7ff f81a 	bl	8005ee8 <_malloc_r>
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0f2      	beq.n	8006ea0 <_realloc_r+0x1c>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	f7ff ffad 	bl	8006e1c <memcpy>
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7fe ffbf 	bl	8005e48 <_free_r>
 8006eca:	e7e9      	b.n	8006ea0 <_realloc_r+0x1c>
 8006ecc:	4635      	mov	r5, r6
 8006ece:	e7e7      	b.n	8006ea0 <_realloc_r+0x1c>

08006ed0 <_raise_r>:
 8006ed0:	291f      	cmp	r1, #31
 8006ed2:	b538      	push	{r3, r4, r5, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	d904      	bls.n	8006ee4 <_raise_r+0x14>
 8006eda:	2316      	movs	r3, #22
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ee6:	b112      	cbz	r2, 8006eee <_raise_r+0x1e>
 8006ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eec:	b94b      	cbnz	r3, 8006f02 <_raise_r+0x32>
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f830 	bl	8006f54 <_getpid_r>
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efe:	f000 b817 	b.w	8006f30 <_kill_r>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d00a      	beq.n	8006f1c <_raise_r+0x4c>
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	d103      	bne.n	8006f12 <_raise_r+0x42>
 8006f0a:	2316      	movs	r3, #22
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7e7      	b.n	8006ee2 <_raise_r+0x12>
 8006f12:	2400      	movs	r4, #0
 8006f14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f18:	4628      	mov	r0, r5
 8006f1a:	4798      	blx	r3
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7e0      	b.n	8006ee2 <_raise_r+0x12>

08006f20 <raise>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <raise+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f7ff bfd3 	b.w	8006ed0 <_raise_r>
 8006f2a:	bf00      	nop
 8006f2c:	20000060 	.word	0x20000060

08006f30 <_kill_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d07      	ldr	r5, [pc, #28]	; (8006f50 <_kill_r+0x20>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f7fb f9ff 	bl	8002340 <_kill>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	d102      	bne.n	8006f4c <_kill_r+0x1c>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	b103      	cbz	r3, 8006f4c <_kill_r+0x1c>
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000350 	.word	0x20000350

08006f54 <_getpid_r>:
 8006f54:	f7fb b9ec 	b.w	8002330 <_getpid>

08006f58 <__sread>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 f89c 	bl	800709c <_read_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	bfab      	itete	ge
 8006f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f6c:	181b      	addge	r3, r3, r0
 8006f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f72:	bfac      	ite	ge
 8006f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f76:	81a3      	strhlt	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__swrite>:
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	461f      	mov	r7, r3
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	05db      	lsls	r3, r3, #23
 8006f84:	4605      	mov	r5, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	4616      	mov	r6, r2
 8006f8a:	d505      	bpl.n	8006f98 <__swrite+0x1e>
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	2302      	movs	r3, #2
 8006f92:	2200      	movs	r2, #0
 8006f94:	f000 f868 	bl	8007068 <_lseek_r>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	4628      	mov	r0, r5
 8006faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	f000 b817 	b.w	8006fe0 <_write_r>

08006fb2 <__sseek>:
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 f855 	bl	8007068 <_lseek_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	bf15      	itete	ne
 8006fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fce:	81a3      	strheq	r3, [r4, #12]
 8006fd0:	bf18      	it	ne
 8006fd2:	81a3      	strhne	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__sclose>:
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 b813 	b.w	8007004 <_close_r>
	...

08006fe0 <_write_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_write_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7fb f9dd 	bl	80023ae <_write>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_write_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_write_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000350 	.word	0x20000350

08007004 <_close_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d06      	ldr	r5, [pc, #24]	; (8007020 <_close_r+0x1c>)
 8007008:	2300      	movs	r3, #0
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7fb f9e9 	bl	80023e6 <_close>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_close_r+0x1a>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_close_r+0x1a>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000350 	.word	0x20000350

08007024 <_fstat_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	; (8007044 <_fstat_r+0x20>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f7fb f9e4 	bl	80023fe <_fstat>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d102      	bne.n	8007040 <_fstat_r+0x1c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b103      	cbz	r3, 8007040 <_fstat_r+0x1c>
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	20000350 	.word	0x20000350

08007048 <_isatty_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_isatty_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fb f9e3 	bl	800241e <_isatty>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_isatty_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_isatty_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000350 	.word	0x20000350

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	; (8007088 <_lseek_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fb f9dc 	bl	8002434 <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000350 	.word	0x20000350

0800708c <_malloc_usable_size_r>:
 800708c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007090:	1f18      	subs	r0, r3, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	bfbc      	itt	lt
 8007096:	580b      	ldrlt	r3, [r1, r0]
 8007098:	18c0      	addlt	r0, r0, r3
 800709a:	4770      	bx	lr

0800709c <_read_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_read_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fb f962 	bl	8002374 <_read>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_read_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_read_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	20000350 	.word	0x20000350

080070c0 <_gettimeofday>:
 80070c0:	4b02      	ldr	r3, [pc, #8]	; (80070cc <_gettimeofday+0xc>)
 80070c2:	2258      	movs	r2, #88	; 0x58
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	4770      	bx	lr
 80070cc:	20000350 	.word	0x20000350

080070d0 <_init>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr

080070dc <_fini>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr


CAN_Diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d7c  08006d7c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d84  08006d84  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00000238  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002dc  200002dc  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ab2  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029aa  00000000  00000000  00033b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  00037560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022609  00000000  00000000  00038458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012068  00000000  00000000  0005aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d146a  00000000  00000000  0006cac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013df33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d64  00000000  00000000  0013df88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00142cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00142d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800616c 	.word	0x0800616c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800616c 	.word	0x0800616c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <is_joy_pressed>:
int timeOutForKeyPress = TIME_OUT;

// state of joys
int joy_state[NUMBER_OF_JOY] = {NORMAL_STATE};

int is_joy_pressed(int joystick){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(joy_flag[joystick] == 1){
 8000570:	4a09      	ldr	r2, [pc, #36]	; (8000598 <is_joy_pressed+0x30>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d106      	bne.n	800058a <is_joy_pressed+0x22>
		joy_flag[joystick] = 0;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <is_joy_pressed+0x30>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2100      	movs	r1, #0
 8000582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000586:	2301      	movs	r3, #1
 8000588:	e000      	b.n	800058c <is_joy_pressed+0x24>
	}
	return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	200000c0 	.word	0x200000c0

0800059c <get_joystick>:

void get_joystick(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	//left joy
	temp3[JOY_LEFT] = temp2[JOY_LEFT];
 80005a0:	4b65      	ldr	r3, [pc, #404]	; (8000738 <get_joystick+0x19c>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4a65      	ldr	r2, [pc, #404]	; (800073c <get_joystick+0x1a0>)
 80005a6:	6053      	str	r3, [r2, #4]
	temp2[JOY_LEFT] = temp1[JOY_LEFT];
 80005a8:	4b65      	ldr	r3, [pc, #404]	; (8000740 <get_joystick+0x1a4>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a62      	ldr	r2, [pc, #392]	; (8000738 <get_joystick+0x19c>)
 80005ae:	6053      	str	r3, [r2, #4]
	temp1[JOY_LEFT] = HAL_GPIO_ReadPin(GPIOC, JOY_LEFT_PIN);
 80005b0:	2110      	movs	r1, #16
 80005b2:	4864      	ldr	r0, [pc, #400]	; (8000744 <get_joystick+0x1a8>)
 80005b4:	f003 f9ec 	bl	8003990 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <get_joystick+0x1a4>)
 80005be:	605a      	str	r2, [r3, #4]

	if((temp3[JOY_LEFT] == temp2[JOY_LEFT]) && (temp2[JOY_LEFT] == temp1[JOY_LEFT])){
 80005c0:	4b5e      	ldr	r3, [pc, #376]	; (800073c <get_joystick+0x1a0>)
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <get_joystick+0x19c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d12c      	bne.n	8000626 <get_joystick+0x8a>
 80005cc:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <get_joystick+0x19c>)
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	4b5b      	ldr	r3, [pc, #364]	; (8000740 <get_joystick+0x1a4>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d126      	bne.n	8000626 <get_joystick+0x8a>
		if(joy_state[JOY_LEFT] != temp3[JOY_LEFT]){
 80005d8:	4b5b      	ldr	r3, [pc, #364]	; (8000748 <get_joystick+0x1ac>)
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	4b57      	ldr	r3, [pc, #348]	; (800073c <get_joystick+0x1a0>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d014      	beq.n	800060e <get_joystick+0x72>
			joy_state[JOY_LEFT] = temp3[JOY_LEFT];
 80005e4:	4b55      	ldr	r3, [pc, #340]	; (800073c <get_joystick+0x1a0>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	4a57      	ldr	r2, [pc, #348]	; (8000748 <get_joystick+0x1ac>)
 80005ea:	6053      	str	r3, [r2, #4]

			if(joy_state[JOY_LEFT] == PRESSED_STATE){
 80005ec:	4b56      	ldr	r3, [pc, #344]	; (8000748 <get_joystick+0x1ac>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d118      	bne.n	8000626 <get_joystick+0x8a>
				timeOutForKeyPress = TIME_OUT;
 80005f4:	4b55      	ldr	r3, [pc, #340]	; (800074c <get_joystick+0x1b0>)
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_LEFT] = 1;
 80005fa:	4b55      	ldr	r3, [pc, #340]	; (8000750 <get_joystick+0x1b4>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	605a      	str	r2, [r3, #4]
				joy_flag[JOY_CTR] = 0;
 8000600:	4b53      	ldr	r3, [pc, #332]	; (8000750 <get_joystick+0x1b4>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_RIGHT] = 0;
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <get_joystick+0x1b4>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	e00b      	b.n	8000626 <get_joystick+0x8a>
			}
		}else{
			timeOutForKeyPress--;
 800060e:	4b4f      	ldr	r3, [pc, #316]	; (800074c <get_joystick+0x1b0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a4d      	ldr	r2, [pc, #308]	; (800074c <get_joystick+0x1b0>)
 8000616:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 8000618:	4b4c      	ldr	r3, [pc, #304]	; (800074c <get_joystick+0x1b0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <get_joystick+0x8a>
				joy_state[JOY_LEFT] = NORMAL_STATE;
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <get_joystick+0x1ac>)
 8000622:	2201      	movs	r2, #1
 8000624:	605a      	str	r2, [r3, #4]
			}
		}
	}

	//right joy
	temp3[JOY_RIGHT] = temp2[JOY_RIGHT];
 8000626:	4b44      	ldr	r3, [pc, #272]	; (8000738 <get_joystick+0x19c>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	4a44      	ldr	r2, [pc, #272]	; (800073c <get_joystick+0x1a0>)
 800062c:	6093      	str	r3, [r2, #8]
	temp2[JOY_RIGHT] = temp1[JOY_RIGHT];
 800062e:	4b44      	ldr	r3, [pc, #272]	; (8000740 <get_joystick+0x1a4>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a41      	ldr	r2, [pc, #260]	; (8000738 <get_joystick+0x19c>)
 8000634:	6093      	str	r3, [r2, #8]
	temp1[JOY_RIGHT] = HAL_GPIO_ReadPin(GPIOC, JOY_RIGHT_PIN);
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	4842      	ldr	r0, [pc, #264]	; (8000744 <get_joystick+0x1a8>)
 800063a:	f003 f9a9 	bl	8003990 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <get_joystick+0x1a4>)
 8000644:	609a      	str	r2, [r3, #8]

	if((temp3[JOY_RIGHT] == temp2[JOY_RIGHT]) && (temp2[JOY_RIGHT] == temp1[JOY_RIGHT])){
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <get_joystick+0x1a0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <get_joystick+0x19c>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	429a      	cmp	r2, r3
 8000650:	d12c      	bne.n	80006ac <get_joystick+0x110>
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <get_joystick+0x19c>)
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <get_joystick+0x1a4>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	429a      	cmp	r2, r3
 800065c:	d126      	bne.n	80006ac <get_joystick+0x110>
		if(joy_state[JOY_RIGHT] != temp3[JOY_RIGHT]){
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <get_joystick+0x1ac>)
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	4b36      	ldr	r3, [pc, #216]	; (800073c <get_joystick+0x1a0>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	429a      	cmp	r2, r3
 8000668:	d014      	beq.n	8000694 <get_joystick+0xf8>
			joy_state[JOY_RIGHT] = temp3[JOY_RIGHT];
 800066a:	4b34      	ldr	r3, [pc, #208]	; (800073c <get_joystick+0x1a0>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	4a36      	ldr	r2, [pc, #216]	; (8000748 <get_joystick+0x1ac>)
 8000670:	6093      	str	r3, [r2, #8]

			if(joy_state[JOY_RIGHT] == PRESSED_STATE){
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <get_joystick+0x1ac>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d118      	bne.n	80006ac <get_joystick+0x110>
				timeOutForKeyPress = TIME_OUT;
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <get_joystick+0x1b0>)
 800067c:	2264      	movs	r2, #100	; 0x64
 800067e:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_RIGHT] = 1;
 8000680:	4b33      	ldr	r3, [pc, #204]	; (8000750 <get_joystick+0x1b4>)
 8000682:	2201      	movs	r2, #1
 8000684:	609a      	str	r2, [r3, #8]
				joy_flag[JOY_LEFT] = 0;
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <get_joystick+0x1b4>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
				joy_flag[JOY_CTR] = 0;
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <get_joystick+0x1b4>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	e00b      	b.n	80006ac <get_joystick+0x110>
			}
		}else{
			timeOutForKeyPress--;
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <get_joystick+0x1b0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3b01      	subs	r3, #1
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <get_joystick+0x1b0>)
 800069c:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <get_joystick+0x1b0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <get_joystick+0x110>
				joy_state[JOY_RIGHT] = NORMAL_STATE;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <get_joystick+0x1ac>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	609a      	str	r2, [r3, #8]
			}
		}
	}

	// center joy
	temp3[JOY_CTR] = temp2[JOY_CTR];
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <get_joystick+0x19c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <get_joystick+0x1a0>)
 80006b2:	6013      	str	r3, [r2, #0]
	temp2[JOY_CTR] = temp1[JOY_CTR];
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <get_joystick+0x1a4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <get_joystick+0x19c>)
 80006ba:	6013      	str	r3, [r2, #0]
	temp1[JOY_CTR] = HAL_GPIO_ReadPin(GPIOC, JOY_CTR_PIN);
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4820      	ldr	r0, [pc, #128]	; (8000744 <get_joystick+0x1a8>)
 80006c2:	f003 f965 	bl	8003990 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <get_joystick+0x1a4>)
 80006cc:	601a      	str	r2, [r3, #0]

	if((temp3[JOY_CTR] == temp2[JOY_CTR]) && (temp2[JOY_CTR] == temp1[JOY_CTR])){
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <get_joystick+0x1a0>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <get_joystick+0x19c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d12c      	bne.n	8000734 <get_joystick+0x198>
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <get_joystick+0x19c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <get_joystick+0x1a4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d126      	bne.n	8000734 <get_joystick+0x198>
		if(joy_state[JOY_CTR] != temp3[JOY_CTR]){
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <get_joystick+0x1ac>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <get_joystick+0x1a0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d014      	beq.n	800071c <get_joystick+0x180>
			joy_state[JOY_CTR] = temp3[JOY_CTR];
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <get_joystick+0x1a0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <get_joystick+0x1ac>)
 80006f8:	6013      	str	r3, [r2, #0]

			if(joy_state[JOY_CTR] == PRESSED_STATE){
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <get_joystick+0x1ac>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d118      	bne.n	8000734 <get_joystick+0x198>
				timeOutForKeyPress = TIME_OUT;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <get_joystick+0x1b0>)
 8000704:	2264      	movs	r2, #100	; 0x64
 8000706:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_CTR] = 1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <get_joystick+0x1b4>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
				joy_flag[JOY_RIGHT] = 0;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <get_joystick+0x1b4>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
				joy_flag[JOY_LEFT] = 0;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <get_joystick+0x1b4>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
			if(timeOutForKeyPress == 0){
				joy_state[JOY_CTR] = NORMAL_STATE;
			}
		}
	}
}
 800071a:	e00b      	b.n	8000734 <get_joystick+0x198>
			timeOutForKeyPress--;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <get_joystick+0x1b0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <get_joystick+0x1b0>)
 8000724:	6013      	str	r3, [r2, #0]
			if(timeOutForKeyPress == 0){
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <get_joystick+0x1b0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <get_joystick+0x198>
				joy_state[JOY_CTR] = NORMAL_STATE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <get_joystick+0x1ac>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000000c 	.word	0x2000000c
 800073c:	20000018 	.word	0x20000018
 8000740:	20000000 	.word	0x20000000
 8000744:	40020800 	.word	0x40020800
 8000748:	20000028 	.word	0x20000028
 800074c:	20000024 	.word	0x20000024
 8000750:	200000c0 	.word	0x200000c0

08000754 <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <lcd_write_byte+0x24>
        LCD_DC_H();
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000770:	480f      	ldr	r0, [pc, #60]	; (80007b0 <lcd_write_byte+0x5c>)
 8000772:	f003 f925 	bl	80039c0 <HAL_GPIO_WritePin>
 8000776:	e005      	b.n	8000784 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <lcd_write_byte+0x5c>)
 8000780:	f003 f91e 	bl	80039c0 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <lcd_write_byte+0x5c>)
 800078c:	f003 f918 	bl	80039c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &chByte, 1, 1000);
 8000790:	1df9      	adds	r1, r7, #7
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	2201      	movs	r2, #1
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <lcd_write_byte+0x60>)
 800079a:	f003 fdc8 	bl	800432e <HAL_SPI_Transmit>
    LCD_CS_H();
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <lcd_write_byte+0x5c>)
 80007a4:	f003 f90c 	bl	80039c0 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020400 	.word	0x40020400
 80007b4:	200001c4 	.word	0x200001c4

080007b8 <lcd_write_word>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_word(uint16_t hwData)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
    LCD_DC_H();
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	4814      	ldr	r0, [pc, #80]	; (800081c <lcd_write_word+0x64>)
 80007ca:	f003 f8f9 	bl	80039c0 <HAL_GPIO_WritePin>
    LCD_CS_L();
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <lcd_write_word+0x64>)
 80007d6:	f003 f8f3 	bl	80039c0 <HAL_GPIO_WritePin>
    uint8_t highBitsHwData = hwData >> 8;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	73fb      	strb	r3, [r7, #15]
    uint8_t lowBitsHwData = hwData & 0xFF;
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, &highBitsHwData, 1, 1000);
 80007ea:	f107 010f 	add.w	r1, r7, #15
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	2201      	movs	r2, #1
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <lcd_write_word+0x68>)
 80007f6:	f003 fd9a 	bl	800432e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &lowBitsHwData, 1, 1000);
 80007fa:	f107 010e 	add.w	r1, r7, #14
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	2201      	movs	r2, #1
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <lcd_write_word+0x68>)
 8000806:	f003 fd92 	bl	800432e <HAL_SPI_Transmit>

    LCD_CS_H();
 800080a:	2201      	movs	r2, #1
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <lcd_write_word+0x64>)
 8000810:	f003 f8d6 	bl	80039c0 <HAL_GPIO_WritePin>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40020400 	.word	0x40020400
 8000820:	200001c4 	.word	0x200001c4

08000824 <lcd_write_command>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff8b 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff86 	bl	8000754 <lcd_write_byte>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <delay_ms>:
/******************************************************************************
Function Name  : delay
	  parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 8000858:	f241 3388 	movw	r3, #5000	; 0x1388
 800085c:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 800085e:	e008      	b.n	8000872 <delay_ms+0x22>
	for(;j>2;j--){
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3b01      	subs	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d8f9      	bhi.n	8000860 <delay_ms+0x10>
	for(;ms>2;ms--)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d8f6      	bhi.n	8000866 <delay_ms+0x16>

	}
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <lcd_init>:

/******************************************************************************
Function Name  : initials lcd control pin
******************************************************************************/
void lcd_init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	LCD_RST_H();
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	4881      	ldr	r0, [pc, #516]	; (8000a98 <lcd_init+0x210>)
 8000892:	f003 f895 	bl	80039c0 <HAL_GPIO_WritePin>

	LCD_CS_H();
 8000896:	2201      	movs	r2, #1
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	487f      	ldr	r0, [pc, #508]	; (8000a98 <lcd_init+0x210>)
 800089c:	f003 f890 	bl	80039c0 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 80008a0:	2201      	movs	r2, #1
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	487c      	ldr	r0, [pc, #496]	; (8000a98 <lcd_init+0x210>)
 80008a6:	f003 f88b 	bl	80039c0 <HAL_GPIO_WritePin>
	LCD_RST_H();
 80008aa:	2201      	movs	r2, #1
 80008ac:	2104      	movs	r1, #4
 80008ae:	487a      	ldr	r0, [pc, #488]	; (8000a98 <lcd_init+0x210>)
 80008b0:	f003 f886 	bl	80039c0 <HAL_GPIO_WritePin>
	delay_ms(5);
 80008b4:	2005      	movs	r0, #5
 80008b6:	f7ff ffcb 	bl	8000850 <delay_ms>
	LCD_RST_L();
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c0:	4875      	ldr	r0, [pc, #468]	; (8000a98 <lcd_init+0x210>)
 80008c2:	f003 f87d 	bl	80039c0 <HAL_GPIO_WritePin>
	delay_ms(5);
 80008c6:	2005      	movs	r0, #5
 80008c8:	f7ff ffc2 	bl	8000850 <delay_ms>
	LCD_RST_H();
 80008cc:	2201      	movs	r2, #1
 80008ce:	2104      	movs	r1, #4
 80008d0:	4871      	ldr	r0, [pc, #452]	; (8000a98 <lcd_init+0x210>)
 80008d2:	f003 f875 	bl	80039c0 <HAL_GPIO_WritePin>
	delay_ms(5);
 80008d6:	2005      	movs	r0, #5
 80008d8:	f7ff ffba 	bl	8000850 <delay_ms>
	LCD_CS_H();
 80008dc:	2201      	movs	r2, #1
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	486d      	ldr	r0, [pc, #436]	; (8000a98 <lcd_init+0x210>)
 80008e2:	f003 f86d 	bl	80039c0 <HAL_GPIO_WritePin>

	lcd_write_byte(0x11,LCD_CMD);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2011      	movs	r0, #17
 80008ea:	f7ff ff33 	bl	8000754 <lcd_write_byte>
	delay_ms(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f7ff ffae 	bl	8000850 <delay_ms>
	lcd_write_command(0x36,0x00);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2036      	movs	r0, #54	; 0x36
 80008f8:	f7ff ff94 	bl	8000824 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 80008fc:	2105      	movs	r1, #5
 80008fe:	203a      	movs	r0, #58	; 0x3a
 8000900:	f7ff ff90 	bl	8000824 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 8000904:	2100      	movs	r1, #0
 8000906:	20b2      	movs	r0, #178	; 0xb2
 8000908:	f7ff ff24 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800090c:	2101      	movs	r1, #1
 800090e:	200c      	movs	r0, #12
 8000910:	f7ff ff20 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000914:	2101      	movs	r1, #1
 8000916:	200c      	movs	r0, #12
 8000918:	f7ff ff1c 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800091c:	2101      	movs	r1, #1
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff18 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000924:	2101      	movs	r1, #1
 8000926:	2033      	movs	r0, #51	; 0x33
 8000928:	f7ff ff14 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 800092c:	2101      	movs	r1, #1
 800092e:	2033      	movs	r0, #51	; 0x33
 8000930:	f7ff ff10 	bl	8000754 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 8000934:	2135      	movs	r1, #53	; 0x35
 8000936:	20b7      	movs	r0, #183	; 0xb7
 8000938:	f7ff ff74 	bl	8000824 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 800093c:	2128      	movs	r1, #40	; 0x28
 800093e:	20bb      	movs	r0, #187	; 0xbb
 8000940:	f7ff ff70 	bl	8000824 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 8000944:	213c      	movs	r1, #60	; 0x3c
 8000946:	20c0      	movs	r0, #192	; 0xc0
 8000948:	f7ff ff6c 	bl	8000824 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 800094c:	2101      	movs	r1, #1
 800094e:	20c2      	movs	r0, #194	; 0xc2
 8000950:	f7ff ff68 	bl	8000824 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 8000954:	210b      	movs	r1, #11
 8000956:	20c3      	movs	r0, #195	; 0xc3
 8000958:	f7ff ff64 	bl	8000824 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 800095c:	2120      	movs	r1, #32
 800095e:	20c4      	movs	r0, #196	; 0xc4
 8000960:	f7ff ff60 	bl	8000824 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 8000964:	210f      	movs	r1, #15
 8000966:	20c6      	movs	r0, #198	; 0xc6
 8000968:	f7ff ff5c 	bl	8000824 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 800096c:	2100      	movs	r1, #0
 800096e:	20d0      	movs	r0, #208	; 0xd0
 8000970:	f7ff fef0 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 8000974:	2101      	movs	r1, #1
 8000976:	20a4      	movs	r0, #164	; 0xa4
 8000978:	f7ff feec 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 800097c:	2101      	movs	r1, #1
 800097e:	20a1      	movs	r0, #161	; 0xa1
 8000980:	f7ff fee8 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 8000984:	2100      	movs	r1, #0
 8000986:	20e0      	movs	r0, #224	; 0xe0
 8000988:	f7ff fee4 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800098c:	2101      	movs	r1, #1
 800098e:	20d0      	movs	r0, #208	; 0xd0
 8000990:	f7ff fee0 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 8000994:	2101      	movs	r1, #1
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff fedc 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 800099c:	2101      	movs	r1, #1
 800099e:	2008      	movs	r0, #8
 80009a0:	f7ff fed8 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 80009a4:	2101      	movs	r1, #1
 80009a6:	200f      	movs	r0, #15
 80009a8:	f7ff fed4 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80009ac:	2101      	movs	r1, #1
 80009ae:	2011      	movs	r0, #17
 80009b0:	f7ff fed0 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 80009b4:	2101      	movs	r1, #1
 80009b6:	202a      	movs	r0, #42	; 0x2a
 80009b8:	f7ff fecc 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 80009bc:	2101      	movs	r1, #1
 80009be:	2036      	movs	r0, #54	; 0x36
 80009c0:	f7ff fec8 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 80009c4:	2101      	movs	r1, #1
 80009c6:	2055      	movs	r0, #85	; 0x55
 80009c8:	f7ff fec4 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 80009cc:	2101      	movs	r1, #1
 80009ce:	2044      	movs	r0, #68	; 0x44
 80009d0:	f7ff fec0 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 80009d4:	2101      	movs	r1, #1
 80009d6:	203a      	movs	r0, #58	; 0x3a
 80009d8:	f7ff febc 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 80009dc:	2101      	movs	r1, #1
 80009de:	200b      	movs	r0, #11
 80009e0:	f7ff feb8 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 80009e4:	2101      	movs	r1, #1
 80009e6:	2006      	movs	r0, #6
 80009e8:	f7ff feb4 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80009ec:	2101      	movs	r1, #1
 80009ee:	2011      	movs	r0, #17
 80009f0:	f7ff feb0 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 80009f4:	2101      	movs	r1, #1
 80009f6:	2020      	movs	r0, #32
 80009f8:	f7ff feac 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 80009fc:	2100      	movs	r1, #0
 80009fe:	20e1      	movs	r0, #225	; 0xe1
 8000a00:	f7ff fea8 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8000a04:	2101      	movs	r1, #1
 8000a06:	20d0      	movs	r0, #208	; 0xd0
 8000a08:	f7ff fea4 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fea0 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 8000a14:	2101      	movs	r1, #1
 8000a16:	2007      	movs	r0, #7
 8000a18:	f7ff fe9c 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f7ff fe98 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8000a24:	2101      	movs	r1, #1
 8000a26:	200b      	movs	r0, #11
 8000a28:	f7ff fe94 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	2018      	movs	r0, #24
 8000a30:	f7ff fe90 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 8000a34:	2101      	movs	r1, #1
 8000a36:	2034      	movs	r0, #52	; 0x34
 8000a38:	f7ff fe8c 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	2043      	movs	r0, #67	; 0x43
 8000a40:	f7ff fe88 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 8000a44:	2101      	movs	r1, #1
 8000a46:	204a      	movs	r0, #74	; 0x4a
 8000a48:	f7ff fe84 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	202b      	movs	r0, #43	; 0x2b
 8000a50:	f7ff fe80 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 8000a54:	2101      	movs	r1, #1
 8000a56:	201b      	movs	r0, #27
 8000a58:	f7ff fe7c 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	201c      	movs	r0, #28
 8000a60:	f7ff fe78 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 8000a64:	2101      	movs	r1, #1
 8000a66:	2022      	movs	r0, #34	; 0x22
 8000a68:	f7ff fe74 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	201f      	movs	r0, #31
 8000a70:	f7ff fe70 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 8000a74:	2100      	movs	r1, #0
 8000a76:	2029      	movs	r0, #41	; 0x29
 8000a78:	f7ff fe6c 	bl	8000754 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 8000a7c:	21ff      	movs	r1, #255	; 0xff
 8000a7e:	2051      	movs	r0, #81	; 0x51
 8000a80:	f7ff fed0 	bl	8000824 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 8000a84:	21b0      	movs	r1, #176	; 0xb0
 8000a86:	2055      	movs	r0, #85	; 0x55
 8000a88:	f7ff fecc 	bl	8000824 <lcd_write_command>

	lcd_clear_screen(WHITE);
 8000a8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a90:	f000 f85c 	bl	8000b4c <lcd_clear_screen>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40020400 	.word	0x40020400

08000a9c <lcd_set_cursor>:
Function Name  : set lcd cursor
	  parameter:
		 hwXpos: x axis position
		 hwYpos: y axis position
******************************************************************************/
void lcd_set_cursor(uint16_t hwXpos, uint16_t hwYpos){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	80bb      	strh	r3, [r7, #4]
	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	2bef      	cmp	r3, #239	; 0xef
 8000ab0:	d824      	bhi.n	8000afc <lcd_set_cursor+0x60>
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ab8:	d220      	bcs.n	8000afc <lcd_set_cursor+0x60>
		return;
	}
	lcd_write_byte(0x2A,LCD_CMD);
 8000aba:	2100      	movs	r1, #0
 8000abc:	202a      	movs	r0, #42	; 0x2a
 8000abe:	f7ff fe49 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe45 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(hwXpos,LCD_DATA);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe3f 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	202b      	movs	r0, #43	; 0x2b
 8000ada:	f7ff fe3b 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((hwYpos>>8)&0xff,LCD_DATA);
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe33 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(hwYpos&0xff,LCD_DATA);
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe2d 	bl	8000754 <lcd_write_byte>
 8000afa:	e000      	b.n	8000afe <lcd_set_cursor+0x62>
		return;
 8000afc:	bf00      	nop
}
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <lcd_draw_dot>:
		 hwXpos: 	x axis position
		 hwYpos: 	y axis position
		hwColor:	dot color
******************************************************************************/
void lcd_draw_dot(uint16_t hwXpos, uint16_t hwYpos, uint16_t hwColor)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	4613      	mov	r3, r2
 8000b14:	807b      	strh	r3, [r7, #2]
	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2bef      	cmp	r3, #239	; 0xef
 8000b1a:	d812      	bhi.n	8000b42 <lcd_draw_dot+0x3e>
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b22:	d20e      	bcs.n	8000b42 <lcd_draw_dot+0x3e>
		return;
	}
	lcd_set_cursor(hwXpos, hwYpos);
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ffb6 	bl	8000a9c <lcd_set_cursor>
	lcd_write_byte(0x2C, LCD_CMD);
 8000b30:	2100      	movs	r1, #0
 8000b32:	202c      	movs	r0, #44	; 0x2c
 8000b34:	f7ff fe0e 	bl	8000754 <lcd_write_byte>
	lcd_write_word(hwColor);
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fe3c 	bl	80007b8 <lcd_write_word>
 8000b40:	e000      	b.n	8000b44 <lcd_draw_dot+0x40>
		return;
 8000b42:	bf00      	nop
}
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <lcd_clear_screen>:
Function Name  : clear lcd screen
	  parameter:
		hwColor: background color
******************************************************************************/
void lcd_clear_screen(uint16_t hwColor)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 8000b56:	23f0      	movs	r3, #240	; 0xf0
 8000b58:	613b      	str	r3, [r7, #16]
	wCount *= LCD_HEIGHT;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	019b      	lsls	r3, r3, #6
 8000b64:	613b      	str	r3, [r7, #16]
	lcd_write_byte(0x2A,LCD_CMD);
 8000b66:	2100      	movs	r1, #0
 8000b68:	202a      	movs	r0, #42	; 0x2a
 8000b6a:	f7ff fdf3 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fdef 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000b76:	2101      	movs	r1, #1
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fdeb 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fde7 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 8000b86:	2101      	movs	r1, #1
 8000b88:	20ef      	movs	r0, #239	; 0xef
 8000b8a:	f7ff fde3 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	202b      	movs	r0, #43	; 0x2b
 8000b92:	f7ff fddf 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000b96:	2101      	movs	r1, #1
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fddb 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fdd7 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fdd3 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	203f      	movs	r0, #63	; 0x3f
 8000bb2:	f7ff fdcf 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	202c      	movs	r0, #44	; 0x2c
 8000bba:	f7ff fdcb 	bl	8000754 <lcd_write_byte>
	LCD_CS_L();
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <lcd_clear_screen+0xe0>)
 8000bc6:	f002 fefb 	bl	80039c0 <HAL_GPIO_WritePin>
	LCD_DC_H();
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd0:	4816      	ldr	r0, [pc, #88]	; (8000c2c <lcd_clear_screen+0xe0>)
 8000bd2:	f002 fef5 	bl	80039c0 <HAL_GPIO_WritePin>

	uint8_t highBitsHwColor = hwColor>>8;
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	73fb      	strb	r3, [r7, #15]
	uint8_t lowBitsHwColor = hwColor&0xFF;
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<wCount;i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e012      	b.n	8000c12 <lcd_clear_screen+0xc6>
		HAL_SPI_Transmit(&hspi1, &highBitsHwColor, 1, 1000);
 8000bec:	f107 010f 	add.w	r1, r7, #15
 8000bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	480e      	ldr	r0, [pc, #56]	; (8000c30 <lcd_clear_screen+0xe4>)
 8000bf8:	f003 fb99 	bl	800432e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &lowBitsHwColor, 1, 1000);
 8000bfc:	f107 010e 	add.w	r1, r7, #14
 8000c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c04:	2201      	movs	r2, #1
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <lcd_clear_screen+0xe4>)
 8000c08:	f003 fb91 	bl	800432e <HAL_SPI_Transmit>
	for(i=0;i<wCount;i++){
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d3e8      	bcc.n	8000bec <lcd_clear_screen+0xa0>
	}
	LCD_CS_H();
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <lcd_clear_screen+0xe0>)
 8000c20:	f002 fece 	bl	80039c0 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	200001c4 	.word	0x200001c4

08000c34 <lcd_display_char>:
void lcd_display_char(	 uint16_t hwXpos,
                         uint16_t hwYpos,
                         uint8_t chChr,
                         uint8_t chSize,
                         uint16_t hwColor)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	70bb      	strb	r3, [r7, #2]
	uint8_t i, j, chTemp;
	uint16_t hwYpos0 = hwYpos, hwColorVal = 0;
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	817b      	strh	r3, [r7, #10]
 8000c56:	2300      	movs	r3, #0
 8000c58:	813b      	strh	r3, [r7, #8]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	2bef      	cmp	r3, #239	; 0xef
 8000c5e:	f200 8095 	bhi.w	8000d8c <lcd_display_char+0x158>
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c68:	f080 8090 	bcs.w	8000d8c <lcd_display_char+0x158>
		return;
	}
	lcd_write_byte(0x2A,LCD_CMD);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	202a      	movs	r0, #42	; 0x2a
 8000c70:	f7ff fd70 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fd6c 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(hwXpos,LCD_DATA);
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd66 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((hwXpos) >> 8,LCD_DATA);
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2101      	movs	r1, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd5e 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((hwXpos) & 0xFF,LCD_DATA);
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd58 	bl	8000754 <lcd_write_byte>

	lcd_write_byte(0x2B,LCD_CMD);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	202b      	movs	r0, #43	; 0x2b
 8000ca8:	f7ff fd54 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(hwYpos >> 8,LCD_DATA);
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd4c 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(hwYpos & 0xFF,LCD_DATA);
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd46 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((hwYpos) >> 8,LCD_DATA);
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd3e 	bl	8000754 <lcd_write_byte>
	lcd_write_byte((hwYpos) & 0xFF,LCD_DATA);
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd38 	bl	8000754 <lcd_write_byte>
	lcd_write_byte(0x2C, LCD_CMD);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	202c      	movs	r0, #44	; 0x2c
 8000ce8:	f7ff fd34 	bl	8000754 <lcd_write_byte>

    for (i = 0; i < chSize; i ++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e047      	b.n	8000d82 <lcd_display_char+0x14e>
		if (FONT_1206 == chSize) {
 8000cf2:	78bb      	ldrb	r3, [r7, #2]
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d10d      	bne.n	8000d14 <lcd_display_char+0xe0>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	f1a3 0220 	sub.w	r2, r3, #32
 8000cfe:	7bf9      	ldrb	r1, [r7, #15]
 8000d00:	4824      	ldr	r0, [pc, #144]	; (8000d94 <lcd_display_char+0x160>)
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4403      	add	r3, r0
 8000d0c:	440b      	add	r3, r1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	737b      	strb	r3, [r7, #13]
 8000d12:	e00c      	b.n	8000d2e <lcd_display_char+0xfa>
		}
		else if (FONT_1608 == chSize) {
 8000d14:	78bb      	ldrb	r3, [r7, #2]
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d109      	bne.n	8000d2e <lcd_display_char+0xfa>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	f1a3 0220 	sub.w	r2, r3, #32
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	491d      	ldr	r1, [pc, #116]	; (8000d98 <lcd_display_char+0x164>)
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	440a      	add	r2, r1
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	737b      	strb	r3, [r7, #13]
		}
		for (j = 0; j < 8; j ++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
 8000d32:	e020      	b.n	8000d76 <lcd_display_char+0x142>
			if (chTemp & 0x80) {
 8000d34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da07      	bge.n	8000d4c <lcd_display_char+0x118>
				hwColorVal = hwColor;
 8000d3c:	8c3b      	ldrh	r3, [r7, #32]
 8000d3e:	813b      	strh	r3, [r7, #8]
				lcd_draw_dot(hwXpos, hwYpos, hwColorVal);
 8000d40:	893a      	ldrh	r2, [r7, #8]
 8000d42:	88b9      	ldrh	r1, [r7, #4]
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fedc 	bl	8000b04 <lcd_draw_dot>
			}
			chTemp <<= 1;
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	737b      	strb	r3, [r7, #13]
			hwYpos ++;
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	3301      	adds	r3, #1
 8000d56:	80bb      	strh	r3, [r7, #4]
			if ((hwYpos - hwYpos0) == chSize) {
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	897b      	ldrh	r3, [r7, #10]
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	78bb      	ldrb	r3, [r7, #2]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d105      	bne.n	8000d70 <lcd_display_char+0x13c>
				hwYpos = hwYpos0;
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	80bb      	strh	r3, [r7, #4]
				hwXpos ++;
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	80fb      	strh	r3, [r7, #6]
				break;
 8000d6e:	e005      	b.n	8000d7c <lcd_display_char+0x148>
		for (j = 0; j < 8; j ++) {
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73bb      	strb	r3, [r7, #14]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b07      	cmp	r3, #7
 8000d7a:	d9db      	bls.n	8000d34 <lcd_display_char+0x100>
    for (i = 0; i < chSize; i ++) {
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	7bfa      	ldrb	r2, [r7, #15]
 8000d84:	78bb      	ldrb	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3b3      	bcc.n	8000cf2 <lcd_display_char+0xbe>
 8000d8a:	e000      	b.n	8000d8e <lcd_display_char+0x15a>
		return;
 8000d8c:	bf00      	nop
			}
		}
    }
}
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	080061bc 	.word	0x080061bc
 8000d98:	08006630 	.word	0x08006630

08000d9c <lcd_display_string>:
	    hwColor: string color
******************************************************************************/
void lcd_display_string(	uint16_t hwXpos,uint16_t hwYpos,
							const uint8_t *pchString,
							uint8_t chSize,uint16_t hwColor)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	60ba      	str	r2, [r7, #8]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4603      	mov	r3, r0
 8000da8:	81fb      	strh	r3, [r7, #14]
 8000daa:	460b      	mov	r3, r1
 8000dac:	81bb      	strh	r3, [r7, #12]
 8000dae:	4613      	mov	r3, r2
 8000db0:	71fb      	strb	r3, [r7, #7]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	2bef      	cmp	r3, #239	; 0xef
 8000db6:	d839      	bhi.n	8000e2c <lcd_display_string+0x90>
 8000db8:	89bb      	ldrh	r3, [r7, #12]
 8000dba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dbe:	d235      	bcs.n	8000e2c <lcd_display_string+0x90>
		return;
	}

    while (*pchString != '\0') {
 8000dc0:	e02f      	b.n	8000e22 <lcd_display_string+0x86>
        if (hwXpos > (LCD_WIDTH - chSize / 2)) {
 8000dc2:	89fa      	ldrh	r2, [r7, #14]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dd13      	ble.n	8000dfa <lcd_display_string+0x5e>
			hwXpos = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	81fb      	strh	r3, [r7, #14]
			hwYpos += chSize;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	89bb      	ldrh	r3, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	81bb      	strh	r3, [r7, #12]
			if (hwYpos > (LCD_HEIGHT - chSize)) {
 8000de0:	89ba      	ldrh	r2, [r7, #12]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dd06      	ble.n	8000dfa <lcd_display_string+0x5e>
				hwYpos = hwXpos = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	81bb      	strh	r3, [r7, #12]
				lcd_clear_screen(0x00);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fea9 	bl	8000b4c <lcd_clear_screen>
			}
		}

        lcd_display_char(hwXpos, hwYpos, (uint8_t)*pchString, chSize, hwColor);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	79fc      	ldrb	r4, [r7, #7]
 8000e00:	89b9      	ldrh	r1, [r7, #12]
 8000e02:	89f8      	ldrh	r0, [r7, #14]
 8000e04:	8c3b      	ldrh	r3, [r7, #32]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	f7ff ff13 	bl	8000c34 <lcd_display_char>
        hwXpos += chSize / 2;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	4413      	add	r3, r2
 8000e1a:	81fb      	strh	r3, [r7, #14]
        pchString ++;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
    while (*pchString != '\0') {
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1cb      	bne.n	8000dc2 <lcd_display_string+0x26>
 8000e2a:	e000      	b.n	8000e2e <lcd_display_string+0x92>
		return;
 8000e2c:	bf00      	nop
    }
}
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd90      	pop	{r4, r7, pc}

08000e34 <lcd_draw_line>:
		hwColor: line color
******************************************************************************/
void lcd_draw_line(		uint16_t hwXpos0, uint16_t hwYpos0,
                      uint16_t hwXpos1, uint16_t hwYpos1,
                      uint16_t hwColor)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b08b      	sub	sp, #44	; 0x2c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	4603      	mov	r3, r0
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	807b      	strh	r3, [r7, #2]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	803b      	strh	r3, [r7, #0]
	int x = hwXpos1 - hwXpos0;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	623b      	str	r3, [r7, #32]
	int y = hwYpos1 - hwYpos0;
 8000e5a:	883a      	ldrh	r2, [r7, #0]
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	61fb      	str	r3, [r7, #28]
	int dx = abs(x), sx = hwXpos0 < hwXpos1 ? 1 : -1;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bfb8      	it	lt
 8000e68:	425b      	neglt	r3, r3
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	88fa      	ldrh	r2, [r7, #6]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d201      	bcs.n	8000e78 <lcd_draw_line+0x44>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e001      	b.n	8000e7c <lcd_draw_line+0x48>
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	617b      	str	r3, [r7, #20]
	int dy = -abs(y), sy = hwYpos0 < hwYpos1 ? 1 : -1;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bfb8      	it	lt
 8000e84:	425b      	neglt	r3, r3
 8000e86:	425b      	negs	r3, r3
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	88ba      	ldrh	r2, [r7, #4]
 8000e8c:	883b      	ldrh	r3, [r7, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d201      	bcs.n	8000e96 <lcd_draw_line+0x62>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e001      	b.n	8000e9a <lcd_draw_line+0x66>
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	60fb      	str	r3, [r7, #12]
	int err = dx + dy, e2;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24

	if (hwXpos0 >= LCD_WIDTH || hwYpos0 >= LCD_HEIGHT || hwXpos1 >= LCD_WIDTH || hwYpos1 >= LCD_HEIGHT) {
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	2bef      	cmp	r3, #239	; 0xef
 8000ea8:	d836      	bhi.n	8000f18 <lcd_draw_line+0xe4>
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000eb0:	d232      	bcs.n	8000f18 <lcd_draw_line+0xe4>
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	2bef      	cmp	r3, #239	; 0xef
 8000eb6:	d82f      	bhi.n	8000f18 <lcd_draw_line+0xe4>
 8000eb8:	883b      	ldrh	r3, [r7, #0]
 8000eba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ebe:	d22b      	bcs.n	8000f18 <lcd_draw_line+0xe4>
		return;
	}

    for (;;){
        lcd_draw_dot(hwXpos0, hwYpos0 , hwColor);
 8000ec0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe1c 	bl	8000b04 <lcd_draw_dot>
        e2 = 2 * err;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) {
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	db0c      	blt.n	8000ef4 <lcd_draw_line+0xc0>
            if (hwXpos0 == hwXpos1) break;
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d01c      	beq.n	8000f1c <lcd_draw_line+0xe8>
            err += dy; hwXpos0 += sx;
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dce1      	bgt.n	8000ec0 <lcd_draw_line+0x8c>
            if (hwYpos0 == hwYpos1) break;
 8000efc:	88ba      	ldrh	r2, [r7, #4]
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d00d      	beq.n	8000f20 <lcd_draw_line+0xec>
            err += dx; hwYpos0 += sy;
 8000f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4413      	add	r3, r2
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	80bb      	strh	r3, [r7, #4]
        lcd_draw_dot(hwXpos0, hwYpos0 , hwColor);
 8000f16:	e7d3      	b.n	8000ec0 <lcd_draw_line+0x8c>
		return;
 8000f18:	bf00      	nop
 8000f1a:	e002      	b.n	8000f22 <lcd_draw_line+0xee>
            if (hwXpos0 == hwXpos1) break;
 8000f1c:	bf00      	nop
 8000f1e:	e000      	b.n	8000f22 <lcd_draw_line+0xee>
            if (hwYpos0 == hwYpos1) break;
 8000f20:	bf00      	nop
        }
    }
}
 8000f22:	372c      	adds	r7, #44	; 0x2c
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <lcd_draw_circle>:
	   hwRadius: circle radius
		hwColor: cirlce color
******************************************************************************/
void lcd_draw_circle(		uint16_t hwXpos, uint16_t hwYpos,
                        uint16_t hwRadius,uint16_t hwColor)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	int x = -hwRadius, y = 0, err = 2 - 2 * hwRadius, e2;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	425b      	negs	r3, r3
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f1c3 0301 	rsb	r3, r3, #1
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2bef      	cmp	r3, #239	; 0xef
 8000f5e:	d866      	bhi.n	800102e <lcd_draw_circle+0x106>
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f66:	d262      	bcs.n	800102e <lcd_draw_circle+0x106>
		return;
	}

    do {
        lcd_draw_dot(hwXpos - x, hwYpos + y, hwColor);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b298      	uxth	r0, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	883a      	ldrh	r2, [r7, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fdc0 	bl	8000b04 <lcd_draw_dot>
        lcd_draw_dot(hwXpos + x, hwYpos + y, hwColor);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b298      	uxth	r0, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	883a      	ldrh	r2, [r7, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fdb2 	bl	8000b04 <lcd_draw_dot>
        lcd_draw_dot(hwXpos + x, hwYpos - y, hwColor);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b298      	uxth	r0, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	88ba      	ldrh	r2, [r7, #4]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	883a      	ldrh	r2, [r7, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fda4 	bl	8000b04 <lcd_draw_dot>
        lcd_draw_dot(hwXpos - x, hwYpos - y, hwColor);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	b298      	uxth	r0, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	883a      	ldrh	r2, [r7, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd96 	bl	8000b04 <lcd_draw_dot>
        e2 = err;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dc13      	bgt.n	800100c <lcd_draw_circle+0xe4>
            err += ++ y * 2 + 1;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	3301      	adds	r3, #1
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) e2 = 0;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d105      	bne.n	800100c <lcd_draw_circle+0xe4>
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	dc01      	bgt.n	800100c <lcd_draw_circle+0xe4>
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
        }
        if(e2 > x) err += ++ x * 2 + 1;
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	dd08      	ble.n	8001026 <lcd_draw_circle+0xfe>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	3301      	adds	r3, #1
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
    } while(x <= 0);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b00      	cmp	r3, #0
 800102a:	dd9d      	ble.n	8000f68 <lcd_draw_circle+0x40>
 800102c:	e000      	b.n	8001030 <lcd_draw_circle+0x108>
		return;
 800102e:	bf00      	nop
}
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <lcd_fill_rect>:
	    hwColor: rectangle color
******************************************************************************/
void lcd_fill_rect(uint16_t hwXpos,
                   uint16_t hwYpos, uint16_t hwWidth,
                   uint16_t hwHeight,uint16_t hwColor)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	4604      	mov	r4, r0
 800103e:	4608      	mov	r0, r1
 8001040:	4611      	mov	r1, r2
 8001042:	461a      	mov	r2, r3
 8001044:	4623      	mov	r3, r4
 8001046:	80fb      	strh	r3, [r7, #6]
 8001048:	4603      	mov	r3, r0
 800104a:	80bb      	strh	r3, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2bef      	cmp	r3, #239	; 0xef
 8001058:	d824      	bhi.n	80010a4 <lcd_fill_rect+0x6e>
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001060:	d220      	bcs.n	80010a4 <lcd_fill_rect+0x6e>
		return;
	}

	for(i = 0; i < hwHeight; i ++){
 8001062:	2300      	movs	r3, #0
 8001064:	81fb      	strh	r3, [r7, #14]
 8001066:	e018      	b.n	800109a <lcd_fill_rect+0x64>
		for(j = 0; j < hwWidth; j ++){
 8001068:	2300      	movs	r3, #0
 800106a:	81bb      	strh	r3, [r7, #12]
 800106c:	e00e      	b.n	800108c <lcd_fill_rect+0x56>
			lcd_draw_dot(hwXpos + j, hwYpos + i, hwColor);
 800106e:	88fa      	ldrh	r2, [r7, #6]
 8001070:	89bb      	ldrh	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	b298      	uxth	r0, r3
 8001076:	88ba      	ldrh	r2, [r7, #4]
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	8c3a      	ldrh	r2, [r7, #32]
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd3f 	bl	8000b04 <lcd_draw_dot>
		for(j = 0; j < hwWidth; j ++){
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	81bb      	strh	r3, [r7, #12]
 800108c:	89ba      	ldrh	r2, [r7, #12]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3ec      	bcc.n	800106e <lcd_fill_rect+0x38>
	for(i = 0; i < hwHeight; i ++){
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	3301      	adds	r3, #1
 8001098:	81fb      	strh	r3, [r7, #14]
 800109a:	89fa      	ldrh	r2, [r7, #14]
 800109c:	883b      	ldrh	r3, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3e2      	bcc.n	8001068 <lcd_fill_rect+0x32>
 80010a2:	e000      	b.n	80010a6 <lcd_fill_rect+0x70>
		return;
 80010a4:	bf00      	nop
		}
	}
}
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}

080010ac <lcd_draw_v_line>:
	   hwHeight: line height
		hwColor: vertical linc color
******************************************************************************/
void lcd_draw_v_line(		uint16_t hwXpos,uint16_t hwYpos,
                        uint16_t hwHeight,uint16_t hwColor)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4623      	mov	r3, r4
 80010bc:	80fb      	strh	r3, [r7, #6]
 80010be:	4603      	mov	r3, r0
 80010c0:	80bb      	strh	r3, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]
 80010c6:	4613      	mov	r3, r2
 80010c8:	803b      	strh	r3, [r7, #0]
	uint16_t i, y1 = MIN(hwYpos + hwHeight, LCD_HEIGHT - 1);
 80010ca:	88ba      	ldrh	r2, [r7, #4]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	4413      	add	r3, r2
 80010d0:	f240 123f 	movw	r2, #319	; 0x13f
 80010d4:	4293      	cmp	r3, r2
 80010d6:	bfa8      	it	ge
 80010d8:	4613      	movge	r3, r2
 80010da:	81bb      	strh	r3, [r7, #12]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	2bef      	cmp	r3, #239	; 0xef
 80010e0:	d814      	bhi.n	800110c <lcd_draw_v_line+0x60>
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010e8:	d210      	bcs.n	800110c <lcd_draw_v_line+0x60>
		return;
	}

    for (i = hwYpos; i < y1; i ++) {
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	81fb      	strh	r3, [r7, #14]
 80010ee:	e008      	b.n	8001102 <lcd_draw_v_line+0x56>
        lcd_draw_dot(hwXpos, i, hwColor);
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	89f9      	ldrh	r1, [r7, #14]
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fd04 	bl	8000b04 <lcd_draw_dot>
    for (i = hwYpos; i < y1; i ++) {
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	3301      	adds	r3, #1
 8001100:	81fb      	strh	r3, [r7, #14]
 8001102:	89fa      	ldrh	r2, [r7, #14]
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3f2      	bcc.n	80010f0 <lcd_draw_v_line+0x44>
 800110a:	e000      	b.n	800110e <lcd_draw_v_line+0x62>
		return;
 800110c:	bf00      	nop
    }
}
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}

08001114 <lcd_draw_h_line>:
		hwWidth: line width
		hwColor: horizonal linc color
******************************************************************************/
void lcd_draw_h_line(		uint16_t hwXpos, uint16_t hwYpos,
                        uint16_t hwWidth,uint16_t hwColor)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4623      	mov	r3, r4
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	4603      	mov	r3, r0
 8001128:	80bb      	strh	r3, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
 800112e:	4613      	mov	r3, r2
 8001130:	803b      	strh	r3, [r7, #0]
	uint16_t i, x1 = MIN(hwXpos + hwWidth, LCD_WIDTH - 1);
 8001132:	88fa      	ldrh	r2, [r7, #6]
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	4413      	add	r3, r2
 8001138:	2bef      	cmp	r3, #239	; 0xef
 800113a:	bfa8      	it	ge
 800113c:	23ef      	movge	r3, #239	; 0xef
 800113e:	81bb      	strh	r3, [r7, #12]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	2bef      	cmp	r3, #239	; 0xef
 8001144:	d814      	bhi.n	8001170 <lcd_draw_h_line+0x5c>
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800114c:	d210      	bcs.n	8001170 <lcd_draw_h_line+0x5c>
		return;
	}

    for (i = hwXpos; i < x1; i ++) {
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	81fb      	strh	r3, [r7, #14]
 8001152:	e008      	b.n	8001166 <lcd_draw_h_line+0x52>
        lcd_draw_dot(i, hwYpos, hwColor);
 8001154:	883a      	ldrh	r2, [r7, #0]
 8001156:	88b9      	ldrh	r1, [r7, #4]
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fcd2 	bl	8000b04 <lcd_draw_dot>
    for (i = hwXpos; i < x1; i ++) {
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	3301      	adds	r3, #1
 8001164:	81fb      	strh	r3, [r7, #14]
 8001166:	89fa      	ldrh	r2, [r7, #14]
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3f2      	bcc.n	8001154 <lcd_draw_h_line+0x40>
 800116e:	e000      	b.n	8001172 <lcd_draw_h_line+0x5e>
		return;
 8001170:	bf00      	nop
    }
}
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <lcd_draw_rect>:
		hwColor: rectangle color
******************************************************************************/
void lcd_draw_rect(		uint16_t hwXpos,
                      uint16_t hwYpos,uint16_t hwWidth,
                      uint16_t hwHeight,uint16_t hwColor)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4604      	mov	r4, r0
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4623      	mov	r3, r4
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	4603      	mov	r3, r0
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
 8001192:	4613      	mov	r3, r2
 8001194:	803b      	strh	r3, [r7, #0]
	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2bef      	cmp	r3, #239	; 0xef
 800119a:	d824      	bhi.n	80011e6 <lcd_draw_rect+0x6e>
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011a2:	d220      	bcs.n	80011e6 <lcd_draw_rect+0x6e>
		return;
	}

	lcd_draw_h_line(hwXpos, hwYpos, hwWidth, hwColor);
 80011a4:	8b3b      	ldrh	r3, [r7, #24]
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	88b9      	ldrh	r1, [r7, #4]
 80011aa:	88f8      	ldrh	r0, [r7, #6]
 80011ac:	f7ff ffb2 	bl	8001114 <lcd_draw_h_line>
	lcd_draw_h_line(hwXpos, hwYpos + hwHeight, hwWidth, hwColor);
 80011b0:	88ba      	ldrh	r2, [r7, #4]
 80011b2:	883b      	ldrh	r3, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b299      	uxth	r1, r3
 80011b8:	8b3b      	ldrh	r3, [r7, #24]
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	88f8      	ldrh	r0, [r7, #6]
 80011be:	f7ff ffa9 	bl	8001114 <lcd_draw_h_line>
	lcd_draw_v_line(hwXpos, hwYpos, hwHeight, hwColor);
 80011c2:	8b3b      	ldrh	r3, [r7, #24]
 80011c4:	883a      	ldrh	r2, [r7, #0]
 80011c6:	88b9      	ldrh	r1, [r7, #4]
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	f7ff ff6f 	bl	80010ac <lcd_draw_v_line>
	lcd_draw_v_line(hwXpos + hwWidth, hwYpos, hwHeight + 1, hwColor);
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	b298      	uxth	r0, r3
 80011d6:	883b      	ldrh	r3, [r7, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	8b3b      	ldrh	r3, [r7, #24]
 80011de:	88b9      	ldrh	r1, [r7, #4]
 80011e0:	f7ff ff64 	bl	80010ac <lcd_draw_v_line>
 80011e4:	e000      	b.n	80011e8 <lcd_draw_rect+0x70>
		return;
 80011e6:	bf00      	nop
}
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09a      	sub	sp, #104	; 0x68
 80011f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f6:	f001 f9bf 	bl	8002578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fa:	f000 fc3b 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fe:	f000 fdd3 	bl	8001da8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001202:	f000 fc95 	bl	8001b30 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001206:	f000 fce5 	bl	8001bd4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800120a:	f000 fd17 	bl	8001c3c <MX_CAN2_Init>
  MX_TIM2_Init();
 800120e:	f000 fd7f 	bl	8001d10 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001212:	f000 fd47 	bl	8001ca4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001216:	48b2      	ldr	r0, [pc, #712]	; (80014e0 <main+0x2f0>)
 8001218:	f001 fa64 	bl	80026e4 <HAL_ADC_Start_IT>
  HAL_CAN_Start(&hcan1);
 800121c:	48b1      	ldr	r0, [pc, #708]	; (80014e4 <main+0x2f4>)
 800121e:	f001 ffc4 	bl	80031aa <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8001222:	48b1      	ldr	r0, [pc, #708]	; (80014e8 <main+0x2f8>)
 8001224:	f001 ffc1 	bl	80031aa <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001228:	2102      	movs	r1, #2
 800122a:	48ae      	ldr	r0, [pc, #696]	; (80014e4 <main+0x2f4>)
 800122c:	f002 f8dc 	bl	80033e8 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001230:	2102      	movs	r1, #2
 8001232:	48ad      	ldr	r0, [pc, #692]	; (80014e8 <main+0x2f8>)
 8001234:	f002 f8d8 	bl	80033e8 <HAL_CAN_ActivateNotification>

  HAL_TIM_Base_Start_IT(&htim2);
 8001238:	48ac      	ldr	r0, [pc, #688]	; (80014ec <main+0x2fc>)
 800123a:	f003 facf 	bl	80047dc <HAL_TIM_Base_Start_IT>

  lcd_init();
 800123e:	f7ff fb23 	bl	8000888 <lcd_init>
	lcd_display_string( 60,60,(uint8_t* )"CPU:STM32F405RGT6          ", FONT_1206, RED );
 8001242:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	230c      	movs	r3, #12
 800124a:	4aa9      	ldr	r2, [pc, #676]	; (80014f0 <main+0x300>)
 800124c:	213c      	movs	r1, #60	; 0x3c
 800124e:	203c      	movs	r0, #60	; 0x3c
 8001250:	f7ff fda4 	bl	8000d9c <lcd_display_string>
	lcd_display_string( 60,80,(uint8_t* )"www.WaveShare.net          ", FONT_1206, RED );
 8001254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	230c      	movs	r3, #12
 800125c:	4aa5      	ldr	r2, [pc, #660]	; (80014f4 <main+0x304>)
 800125e:	2150      	movs	r1, #80	; 0x50
 8001260:	203c      	movs	r0, #60	; 0x3c
 8001262:	f7ff fd9b 	bl	8000d9c <lcd_display_string>
	lcd_draw_line(80,150,120,180,BLACK);
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	23b4      	movs	r3, #180	; 0xb4
 800126c:	2278      	movs	r2, #120	; 0x78
 800126e:	2196      	movs	r1, #150	; 0x96
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f7ff fddf 	bl	8000e34 <lcd_draw_line>
	lcd_draw_circle(120,210,20,BLUE);
 8001276:	231f      	movs	r3, #31
 8001278:	2214      	movs	r2, #20
 800127a:	21d2      	movs	r1, #210	; 0xd2
 800127c:	2078      	movs	r0, #120	; 0x78
 800127e:	f7ff fe53 	bl	8000f28 <lcd_draw_circle>
	lcd_draw_rect(100,250,50,50,GREEN);
 8001282:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2332      	movs	r3, #50	; 0x32
 800128a:	2232      	movs	r2, #50	; 0x32
 800128c:	21fa      	movs	r1, #250	; 0xfa
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f7ff ff72 	bl	8001178 <lcd_draw_rect>
	lcd_fill_rect(30,220,50,50,RED);
 8001294:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2332      	movs	r3, #50	; 0x32
 800129c:	2232      	movs	r2, #50	; 0x32
 800129e:	21dc      	movs	r1, #220	; 0xdc
 80012a0:	201e      	movs	r0, #30
 80012a2:	f7ff fec8 	bl	8001036 <lcd_fill_rect>


  TxHeader.DLC = 8;
 80012a6:	4b94      	ldr	r3, [pc, #592]	; (80014f8 <main+0x308>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <main+0x308>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80012b2:	4b91      	ldr	r3, [pc, #580]	; (80014f8 <main+0x308>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x7A2;		//response ID
 80012b8:	4b8f      	ldr	r3, [pc, #572]	; (80014f8 <main+0x308>)
 80012ba:	f240 72a2 	movw	r2, #1954	; 0x7a2
 80012be:	601a      	str	r2, [r3, #0]

  TxHeader2.DLC = 8;
 80012c0:	4b8e      	ldr	r3, [pc, #568]	; (80014fc <main+0x30c>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	611a      	str	r2, [r3, #16]
  TxHeader2.IDE = CAN_ID_STD;
 80012c6:	4b8d      	ldr	r3, [pc, #564]	; (80014fc <main+0x30c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 80012cc:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <main+0x30c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x712;		//request ID
 80012d2:	4b8a      	ldr	r3, [pc, #552]	; (80014fc <main+0x30c>)
 80012d4:	f240 7212 	movw	r2, #1810	; 0x712
 80012d8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(time(NULL)); // Call for initialize random function
 80012da:	2000      	movs	r0, #0
 80012dc:	f003 ff50 	bl	8005180 <time>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4613      	mov	r3, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fedc 	bl	80050a4 <srand>
  set_timer0(1000);
 80012ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f0:	f000 fdf0 	bl	8001ed4 <set_timer0>

  //variable for ECU
  uint8_t 	service 		= 0x00;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t 	CANFrameType 	= 10;
 80012fa:	230a      	movs	r3, #10
 80012fc:	76fb      	strb	r3, [r7, #27]
  uint8_t 	frameDataLength = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	76bb      	strb	r3, [r7, #26]
  uint16_t 	totalDataLength = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	833b      	strh	r3, [r7, #24]
  uint8_t 	CAN_NPCI;
  uint16_t 	dataCount 		= 0;
 8001306:	2300      	movs	r3, #0
 8001308:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint8_t	dataStorage[NUM_OF_MAX_DATA_STORAGE];
  int 		currentIndex	= 0;
 800130c:	2300      	movs	r3, #0
 800130e:	65bb      	str	r3, [r7, #88]	; 0x58
  int		CF_sending_flag = 0; //flag indicate Consecutive Frame sending is not done
 8001310:	2300      	movs	r3, #0
 8001312:	657b      	str	r3, [r7, #84]	; 0x54
  int		s27state 		= 0;
 8001314:	2300      	movs	r3, #0
 8001316:	653b      	str	r3, [r7, #80]	; 0x50

  //variable for TESTER
  int 		joyPressed 		= 0; // flag for any joystick is pressed
 8001318:	2300      	movs	r3, #0
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t	dataToSend[6];
  int 		seedRequested	= 0;
 800131c:	2300      	movs	r3, #0
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  int		keySent			= 0;
 8001320:	2300      	movs	r3, #0
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t K12;
  uint8_t K34;
  uint8_t K56;
  uint8_t K78;

  int functionSelection = SERVICE_22;
 8001324:	2301      	movs	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/* ECU PART */
	if(dataflag){
 8001328:	4b75      	ldr	r3, [pc, #468]	; (8001500 <main+0x310>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8227 	beq.w	8001780 <main+0x590>
		dataflag = 0;
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <main+0x310>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
		CAN_NPCI = RxData[0]; //Frame type and Data length in CAN_TP
 8001338:	4b72      	ldr	r3, [pc, #456]	; (8001504 <main+0x314>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	74fb      	strb	r3, [r7, #19]
		CANFrameType = CAN_NPCI>>4;
 800133e:	7cfb      	ldrb	r3, [r7, #19]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	76fb      	strb	r3, [r7, #27]
		frameDataLength = CAN_NPCI<<4;
 8001344:	7cfb      	ldrb	r3, [r7, #19]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	76bb      	strb	r3, [r7, #26]
		frameDataLength = frameDataLength >>4;
 800134a:	7ebb      	ldrb	r3, [r7, #26]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	76bb      	strb	r3, [r7, #26]
		// check if single frame or not
		switch (CANFrameType){
 8001350:	7efb      	ldrb	r3, [r7, #27]
 8001352:	2b02      	cmp	r3, #2
 8001354:	f000 8083 	beq.w	800145e <main+0x26e>
 8001358:	2b02      	cmp	r3, #2
 800135a:	f300 80ef 	bgt.w	800153c <main+0x34c>
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <main+0x178>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d01a      	beq.n	800139c <main+0x1ac>
				TxHeader.DLC = 3;
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
			}
			break;
		default:
			break;
 8001366:	e0e9      	b.n	800153c <main+0x34c>
			for(int i = 0; i< frameDataLength; i++){
 8001368:	2300      	movs	r3, #0
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800136c:	e00c      	b.n	8001388 <main+0x198>
				dataStorage[i] = RxData[1+i];
 800136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001370:	3301      	adds	r3, #1
 8001372:	4a64      	ldr	r2, [pc, #400]	; (8001504 <main+0x314>)
 8001374:	5cd1      	ldrb	r1, [r2, r3]
 8001376:	f107 0208 	add.w	r2, r7, #8
 800137a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< frameDataLength; i++){
 8001382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001384:	3301      	adds	r3, #1
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001388:	7ebb      	ldrb	r3, [r7, #26]
 800138a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800138c:	429a      	cmp	r2, r3
 800138e:	dbee      	blt.n	800136e <main+0x17e>
			totalDataLength = frameDataLength;
 8001390:	7ebb      	ldrb	r3, [r7, #26]
 8001392:	833b      	strh	r3, [r7, #24]
			service = dataStorage[0];
 8001394:	7a3b      	ldrb	r3, [r7, #8]
 8001396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			break;
 800139a:	e0d2      	b.n	8001542 <main+0x352>
			CF_sending_flag = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	657b      	str	r3, [r7, #84]	; 0x54
			totalDataLength = frameDataLength;
 80013a0:	7ebb      	ldrb	r3, [r7, #26]
 80013a2:	833b      	strh	r3, [r7, #24]
			totalDataLength = totalDataLength << 8;
 80013a4:	8b3b      	ldrh	r3, [r7, #24]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	833b      	strh	r3, [r7, #24]
			totalDataLength = totalDataLength + RxData[1];
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <main+0x314>)
 80013ac:	785b      	ldrb	r3, [r3, #1]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	8b3b      	ldrh	r3, [r7, #24]
 80013b2:	4413      	add	r3, r2
 80013b4:	833b      	strh	r3, [r7, #24]
			dataCount = totalDataLength;
 80013b6:	8b3b      	ldrh	r3, [r7, #24]
 80013b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(dataCount >= 3){
 80013bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d918      	bls.n	80013f6 <main+0x206>
				for(currentIndex = 0; currentIndex<3; currentIndex++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80013c8:	e00c      	b.n	80013e4 <main+0x1f4>
					dataStorage[currentIndex] = RxData[currentIndex+2];
 80013ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013cc:	3302      	adds	r3, #2
 80013ce:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <main+0x314>)
 80013d0:	5cd1      	ldrb	r1, [r2, r3]
 80013d2:	f107 0208 	add.w	r2, r7, #8
 80013d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013d8:	4413      	add	r3, r2
 80013da:	460a      	mov	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
				for(currentIndex = 0; currentIndex<3; currentIndex++){
 80013de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e0:	3301      	adds	r3, #1
 80013e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80013e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	ddef      	ble.n	80013ca <main+0x1da>
				dataCount = dataCount-3;
 80013ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80013ee:	3b03      	subs	r3, #3
 80013f0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80013f4:	e017      	b.n	8001426 <main+0x236>
				for(int i = 0; i<dataCount; i++){
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80013fa:	e00c      	b.n	8001416 <main+0x226>
					dataStorage[currentIndex] = RxData[currentIndex+2];
 80013fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013fe:	3302      	adds	r3, #2
 8001400:	4a40      	ldr	r2, [pc, #256]	; (8001504 <main+0x314>)
 8001402:	5cd1      	ldrb	r1, [r2, r3]
 8001404:	f107 0208 	add.w	r2, r7, #8
 8001408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<dataCount; i++){
 8001410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001412:	3301      	adds	r3, #1
 8001414:	63bb      	str	r3, [r7, #56]	; 0x38
 8001416:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800141a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800141c:	429a      	cmp	r2, r3
 800141e:	dbed      	blt.n	80013fc <main+0x20c>
				dataCount = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			service = dataStorage[0];
 8001426:	7a3b      	ldrb	r3, [r7, #8]
 8001428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(dataCount == 0) CF_sending_flag = 0;
 800142c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <main+0x248>
 8001434:	2300      	movs	r3, #0
 8001436:	657b      	str	r3, [r7, #84]	; 0x54
			TxData[0] = 0x30; 	//FT: flow control, Frame State: continue to send
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <main+0x318>)
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x08;	//BS: max 8 CFs till next FC
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <main+0x318>)
 8001440:	2208      	movs	r2, #8
 8001442:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x19; 	//STmin: 25ms
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <main+0x318>)
 8001446:	2219      	movs	r2, #25
 8001448:	709a      	strb	r2, [r3, #2]
			TxHeader.DLC = 3;
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <main+0x308>)
 800144c:	2203      	movs	r2, #3
 800144e:	611a      	str	r2, [r3, #16]
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <main+0x31c>)
 8001452:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <main+0x318>)
 8001454:	4928      	ldr	r1, [pc, #160]	; (80014f8 <main+0x308>)
 8001456:	4823      	ldr	r0, [pc, #140]	; (80014e4 <main+0x2f4>)
 8001458:	f001 feeb 	bl	8003232 <HAL_CAN_AddTxMessage>
			break;
 800145c:	e071      	b.n	8001542 <main+0x352>
			if(dataCount >7){
 800145e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001462:	2b07      	cmp	r3, #7
 8001464:	d91a      	bls.n	800149c <main+0x2ac>
				for(int i = 0; i<7; i++){
 8001466:	2300      	movs	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
 800146a:	e00e      	b.n	800148a <main+0x29a>
					dataStorage[currentIndex++] = RxData[i+1];
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001472:	1c59      	adds	r1, r3, #1
 8001474:	65b9      	str	r1, [r7, #88]	; 0x58
 8001476:	4923      	ldr	r1, [pc, #140]	; (8001504 <main+0x314>)
 8001478:	5c8a      	ldrb	r2, [r1, r2]
 800147a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800147e:	440b      	add	r3, r1
 8001480:	f803 2c58 	strb.w	r2, [r3, #-88]
				for(int i = 0; i<7; i++){
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	3301      	adds	r3, #1
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
 800148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148c:	2b06      	cmp	r3, #6
 800148e:	dded      	ble.n	800146c <main+0x27c>
				dataCount = dataCount - 7;
 8001490:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001494:	3b07      	subs	r3, #7
 8001496:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800149a:	e019      	b.n	80014d0 <main+0x2e0>
				for(int i = 0; i<dataCount; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
 80014a0:	e00e      	b.n	80014c0 <main+0x2d0>
					dataStorage[currentIndex++] = RxData[i+1];
 80014a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80014ac:	4915      	ldr	r1, [pc, #84]	; (8001504 <main+0x314>)
 80014ae:	5c8a      	ldrb	r2, [r1, r2]
 80014b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80014b4:	440b      	add	r3, r1
 80014b6:	f803 2c58 	strb.w	r2, [r3, #-88]
				for(int i = 0; i<dataCount; i++){
 80014ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014bc:	3301      	adds	r3, #1
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
 80014c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80014c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbeb      	blt.n	80014a2 <main+0x2b2>
				dataCount = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(dataCount == 0) {
 80014d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11b      	bne.n	8001510 <main+0x320>
				CF_sending_flag = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	657b      	str	r3, [r7, #84]	; 0x54
				break;
 80014dc:	e031      	b.n	8001542 <main+0x352>
 80014de:	bf00      	nop
 80014e0:	2000014c 	.word	0x2000014c
 80014e4:	2000026c 	.word	0x2000026c
 80014e8:	20000194 	.word	0x20000194
 80014ec:	20000224 	.word	0x20000224
 80014f0:	08006184 	.word	0x08006184
 80014f4:	080061a0 	.word	0x080061a0
 80014f8:	20000294 	.word	0x20000294
 80014fc:	20000110 	.word	0x20000110
 8001500:	200000dc 	.word	0x200000dc
 8001504:	2000021c 	.word	0x2000021c
 8001508:	200000cc 	.word	0x200000cc
 800150c:	200001c0 	.word	0x200001c0
			if(frameDataLength == 0x08){
 8001510:	7ebb      	ldrb	r3, [r7, #26]
 8001512:	2b08      	cmp	r3, #8
 8001514:	d114      	bne.n	8001540 <main+0x350>
				TxData[0] = 0x30; 	//FT: flow control, Frame State: continue to send
 8001516:	4ba7      	ldr	r3, [pc, #668]	; (80017b4 <main+0x5c4>)
 8001518:	2230      	movs	r2, #48	; 0x30
 800151a:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x08;	//BS: max 8 CFs till next FC
 800151c:	4ba5      	ldr	r3, [pc, #660]	; (80017b4 <main+0x5c4>)
 800151e:	2208      	movs	r2, #8
 8001520:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x19; 	//STmin: 25ms
 8001522:	4ba4      	ldr	r3, [pc, #656]	; (80017b4 <main+0x5c4>)
 8001524:	2219      	movs	r2, #25
 8001526:	709a      	strb	r2, [r3, #2]
				TxHeader.DLC = 3;
 8001528:	4ba3      	ldr	r3, [pc, #652]	; (80017b8 <main+0x5c8>)
 800152a:	2203      	movs	r2, #3
 800152c:	611a      	str	r2, [r3, #16]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800152e:	4ba3      	ldr	r3, [pc, #652]	; (80017bc <main+0x5cc>)
 8001530:	4aa0      	ldr	r2, [pc, #640]	; (80017b4 <main+0x5c4>)
 8001532:	49a1      	ldr	r1, [pc, #644]	; (80017b8 <main+0x5c8>)
 8001534:	48a2      	ldr	r0, [pc, #648]	; (80017c0 <main+0x5d0>)
 8001536:	f001 fe7c 	bl	8003232 <HAL_CAN_AddTxMessage>
			break;
 800153a:	e001      	b.n	8001540 <main+0x350>
			break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <main+0x352>
			break;
 8001540:	bf00      	nop
		}

		// if all CFs is sent, do the function
		if(CF_sending_flag == 0){
 8001542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 811b 	bne.w	8001780 <main+0x590>
			switch (service) {
 800154a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800154e:	2b2e      	cmp	r3, #46	; 0x2e
 8001550:	d03c      	beq.n	80015cc <main+0x3dc>
 8001552:	2b2e      	cmp	r3, #46	; 0x2e
 8001554:	f300 8116 	bgt.w	8001784 <main+0x594>
 8001558:	2b22      	cmp	r3, #34	; 0x22
 800155a:	d002      	beq.n	8001562 <main+0x372>
 800155c:	2b27      	cmp	r3, #39	; 0x27
 800155e:	d053      	beq.n	8001608 <main+0x418>
							set_s27delay_timer();
						}
					}
					break;
				default:
					break;
 8001560:	e110      	b.n	8001784 <main+0x594>
					if(dataStorage[1] == 0xF0 && dataStorage[2] == 0x01){
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	2bf0      	cmp	r3, #240	; 0xf0
 8001566:	f040 810f 	bne.w	8001788 <main+0x598>
 800156a:	7abb      	ldrb	r3, [r7, #10]
 800156c:	2b01      	cmp	r3, #1
 800156e:	f040 810b 	bne.w	8001788 <main+0x598>
						TxData[0] = 0x07;	//single frame, data length 7
 8001572:	4b90      	ldr	r3, [pc, #576]	; (80017b4 <main+0x5c4>)
 8001574:	2207      	movs	r2, #7
 8001576:	701a      	strb	r2, [r3, #0]
						TxData[1] = 0x62; 	//positive response code
 8001578:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <main+0x5c4>)
 800157a:	2262      	movs	r2, #98	; 0x62
 800157c:	705a      	strb	r2, [r3, #1]
						TxData[2] = 0xF0;
 800157e:	4b8d      	ldr	r3, [pc, #564]	; (80017b4 <main+0x5c4>)
 8001580:	22f0      	movs	r2, #240	; 0xf0
 8001582:	709a      	strb	r2, [r3, #2]
						TxData[3] = 0x01;
 8001584:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <main+0x5c4>)
 8001586:	2201      	movs	r2, #1
 8001588:	70da      	strb	r2, [r3, #3]
						TxData[4] = ADCValue>>24;
 800158a:	4b8e      	ldr	r3, [pc, #568]	; (80017c4 <main+0x5d4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0e1b      	lsrs	r3, r3, #24
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <main+0x5c4>)
 8001594:	711a      	strb	r2, [r3, #4]
						TxData[5] = ADCValue>>16;
 8001596:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <main+0x5d4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b85      	ldr	r3, [pc, #532]	; (80017b4 <main+0x5c4>)
 80015a0:	715a      	strb	r2, [r3, #5]
						TxData[6] = ADCValue>>8;
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <main+0x5d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b82      	ldr	r3, [pc, #520]	; (80017b4 <main+0x5c4>)
 80015ac:	719a      	strb	r2, [r3, #6]
						TxData[7] = ADCValue;
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <main+0x5d4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <main+0x5c4>)
 80015b6:	71da      	strb	r2, [r3, #7]
						TxHeader.DLC = 8;
 80015b8:	4b7f      	ldr	r3, [pc, #508]	; (80017b8 <main+0x5c8>)
 80015ba:	2208      	movs	r2, #8
 80015bc:	611a      	str	r2, [r3, #16]
						HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <main+0x5cc>)
 80015c0:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <main+0x5c4>)
 80015c2:	497d      	ldr	r1, [pc, #500]	; (80017b8 <main+0x5c8>)
 80015c4:	487e      	ldr	r0, [pc, #504]	; (80017c0 <main+0x5d0>)
 80015c6:	f001 fe34 	bl	8003232 <HAL_CAN_AddTxMessage>
					break;
 80015ca:	e0dd      	b.n	8001788 <main+0x598>
					if(dataStorage[1] == 0xF0 && dataStorage[2] == 0x02){
 80015cc:	7a7b      	ldrb	r3, [r7, #9]
 80015ce:	2bf0      	cmp	r3, #240	; 0xf0
 80015d0:	f040 80dc 	bne.w	800178c <main+0x59c>
 80015d4:	7abb      	ldrb	r3, [r7, #10]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	f040 80d8 	bne.w	800178c <main+0x59c>
						TxData[0] = 0x03;	//single frame, data length 3
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <main+0x5c4>)
 80015de:	2203      	movs	r2, #3
 80015e0:	701a      	strb	r2, [r3, #0]
						TxData[1] = 0x6E; 	//positive response code
 80015e2:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <main+0x5c4>)
 80015e4:	226e      	movs	r2, #110	; 0x6e
 80015e6:	705a      	strb	r2, [r3, #1]
						TxData[2] = 0xF0;
 80015e8:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <main+0x5c4>)
 80015ea:	22f0      	movs	r2, #240	; 0xf0
 80015ec:	709a      	strb	r2, [r3, #2]
						TxData[3] = 0x02;
 80015ee:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <main+0x5c4>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	70da      	strb	r2, [r3, #3]
						TxHeader.DLC = 4;
 80015f4:	4b70      	ldr	r3, [pc, #448]	; (80017b8 <main+0x5c8>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	611a      	str	r2, [r3, #16]
						HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80015fa:	4b70      	ldr	r3, [pc, #448]	; (80017bc <main+0x5cc>)
 80015fc:	4a6d      	ldr	r2, [pc, #436]	; (80017b4 <main+0x5c4>)
 80015fe:	496e      	ldr	r1, [pc, #440]	; (80017b8 <main+0x5c8>)
 8001600:	486f      	ldr	r0, [pc, #444]	; (80017c0 <main+0x5d0>)
 8001602:	f001 fe16 	bl	8003232 <HAL_CAN_AddTxMessage>
					break;
 8001606:	e0c1      	b.n	800178c <main+0x59c>
					if(s27delayFlag) break;
 8001608:	4b6f      	ldr	r3, [pc, #444]	; (80017c8 <main+0x5d8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 80bf 	bne.w	8001790 <main+0x5a0>
					if(dataStorage[1] == 0x01)  {
 8001612:	7a7b      	ldrb	r3, [r7, #9]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d178      	bne.n	800170a <main+0x51a>
						s27state = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	653b      	str	r3, [r7, #80]	; 0x50
						TxData[0] = 0x06;
 800161c:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <main+0x5c4>)
 800161e:	2206      	movs	r2, #6
 8001620:	701a      	strb	r2, [r3, #0]
						TxData[1] = 0x67;
 8001622:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <main+0x5c4>)
 8001624:	2267      	movs	r2, #103	; 0x67
 8001626:	705a      	strb	r2, [r3, #1]
						TxData[2] = 0x01;
 8001628:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <main+0x5c4>)
 800162a:	2201      	movs	r2, #1
 800162c:	709a      	strb	r2, [r3, #2]
						TxData[3] = ((rand()-1) % 0xFF) + 1;
 800162e:	f003 fd67 	bl	8005100 <rand>
 8001632:	4603      	mov	r3, r0
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <main+0x5dc>)
 8001638:	fb83 1302 	smull	r1, r3, r3, r2
 800163c:	4413      	add	r3, r2
 800163e:	11d9      	asrs	r1, r3, #7
 8001640:	17d3      	asrs	r3, r2, #31
 8001642:	1ac9      	subs	r1, r1, r3
 8001644:	460b      	mov	r3, r1
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	1a5b      	subs	r3, r3, r1
 800164a:	1ad1      	subs	r1, r2, r3
 800164c:	b2cb      	uxtb	r3, r1
 800164e:	3301      	adds	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <main+0x5c4>)
 8001654:	70da      	strb	r2, [r3, #3]
						TxData[4] = ((rand()-1) % 0xFF) + 1;
 8001656:	f003 fd53 	bl	8005100 <rand>
 800165a:	4603      	mov	r3, r0
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <main+0x5dc>)
 8001660:	fb83 1302 	smull	r1, r3, r3, r2
 8001664:	4413      	add	r3, r2
 8001666:	11d9      	asrs	r1, r3, #7
 8001668:	17d3      	asrs	r3, r2, #31
 800166a:	1ac9      	subs	r1, r1, r3
 800166c:	460b      	mov	r3, r1
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	1a5b      	subs	r3, r3, r1
 8001672:	1ad1      	subs	r1, r2, r3
 8001674:	b2cb      	uxtb	r3, r1
 8001676:	3301      	adds	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <main+0x5c4>)
 800167c:	711a      	strb	r2, [r3, #4]
						TxData[5] = ((rand()-1) % 0xFF) + 1;
 800167e:	f003 fd3f 	bl	8005100 <rand>
 8001682:	4603      	mov	r3, r0
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	4b51      	ldr	r3, [pc, #324]	; (80017cc <main+0x5dc>)
 8001688:	fb83 1302 	smull	r1, r3, r3, r2
 800168c:	4413      	add	r3, r2
 800168e:	11d9      	asrs	r1, r3, #7
 8001690:	17d3      	asrs	r3, r2, #31
 8001692:	1ac9      	subs	r1, r1, r3
 8001694:	460b      	mov	r3, r1
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	1a5b      	subs	r3, r3, r1
 800169a:	1ad1      	subs	r1, r2, r3
 800169c:	b2cb      	uxtb	r3, r1
 800169e:	3301      	adds	r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <main+0x5c4>)
 80016a4:	715a      	strb	r2, [r3, #5]
						TxData[6] = ((rand()-1) % 0xFF) + 1;
 80016a6:	f003 fd2b 	bl	8005100 <rand>
 80016aa:	4603      	mov	r3, r0
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <main+0x5dc>)
 80016b0:	fb83 1302 	smull	r1, r3, r3, r2
 80016b4:	4413      	add	r3, r2
 80016b6:	11d9      	asrs	r1, r3, #7
 80016b8:	17d3      	asrs	r3, r2, #31
 80016ba:	1ac9      	subs	r1, r1, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	1a5b      	subs	r3, r3, r1
 80016c2:	1ad1      	subs	r1, r2, r3
 80016c4:	b2cb      	uxtb	r3, r1
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <main+0x5c4>)
 80016cc:	719a      	strb	r2, [r3, #6]
						TxHeader.DLC = 7;
 80016ce:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <main+0x5c8>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	611a      	str	r2, [r3, #16]
						HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <main+0x5cc>)
 80016d6:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <main+0x5c4>)
 80016d8:	4937      	ldr	r1, [pc, #220]	; (80017b8 <main+0x5c8>)
 80016da:	4839      	ldr	r0, [pc, #228]	; (80017c0 <main+0x5d0>)
 80016dc:	f001 fda9 	bl	8003232 <HAL_CAN_AddTxMessage>
						K12 = TxData[3] + 1;
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <main+0x5c4>)
 80016e2:	78db      	ldrb	r3, [r3, #3]
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						K34 = TxData[4] + 1;
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <main+0x5c4>)
 80016ec:	791b      	ldrb	r3, [r3, #4]
 80016ee:	3301      	adds	r3, #1
 80016f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						K56 = TxData[5] + 1;
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <main+0x5c4>)
 80016f6:	795b      	ldrb	r3, [r3, #5]
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						K78 = TxData[6] + 1;
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <main+0x5c4>)
 8001700:	799b      	ldrb	r3, [r3, #6]
 8001702:	3301      	adds	r3, #1
 8001704:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					break;
 8001708:	e044      	b.n	8001794 <main+0x5a4>
					else if(dataStorage[1]==0x02 && s27state == 1){
 800170a:	7a7b      	ldrb	r3, [r7, #9]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d141      	bne.n	8001794 <main+0x5a4>
 8001710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001712:	2b01      	cmp	r3, #1
 8001714:	d13e      	bne.n	8001794 <main+0x5a4>
						s27state = 2;
 8001716:	2302      	movs	r3, #2
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
						if((RxData[3] == K12 && RxData[4] == K34)
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <main+0x5e0>)
 800171c:	78db      	ldrb	r3, [r3, #3]
 800171e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001722:	429a      	cmp	r2, r3
 8001724:	d129      	bne.n	800177a <main+0x58a>
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <main+0x5e0>)
 8001728:	791b      	ldrb	r3, [r3, #4]
 800172a:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800172e:	429a      	cmp	r2, r3
 8001730:	d123      	bne.n	800177a <main+0x58a>
							&& (RxData[5] == K56 && RxData[6] == K78)){
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <main+0x5e0>)
 8001734:	795b      	ldrb	r3, [r3, #5]
 8001736:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800173a:	429a      	cmp	r2, r3
 800173c:	d11d      	bne.n	800177a <main+0x58a>
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <main+0x5e0>)
 8001740:	799b      	ldrb	r3, [r3, #6]
 8001742:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001746:	429a      	cmp	r2, r3
 8001748:	d117      	bne.n	800177a <main+0x58a>
							TxData[0] = 0x02;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <main+0x5c4>)
 800174c:	2202      	movs	r2, #2
 800174e:	701a      	strb	r2, [r3, #0]
							TxData[0] = 0x67;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <main+0x5c4>)
 8001752:	2267      	movs	r2, #103	; 0x67
 8001754:	701a      	strb	r2, [r3, #0]
							TxData[1] = 0x02;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <main+0x5c4>)
 8001758:	2202      	movs	r2, #2
 800175a:	705a      	strb	r2, [r3, #1]
							TxHeader.DLC = 3;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <main+0x5c8>)
 800175e:	2203      	movs	r2, #3
 8001760:	611a      	str	r2, [r3, #16]
							HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <main+0x5cc>)
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <main+0x5c4>)
 8001766:	4914      	ldr	r1, [pc, #80]	; (80017b8 <main+0x5c8>)
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <main+0x5d0>)
 800176a:	f001 fd62 	bl	8003232 <HAL_CAN_AddTxMessage>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2101      	movs	r1, #1
 8001772:	4818      	ldr	r0, [pc, #96]	; (80017d4 <main+0x5e4>)
 8001774:	f002 f924 	bl	80039c0 <HAL_GPIO_WritePin>
					break;
 8001778:	e00c      	b.n	8001794 <main+0x5a4>
							set_s27delay_timer();
 800177a:	f000 fb99 	bl	8001eb0 <set_s27delay_timer>
					break;
 800177e:	e009      	b.n	8001794 <main+0x5a4>
			}
		}
 8001780:	bf00      	nop
 8001782:	e008      	b.n	8001796 <main+0x5a6>
					break;
 8001784:	bf00      	nop
 8001786:	e006      	b.n	8001796 <main+0x5a6>
					break;
 8001788:	bf00      	nop
 800178a:	e004      	b.n	8001796 <main+0x5a6>
					break;
 800178c:	bf00      	nop
 800178e:	e002      	b.n	8001796 <main+0x5a6>
					if(s27delayFlag) break;
 8001790:	bf00      	nop
 8001792:	e000      	b.n	8001796 <main+0x5a6>
					break;
 8001794:	bf00      	nop
	}

	/* TESTER PART */
	switch (functionSelection) {
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d065      	beq.n	8001868 <main+0x678>
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	f300 814b 	bgt.w	8001a3a <main+0x84a>
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d016      	beq.n	80017d8 <main+0x5e8>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	f000 80ef 	beq.w	8001990 <main+0x7a0>
					keySent = 0;
				}
			}
			break;
		default:
			break;
 80017b2:	e142      	b.n	8001a3a <main+0x84a>
 80017b4:	200000cc 	.word	0x200000cc
 80017b8:	20000294 	.word	0x20000294
 80017bc:	200001c0 	.word	0x200001c0
 80017c0:	2000026c 	.word	0x2000026c
 80017c4:	200000e4 	.word	0x200000e4
 80017c8:	200000e8 	.word	0x200000e8
 80017cc:	80808081 	.word	0x80808081
 80017d0:	2000021c 	.word	0x2000021c
 80017d4:	40020400 	.word	0x40020400
			if(timer0Flag){
 80017d8:	4b9e      	ldr	r3, [pc, #632]	; (8001a54 <main+0x864>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d018      	beq.n	8001812 <main+0x622>
				set_timer0(1000);
 80017e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e4:	f000 fb76 	bl	8001ed4 <set_timer0>
				TxData2[0] = 0x03;
 80017e8:	4b9b      	ldr	r3, [pc, #620]	; (8001a58 <main+0x868>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	701a      	strb	r2, [r3, #0]
				TxData2[1] = 0x22;
 80017ee:	4b9a      	ldr	r3, [pc, #616]	; (8001a58 <main+0x868>)
 80017f0:	2222      	movs	r2, #34	; 0x22
 80017f2:	705a      	strb	r2, [r3, #1]
				TxData2[2] = 0xF0;
 80017f4:	4b98      	ldr	r3, [pc, #608]	; (8001a58 <main+0x868>)
 80017f6:	22f0      	movs	r2, #240	; 0xf0
 80017f8:	709a      	strb	r2, [r3, #2]
				TxData2[3] = 0x01;
 80017fa:	4b97      	ldr	r3, [pc, #604]	; (8001a58 <main+0x868>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	70da      	strb	r2, [r3, #3]
				TxHeader2.DLC = 4;
 8001800:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <main+0x86c>)
 8001802:	2204      	movs	r2, #4
 8001804:	611a      	str	r2, [r3, #16]
				HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 8001806:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <main+0x870>)
 8001808:	4a93      	ldr	r2, [pc, #588]	; (8001a58 <main+0x868>)
 800180a:	4994      	ldr	r1, [pc, #592]	; (8001a5c <main+0x86c>)
 800180c:	4895      	ldr	r0, [pc, #596]	; (8001a64 <main+0x874>)
 800180e:	f001 fd10 	bl	8003232 <HAL_CAN_AddTxMessage>
			if(dataflag2){
 8001812:	4b95      	ldr	r3, [pc, #596]	; (8001a68 <main+0x878>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8111 	beq.w	8001a3e <main+0x84e>
				dataflag2 = 0;
 800181c:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <main+0x878>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
				if(RxData2[0]>>4 != 0x00) break;
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <main+0x87c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8109 	bne.w	8001a42 <main+0x852>
				if(RxData2[1] != 0x62) break;
 8001830:	4b8e      	ldr	r3, [pc, #568]	; (8001a6c <main+0x87c>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	2b62      	cmp	r3, #98	; 0x62
 8001836:	f040 8106 	bne.w	8001a46 <main+0x856>
				uint32_t receivedAdcValue = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(int i = 0; i<4; i++){
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
 8001842:	e00d      	b.n	8001860 <main+0x670>
					receivedAdcValue = receivedAdcValue << 2;
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
					receivedAdcValue = receivedAdcValue + RxData2[i+4];
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	3304      	adds	r3, #4
 800184e:	4a87      	ldr	r2, [pc, #540]	; (8001a6c <main+0x87c>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	461a      	mov	r2, r3
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	4413      	add	r3, r2
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(int i = 0; i<4; i++){
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	3301      	adds	r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	2b03      	cmp	r3, #3
 8001864:	ddee      	ble.n	8001844 <main+0x654>
			break;
 8001866:	e0ea      	b.n	8001a3e <main+0x84e>
			if(is_joy_pressed(JOY_CTR)){
 8001868:	2000      	movs	r0, #0
 800186a:	f7fe fe7d 	bl	8000568 <is_joy_pressed>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00f      	beq.n	8001894 <main+0x6a4>
				joyPressed = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
				for(int i = 0; i < 6; i++){
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
 800187c:	e007      	b.n	800188e <main+0x69e>
					dataToSend[i]= 0x00;
 800187e:	463a      	mov	r2, r7
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	4413      	add	r3, r2
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 6; i++){
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3301      	adds	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	2b05      	cmp	r3, #5
 8001892:	ddf4      	ble.n	800187e <main+0x68e>
			if(is_joy_pressed(JOY_LEFT)){
 8001894:	2001      	movs	r0, #1
 8001896:	f7fe fe67 	bl	8000568 <is_joy_pressed>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00f      	beq.n	80018c0 <main+0x6d0>
				joyPressed = 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
				for(int i = 0; i < 6; i++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	e007      	b.n	80018ba <main+0x6ca>
					dataToSend[i]= 0xAA;
 80018aa:	463a      	mov	r2, r7
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	4413      	add	r3, r2
 80018b0:	22aa      	movs	r2, #170	; 0xaa
 80018b2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 6; i++){
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	3301      	adds	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	ddf4      	ble.n	80018aa <main+0x6ba>
			if(is_joy_pressed(JOY_RIGHT)){
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7fe fe51 	bl	8000568 <is_joy_pressed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00f      	beq.n	80018ec <main+0x6fc>
				joyPressed = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
				for(int i = 0; i < 6; i++){
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	e007      	b.n	80018e6 <main+0x6f6>
					dataToSend[i]= 0xFF;
 80018d6:	463a      	mov	r2, r7
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 6; i++){
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	ddf4      	ble.n	80018d6 <main+0x6e6>
			if(joyPressed){
 80018ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80ab 	beq.w	8001a4a <main+0x85a>
				joyPressed = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	; 0x4c
				TxData2[0] = 0x10;
 80018f8:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <main+0x868>)
 80018fa:	2210      	movs	r2, #16
 80018fc:	701a      	strb	r2, [r3, #0]
				TxData2[1] = 0x09;
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <main+0x868>)
 8001900:	2209      	movs	r2, #9
 8001902:	705a      	strb	r2, [r3, #1]
				TxData2[2] = 0x2E;	//service ID
 8001904:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <main+0x868>)
 8001906:	222e      	movs	r2, #46	; 0x2e
 8001908:	709a      	strb	r2, [r3, #2]
				TxData2[3] = 0xF0;
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <main+0x868>)
 800190c:	22f0      	movs	r2, #240	; 0xf0
 800190e:	70da      	strb	r2, [r3, #3]
				TxData2[4] = 0x02;
 8001910:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <main+0x868>)
 8001912:	2202      	movs	r2, #2
 8001914:	711a      	strb	r2, [r3, #4]
				TxData2[5] = dataToSend[0];
 8001916:	783a      	ldrb	r2, [r7, #0]
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <main+0x868>)
 800191a:	715a      	strb	r2, [r3, #5]
				TxData2[6] = dataToSend[1];
 800191c:	787a      	ldrb	r2, [r7, #1]
 800191e:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <main+0x868>)
 8001920:	719a      	strb	r2, [r3, #6]
				TxData2[7] = dataToSend[2];
 8001922:	78ba      	ldrb	r2, [r7, #2]
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <main+0x868>)
 8001926:	71da      	strb	r2, [r3, #7]
				TxHeader2.DLC = 8;
 8001928:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <main+0x86c>)
 800192a:	2208      	movs	r2, #8
 800192c:	611a      	str	r2, [r3, #16]
				HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <main+0x870>)
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <main+0x868>)
 8001932:	494a      	ldr	r1, [pc, #296]	; (8001a5c <main+0x86c>)
 8001934:	484b      	ldr	r0, [pc, #300]	; (8001a64 <main+0x874>)
 8001936:	f001 fc7c 	bl	8003232 <HAL_CAN_AddTxMessage>
				set_timer1(5000); // timeout 5s
 800193a:	f241 3088 	movw	r0, #5000	; 0x1388
 800193e:	f000 fae5 	bl	8001f0c <set_timer1>
				while(dataflag2 == 0 && timer1Flag == 0){}
 8001942:	bf00      	nop
 8001944:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <main+0x878>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <main+0x764>
 800194c:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <main+0x880>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f7      	beq.n	8001944 <main+0x754>
				if(timer1Flag){
 8001954:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <main+0x880>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <main+0x774>
					timer1Flag = 0;
 800195c:	4b44      	ldr	r3, [pc, #272]	; (8001a70 <main+0x880>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
					break;
 8001962:	e075      	b.n	8001a50 <main+0x860>
				TxData2[0] = 0x21;
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <main+0x868>)
 8001966:	2221      	movs	r2, #33	; 0x21
 8001968:	701a      	strb	r2, [r3, #0]
				TxData2[1] = dataToSend[3];
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <main+0x868>)
 800196e:	705a      	strb	r2, [r3, #1]
				TxData2[2] = dataToSend[4];
 8001970:	793a      	ldrb	r2, [r7, #4]
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <main+0x868>)
 8001974:	709a      	strb	r2, [r3, #2]
				TxData2[3] = dataToSend[5];
 8001976:	797a      	ldrb	r2, [r7, #5]
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <main+0x868>)
 800197a:	70da      	strb	r2, [r3, #3]
				TxHeader2.DLC = 4;
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <main+0x86c>)
 800197e:	2204      	movs	r2, #4
 8001980:	611a      	str	r2, [r3, #16]
				HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <main+0x870>)
 8001984:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <main+0x868>)
 8001986:	4935      	ldr	r1, [pc, #212]	; (8001a5c <main+0x86c>)
 8001988:	4836      	ldr	r0, [pc, #216]	; (8001a64 <main+0x874>)
 800198a:	f001 fc52 	bl	8003232 <HAL_CAN_AddTxMessage>
			break;
 800198e:	e05c      	b.n	8001a4a <main+0x85a>
			if(!seedRequested){
 8001990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001992:	2b00      	cmp	r3, #0
 8001994:	d114      	bne.n	80019c0 <main+0x7d0>
				TxData2[0] = 0x02;
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <main+0x868>)
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
				TxData2[1] = 0x27;
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <main+0x868>)
 800199e:	2227      	movs	r2, #39	; 0x27
 80019a0:	705a      	strb	r2, [r3, #1]
				TxData2[2] = 0x01;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <main+0x868>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	709a      	strb	r2, [r3, #2]
				TxHeader2.DLC = 3;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <main+0x86c>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	611a      	str	r2, [r3, #16]
				HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <main+0x870>)
 80019b0:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <main+0x868>)
 80019b2:	492a      	ldr	r1, [pc, #168]	; (8001a5c <main+0x86c>)
 80019b4:	482b      	ldr	r0, [pc, #172]	; (8001a64 <main+0x874>)
 80019b6:	f001 fc3c 	bl	8003232 <HAL_CAN_AddTxMessage>
				seedRequested = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
			break;
 80019be:	e046      	b.n	8001a4e <main+0x85e>
			}else if(!keySent){
 80019c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d130      	bne.n	8001a28 <main+0x838>
				if(dataflag2){
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <main+0x878>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03f      	beq.n	8001a4e <main+0x85e>
					TxData2[0] = 0x06;
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <main+0x868>)
 80019d0:	2206      	movs	r2, #6
 80019d2:	701a      	strb	r2, [r3, #0]
					TxData2[1] = 0x22;
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <main+0x868>)
 80019d6:	2222      	movs	r2, #34	; 0x22
 80019d8:	705a      	strb	r2, [r3, #1]
					TxData2[2] = 0x02;
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <main+0x868>)
 80019dc:	2202      	movs	r2, #2
 80019de:	709a      	strb	r2, [r3, #2]
					TxData2[3] = RxData2[3] + 1;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <main+0x87c>)
 80019e2:	78db      	ldrb	r3, [r3, #3]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <main+0x868>)
 80019ea:	70da      	strb	r2, [r3, #3]
					TxData2[4] = RxData2[4] + 1;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <main+0x87c>)
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <main+0x868>)
 80019f6:	711a      	strb	r2, [r3, #4]
					TxData2[5] = RxData2[5] + 1;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <main+0x87c>)
 80019fa:	795b      	ldrb	r3, [r3, #5]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <main+0x868>)
 8001a02:	715a      	strb	r2, [r3, #5]
					TxData2[6] = RxData2[6] + 1;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <main+0x87c>)
 8001a06:	799b      	ldrb	r3, [r3, #6]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <main+0x868>)
 8001a0e:	719a      	strb	r2, [r3, #6]
					TxHeader2.DLC = 7;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <main+0x86c>)
 8001a12:	2207      	movs	r2, #7
 8001a14:	611a      	str	r2, [r3, #16]
					HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2);
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <main+0x870>)
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <main+0x868>)
 8001a1a:	4910      	ldr	r1, [pc, #64]	; (8001a5c <main+0x86c>)
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <main+0x874>)
 8001a1e:	f001 fc08 	bl	8003232 <HAL_CAN_AddTxMessage>
					keySent = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8001a26:	e012      	b.n	8001a4e <main+0x85e>
				if(dataflag2){
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <main+0x878>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00e      	beq.n	8001a4e <main+0x85e>
					seedRequested = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
					keySent = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8001a38:	e009      	b.n	8001a4e <main+0x85e>
			break;
 8001a3a:	bf00      	nop
 8001a3c:	e474      	b.n	8001328 <main+0x138>
			break;
 8001a3e:	bf00      	nop
 8001a40:	e472      	b.n	8001328 <main+0x138>
				if(RxData2[0]>>4 != 0x00) break;
 8001a42:	bf00      	nop
 8001a44:	e470      	b.n	8001328 <main+0x138>
				if(RxData2[1] != 0x62) break;
 8001a46:	bf00      	nop
 8001a48:	e46e      	b.n	8001328 <main+0x138>
			break;
 8001a4a:	bf00      	nop
 8001a4c:	e46c      	b.n	8001328 <main+0x138>
			break;
 8001a4e:	bf00      	nop
	if(dataflag){
 8001a50:	e46a      	b.n	8001328 <main+0x138>
 8001a52:	bf00      	nop
 8001a54:	200000f0 	.word	0x200000f0
 8001a58:	200000d4 	.word	0x200000d4
 8001a5c:	20000110 	.word	0x20000110
 8001a60:	200001bc 	.word	0x200001bc
 8001a64:	20000194 	.word	0x20000194
 8001a68:	200000e0 	.word	0x200000e0
 8001a6c:	20000128 	.word	0x20000128
 8001a70:	200000f8 	.word	0x200000f8

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b094      	sub	sp, #80	; 0x50
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	2230      	movs	r2, #48	; 0x30
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fb06 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <SystemClock_Config+0xb4>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <SystemClock_Config+0xb4>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <SystemClock_Config+0xb4>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <SystemClock_Config+0xb8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <SystemClock_Config+0xb8>)
 8001abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <SystemClock_Config+0xb8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f001 ff85 	bl	80039f4 <HAL_RCC_OscConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001af0:	f000 f9d8 	bl	8001ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af4:	230f      	movs	r3, #15
 8001af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f9e8 	bl	8003ee4 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b1a:	f000 f9c3 	bl	8001ea4 <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	; 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40007000 	.word	0x40007000

08001b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b36:	463b      	mov	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <MX_ADC1_Init+0x9c>)
 8001b46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b70:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <MX_ADC1_Init+0xa0>)
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001b90:	f000 fd64 	bl	800265c <HAL_ADC_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f000 f983 	bl	8001ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b9e:	230d      	movs	r3, #13
 8001ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_ADC1_Init+0x98>)
 8001bb0:	f000 ffd8 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001bba:	f000 f973 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000014c 	.word	0x2000014c
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	0f000001 	.word	0x0f000001

08001bd4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <MX_CAN1_Init+0x64>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001be0:	2210      	movs	r2, #16
 8001be2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_CAN1_Init+0x60>)
 8001c22:	f001 f9c7 	bl	8002fb4 <HAL_CAN_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001c2c:	f000 f93a 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000026c 	.word	0x2000026c
 8001c38:	40006400 	.word	0x40006400

08001c3c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <MX_CAN2_Init+0x64>)
 8001c44:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c48:	2210      	movs	r2, #16
 8001c4a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_CAN2_Init+0x60>)
 8001c8a:	f001 f993 	bl	8002fb4 <HAL_CAN_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001c94:	f000 f906 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000194 	.word	0x20000194
 8001ca0:	40006800 	.word	0x40006800

08001ca4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <MX_SPI1_Init+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cd8:	2228      	movs	r2, #40	; 0x28
 8001cda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cf0:	220a      	movs	r2, #10
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cf4:	4804      	ldr	r0, [pc, #16]	; (8001d08 <MX_SPI1_Init+0x64>)
 8001cf6:	f002 fa91 	bl	800421c <HAL_SPI_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d00:	f000 f8d0 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200001c4 	.word	0x200001c4
 8001d0c:	40013000 	.word	0x40013000

08001d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	463b      	mov	r3, r7
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d36:	220f      	movs	r2, #15
 8001d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d42:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d56:	f002 fcf1 	bl	800473c <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d60:	f000 f8a0 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d72:	f002 feab 	bl	8004acc <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d7c:	f000 f892 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d8e:	f003 f8c7 	bl	8004f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 f884 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000224 	.word	0x20000224

08001da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f240 1185 	movw	r1, #389	; 0x185
 8001e18:	4812      	ldr	r0, [pc, #72]	; (8001e64 <MX_GPIO_Init+0xbc>)
 8001e1a:	f001 fdd1 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_CTR_Pin JOY_A_Pin JOY_B_Pin JOY_C_Pin
                           JOY_D_Pin */
  GPIO_InitStruct.Pin = JOY_CTR_Pin|JOY_A_Pin|JOY_B_Pin|JOY_C_Pin
 8001e1e:	f242 03f0 	movw	r3, #8432	; 0x20f0
 8001e22:	60fb      	str	r3, [r7, #12]
                          |JOY_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_GPIO_Init+0xc0>)
 8001e34:	f001 fc10 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8;
 8001e38:	f240 1385 	movw	r3, #389	; 0x185
 8001e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_GPIO_Init+0xbc>)
 8001e52:	f001 fc01 	bl	8003658 <HAL_GPIO_Init>

}
 8001e56:	bf00      	nop
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800

08001e6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	get_joystick();
 8001e74:	f7fe fb92 	bl	800059c <get_joystick>
	timer_run();
 8001e78:	f000 f864 	bl	8001f44 <timer_run>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	ADCValue = HAL_ADC_GetValue(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fe48 	bl	8002b22 <HAL_ADC_GetValue>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a02      	ldr	r2, [pc, #8]	; (8001ea0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200000e4 	.word	0x200000e4

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eac:	e7fe      	b.n	8001eac <Error_Handler+0x8>
	...

08001eb0 <set_s27delay_timer>:
int timer0Count = 0;

int timer1Flag = 0;
int timer1Count = 0;

void set_s27delay_timer(){
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	s27delayFlag = 1;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <set_s27delay_timer+0x1c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
	s27delayCount = 1000; //10 second
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <set_s27delay_timer+0x20>)
 8001ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec0:	601a      	str	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	200000e8 	.word	0x200000e8
 8001ed0:	200000ec 	.word	0x200000ec

08001ed4 <set_timer0>:

void set_timer0(int milisecond){
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	timer0Flag = 0;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <set_timer0+0x2c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
	timer0Count = milisecond/TIMER_CYCLE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <set_timer0+0x30>)
 8001ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eea:	1092      	asrs	r2, r2, #2
 8001eec:	17db      	asrs	r3, r3, #31
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <set_timer0+0x34>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	200000f0 	.word	0x200000f0
 8001f04:	66666667 	.word	0x66666667
 8001f08:	200000f4 	.word	0x200000f4

08001f0c <set_timer1>:

void set_timer1(int milisecond){
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	timer1Flag = 0;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <set_timer1+0x2c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
	timer1Count = milisecond/TIMER_CYCLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <set_timer1+0x30>)
 8001f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f22:	1092      	asrs	r2, r2, #2
 8001f24:	17db      	asrs	r3, r3, #31
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <set_timer1+0x34>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	200000f8 	.word	0x200000f8
 8001f3c:	66666667 	.word	0x66666667
 8001f40:	200000fc 	.word	0x200000fc

08001f44 <timer_run>:

void timer_run(){
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	s27delayCount--;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <timer_run+0x58>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <timer_run+0x58>)
 8001f50:	6013      	str	r3, [r2, #0]
	if(s27delayCount <= 0){
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <timer_run+0x58>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	dc02      	bgt.n	8001f60 <timer_run+0x1c>
		s27delayFlag = 0;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <timer_run+0x5c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
	}

	timer0Count--;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <timer_run+0x60>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <timer_run+0x60>)
 8001f68:	6013      	str	r3, [r2, #0]
	if(timer0Count <= 0){
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <timer_run+0x60>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dc02      	bgt.n	8001f78 <timer_run+0x34>
		timer0Flag = 1;
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <timer_run+0x64>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
	}

	timer1Count--;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <timer_run+0x68>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <timer_run+0x68>)
 8001f80:	6013      	str	r3, [r2, #0]
	if(timer1Count <= 0){
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <timer_run+0x68>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dc02      	bgt.n	8001f90 <timer_run+0x4c>
		timer1Flag = 1;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <timer_run+0x6c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
	}
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200000ec 	.word	0x200000ec
 8001fa0:	200000e8 	.word	0x200000e8
 8001fa4:	200000f4 	.word	0x200000f4
 8001fa8:	200000f0 	.word	0x200000f0
 8001fac:	200000fc 	.word	0x200000fc
 8001fb0:	200000f8 	.word	0x200000f8

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_ADC_MspInit+0x8c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12f      	bne.n	8002086 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_ADC_MspInit+0x90>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_ADC_MspInit+0x90>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_ADC_MspInit+0x90>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_ADC_MspInit+0x90>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <HAL_ADC_MspInit+0x90>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_ADC_MspInit+0x90>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800205e:	2308      	movs	r3, #8
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <HAL_ADC_MspInit+0x94>)
 8002072:	f001 faf1 	bl	8003658 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2012      	movs	r0, #18
 800207c:	f001 fab5 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002080:	2012      	movs	r0, #18
 8002082:	f001 face 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40012000 	.word	0x40012000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020800 	.word	0x40020800

0800209c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	; 0x30
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a42      	ldr	r2, [pc, #264]	; (80021c4 <HAL_CAN_MspInit+0x128>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d136      	bne.n	800212c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020be:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_CAN_MspInit+0x12c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_CAN_MspInit+0x12c>)
 80020c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_CAN_MspInit+0x12c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10d      	bne.n	80020ec <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_CAN_MspInit+0x130>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <HAL_CAN_MspInit+0x130>)
 80020da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_CAN_MspInit+0x130>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_CAN_MspInit+0x130>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a35      	ldr	r2, [pc, #212]	; (80021cc <HAL_CAN_MspInit+0x130>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6313      	str	r3, [r2, #48]	; 0x30
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_CAN_MspInit+0x130>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002108:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002112:	2301      	movs	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800211a:	2309      	movs	r3, #9
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	482a      	ldr	r0, [pc, #168]	; (80021d0 <HAL_CAN_MspInit+0x134>)
 8002126:	f001 fa97 	bl	8003658 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800212a:	e047      	b.n	80021bc <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_CAN_MspInit+0x138>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d142      	bne.n	80021bc <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_CAN_MspInit+0x130>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <HAL_CAN_MspInit+0x130>)
 8002140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_CAN_MspInit+0x130>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_CAN_MspInit+0x12c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_CAN_MspInit+0x12c>)
 800215a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_CAN_MspInit+0x12c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10d      	bne.n	8002180 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_CAN_MspInit+0x130>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_CAN_MspInit+0x130>)
 800216e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002172:	6413      	str	r3, [r2, #64]	; 0x40
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_CAN_MspInit+0x130>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_CAN_MspInit+0x130>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_CAN_MspInit+0x130>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6313      	str	r3, [r2, #48]	; 0x30
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_CAN_MspInit+0x130>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800219c:	2360      	movs	r3, #96	; 0x60
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80021ac:	2309      	movs	r3, #9
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4619      	mov	r1, r3
 80021b6:	4808      	ldr	r0, [pc, #32]	; (80021d8 <HAL_CAN_MspInit+0x13c>)
 80021b8:	f001 fa4e 	bl	8003658 <HAL_GPIO_Init>
}
 80021bc:	bf00      	nop
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40006400 	.word	0x40006400
 80021c8:	20000100 	.word	0x20000100
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40006800 	.word	0x40006800
 80021d8:	40020400 	.word	0x40020400

080021dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <HAL_SPI_MspInit+0xc0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d149      	bne.n	8002292 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002252:	23c0      	movs	r3, #192	; 0xc0
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002262:	2305      	movs	r3, #5
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <HAL_SPI_MspInit+0xc8>)
 800226e:	f001 f9f3 	bl	8003658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002272:	2308      	movs	r3, #8
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002282:	2305      	movs	r3, #5
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4806      	ldr	r0, [pc, #24]	; (80022a8 <HAL_SPI_MspInit+0xcc>)
 800228e:	f001 f9e3 	bl	8003658 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	; 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40013000 	.word	0x40013000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400

080022ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d115      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_TIM_Base_MspInit+0x48>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_TIM_Base_MspInit+0x48>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_TIM_Base_MspInit+0x48>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	201c      	movs	r0, #28
 80022e0:	f001 f983 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e4:	201c      	movs	r0, #28
 80022e6:	f001 f99c 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <NMI_Handler+0x4>

080022fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <HardFault_Handler+0x4>

08002304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <MemManage_Handler+0x4>

0800230a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler+0x4>

08002316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002344:	f000 f96a 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <ADC_IRQHandler+0x10>)
 8002352:	f000 faa5 	bl	80028a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000014c 	.word	0x2000014c

08002360 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <TIM2_IRQHandler+0x10>)
 8002366:	f002 faa9 	bl	80048bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000224 	.word	0x20000224

08002374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_kill>:

int _kill(int pid, int sig)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800238e:	f002 fe57 	bl	8005040 <__errno>
 8002392:	4603      	mov	r3, r0
 8002394:	2216      	movs	r2, #22
 8002396:	601a      	str	r2, [r3, #0]
	return -1;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_exit>:

void _exit (int status)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffe7 	bl	8002384 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023b6:	e7fe      	b.n	80023b6 <_exit+0x12>

080023b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00a      	b.n	80023e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ca:	f3af 8000 	nop.w
 80023ce:	4601      	mov	r1, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf0      	blt.n	80023ca <_read+0x12>
	}

return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e009      	b.n	8002418 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf1      	blt.n	8002404 <_write+0x12>
	}
	return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_close>:

int _close(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
	return -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002452:	605a      	str	r2, [r3, #4]
	return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_isatty>:

int _isatty(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
	return 1;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f002 fdbc 	bl	8005040 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20020000 	.word	0x20020000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20000104 	.word	0x20000104
 80024fc:	200002e0 	.word	0x200002e0

08002500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800252a:	490e      	ldr	r1, [pc, #56]	; (8002564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002540:	4c0b      	ldr	r4, [pc, #44]	; (8002570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800254e:	f7ff ffd7 	bl	8002500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002552:	f002 fd7b 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7fe fe4b 	bl	80011f0 <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800255c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002568:	08006d8c 	.word	0x08006d8c
  ldr r2, =_sbss
 800256c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002570:	200002dc 	.word	0x200002dc

08002574 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <CAN1_RX0_IRQHandler>
	...

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <HAL_Init+0x40>)
 8002582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_Init+0x40>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_Init+0x40>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f001 f817 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	200f      	movs	r0, #15
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fd02 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f82f 	bl	800363e <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 fff7 	bl	80035ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000034 	.word	0x20000034
 8002614:	2000003c 	.word	0x2000003c
 8002618:	20000038 	.word	0x20000038

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2000003c 	.word	0x2000003c
 8002640:	200002c8 	.word	0x200002c8

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	200002c8 	.word	0x200002c8

0800265c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e033      	b.n	80026da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fcc2 	bl	8002004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026a2:	f023 0302 	bic.w	r3, r3, #2
 80026a6:	f043 0202 	orr.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb7a 	bl	8002da8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
 80026ca:	e001      	b.n	80026d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_Start_IT+0x1a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0bd      	b.n	800287a <HAL_ADC_Start_IT+0x196>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d018      	beq.n	8002746 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_ADC_Start_IT+0x1a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_ADC_Start_IT+0x1a8>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9a      	lsrs	r2, r3, #18
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002738:	e002      	b.n	8002740 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f9      	bne.n	800273a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	f040 8085 	bne.w	8002860 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002780:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002794:	d106      	bne.n	80027a4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f023 0206 	bic.w	r2, r3, #6
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
 80027a2:	e002      	b.n	80027aa <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_ADC_Start_IT+0x1ac>)
 80027b4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027be:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d12a      	bne.n	8002836 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_ADC_Start_IT+0x1b0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d015      	beq.n	8002816 <HAL_ADC_Start_IT+0x132>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <HAL_ADC_Start_IT+0x1b4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_Start_IT+0x11c>
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_ADC_Start_IT+0x1ac>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a25      	ldr	r2, [pc, #148]	; (800289c <HAL_ADC_Start_IT+0x1b8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d136      	bne.n	8002878 <HAL_ADC_Start_IT+0x194>
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_ADC_Start_IT+0x1ac>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d130      	bne.n	8002878 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d129      	bne.n	8002878 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e020      	b.n	8002878 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_ADC_Start_IT+0x1b0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d11b      	bne.n	8002878 <HAL_ADC_Start_IT+0x194>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d114      	bne.n	8002878 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	e00b      	b.n	8002878 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f043 0210 	orr.w	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000034 	.word	0x20000034
 800288c:	431bde83 	.word	0x431bde83
 8002890:	40012300 	.word	0x40012300
 8002894:	40012000 	.word	0x40012000
 8002898:	40012100 	.word	0x40012100
 800289c:	40012200 	.word	0x40012200

080028a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d049      	beq.n	8002976 <HAL_ADC_IRQHandler+0xd6>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d046      	beq.n	8002976 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d12b      	bne.n	8002966 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d127      	bne.n	8002966 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800292e:	2b00      	cmp	r3, #0
 8002930:	d119      	bne.n	8002966 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0220 	bic.w	r2, r2, #32
 8002940:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fa8c 	bl	8001e84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0212 	mvn.w	r2, #18
 8002974:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b04      	cmp	r3, #4
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d057      	beq.n	8002a58 <HAL_ADC_IRQHandler+0x1b8>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d054      	beq.n	8002a58 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d139      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d12b      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d124      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11d      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d119      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 faa9 	bl	8002fa0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 020c 	mvn.w	r2, #12
 8002a56:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_ADC_IRQHandler+0x21a>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d014      	beq.n	8002aba <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f846 	bl	8002b3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x27a>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0202 	orr.w	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f820 	bl	8002b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0220 	mvn.w	r2, #32
 8002b18:	601a      	str	r2, [r3, #0]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e105      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x228>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d925      	bls.n	8002bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43da      	mvns	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4603      	mov	r3, r0
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4403      	add	r3, r0
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e022      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4403      	add	r3, r0
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d824      	bhi.n	8002c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b05      	subs	r3, #5
 8002c3c:	221f      	movs	r2, #31
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b05      	subs	r3, #5
 8002c66:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	e04c      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d824      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b23      	subs	r3, #35	; 0x23
 8002c8e:	221f      	movs	r2, #31
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43da      	mvns	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b23      	subs	r3, #35	; 0x23
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc4:	e023      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b41      	subs	r3, #65	; 0x41
 8002cd8:	221f      	movs	r2, #31
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b41      	subs	r3, #65	; 0x41
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0e:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_ADC_ConfigChannel+0x234>)
 8002d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_ADC_ConfigChannel+0x238>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d109      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1cc>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <HAL_ADC_ConfigChannel+0x238>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d123      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x21e>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d003      	beq.n	8002d4a <HAL_ADC_ConfigChannel+0x1e6>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b11      	cmp	r3, #17
 8002d48:	d11b      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d111      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_ADC_ConfigChannel+0x23c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_ADC_ConfigChannel+0x240>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9a      	lsrs	r2, r3, #18
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d74:	e002      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f9      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40012300 	.word	0x40012300
 8002d9c:	40012000 	.word	0x40012000
 8002da0:	20000034 	.word	0x20000034
 8002da4:	431bde83 	.word	0x431bde83

08002da8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db0:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <ADC_Init+0x1f0>)
 8002db2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	021a      	lsls	r2, r3, #8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <ADC_Init+0x1f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e00f      	b.n	8002ea6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0202 	bic.w	r2, r2, #2
 8002eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7e1b      	ldrb	r3, [r3, #24]
 8002ec0:	005a      	lsls	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01b      	beq.n	8002f0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ef2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	3b01      	subs	r3, #1
 8002f00:	035a      	lsls	r2, r3, #13
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	e007      	b.n	8002f1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	051a      	lsls	r2, r3, #20
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6899      	ldr	r1, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f5e:	025a      	lsls	r2, r3, #9
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	029a      	lsls	r2, r3, #10
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40012300 	.word	0x40012300
 8002f9c:	0f000001 	.word	0x0f000001

08002fa0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0ed      	b.n	80031a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff f862 	bl	800209c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe8:	f7ff fb2c 	bl	8002644 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fee:	e012      	b.n	8003016 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ff0:	f7ff fb28 	bl	8002644 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b0a      	cmp	r3, #10
 8002ffc:	d90b      	bls.n	8003016 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2205      	movs	r2, #5
 800300e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0c5      	b.n	80031a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0e5      	beq.n	8002ff0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0202 	bic.w	r2, r2, #2
 8003032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003034:	f7ff fb06 	bl	8002644 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800303a:	e012      	b.n	8003062 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800303c:	f7ff fb02 	bl	8002644 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b0a      	cmp	r3, #10
 8003048:	d90b      	bls.n	8003062 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2205      	movs	r2, #5
 800305a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e09f      	b.n	80031a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7e1b      	ldrb	r3, [r3, #24]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e007      	b.n	800309a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7e5b      	ldrb	r3, [r3, #25]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e007      	b.n	80030c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7e9b      	ldrb	r3, [r3, #26]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0220 	orr.w	r2, r2, #32
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e007      	b.n	80030ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0220 	bic.w	r2, r2, #32
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7edb      	ldrb	r3, [r3, #27]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0210 	bic.w	r2, r2, #16
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0210 	orr.w	r2, r2, #16
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7f1b      	ldrb	r3, [r3, #28]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d108      	bne.n	8003132 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e007      	b.n	8003142 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0208 	bic.w	r2, r2, #8
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7f5b      	ldrb	r3, [r3, #29]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0204 	orr.w	r2, r2, #4
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0204 	bic.w	r2, r2, #4
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	1e5a      	subs	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d12e      	bne.n	800321c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d6:	f7ff fa35 	bl	8002644 <HAL_GetTick>
 80031da:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031dc:	e012      	b.n	8003204 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031de:	f7ff fa31 	bl	8002644 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b0a      	cmp	r3, #10
 80031ea:	d90b      	bls.n	8003204 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2205      	movs	r2, #5
 80031fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e012      	b.n	800322a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e5      	bne.n	80031de <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e006      	b.n	800322a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003232:	b480      	push	{r7}
 8003234:	b089      	sub	sp, #36	; 0x24
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003246:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d003      	beq.n	800325e <HAL_CAN_AddTxMessage+0x2c>
 8003256:	7ffb      	ldrb	r3, [r7, #31]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f040 80b8 	bne.w	80033ce <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a0 	beq.w	80033be <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	0e1b      	lsrs	r3, r3, #24
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d907      	bls.n	800329e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e09e      	b.n	80033dc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800329e:	2201      	movs	r2, #1
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	6809      	ldr	r1, [r1, #0]
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3318      	adds	r3, #24
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	440b      	add	r3, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e00f      	b.n	80032ec <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3318      	adds	r3, #24
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	440b      	add	r3, r1
 80032ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3318      	adds	r3, #24
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	440b      	add	r3, r1
 80032fc:	3304      	adds	r3, #4
 80032fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	7d1b      	ldrb	r3, [r3, #20]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d111      	bne.n	800332c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3318      	adds	r3, #24
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	6811      	ldr	r1, [r2, #0]
 800331c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3318      	adds	r3, #24
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	440b      	add	r3, r1
 8003328:	3304      	adds	r3, #4
 800332a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3307      	adds	r3, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	061a      	lsls	r2, r3, #24
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3306      	adds	r3, #6
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3305      	adds	r3, #5
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	4313      	orrs	r3, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	3204      	adds	r2, #4
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	4610      	mov	r0, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	6811      	ldr	r1, [r2, #0]
 8003354:	ea43 0200 	orr.w	r2, r3, r0
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	440b      	add	r3, r1
 800335e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003362:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3303      	adds	r3, #3
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	061a      	lsls	r2, r3, #24
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3302      	adds	r3, #2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3301      	adds	r3, #1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	4313      	orrs	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	4610      	mov	r0, r2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	6811      	ldr	r1, [r2, #0]
 800338a:	ea43 0200 	orr.w	r2, r3, r0
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	440b      	add	r3, r1
 8003394:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003398:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3318      	adds	r3, #24
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	4413      	add	r3, r2
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	6811      	ldr	r1, [r2, #0]
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3318      	adds	r3, #24
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	440b      	add	r3, r1
 80033b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e00e      	b.n	80033dc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e006      	b.n	80033dc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3724      	adds	r7, #36	; 0x24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d002      	beq.n	8003406 <HAL_CAN_ActivateNotification+0x1e>
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d109      	bne.n	800341a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6959      	ldr	r1, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e006      	b.n	8003428 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800345c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__NVIC_GetPriorityGrouping+0x18>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0307 	and.w	r3, r3, #7
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0b      	blt.n	80034c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <__NVIC_EnableIRQ+0x38>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	; (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff29 	bl	8003434 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035fc:	f7ff ff3e 	bl	800347c <__NVIC_GetPriorityGrouping>
 8003600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff8e 	bl	8003528 <NVIC_EncodePriority>
 800360c:	4602      	mov	r2, r0
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff5d 	bl	80034d4 <__NVIC_SetPriority>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff31 	bl	8003498 <__NVIC_EnableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffa2 	bl	8003590 <SysTick_Config>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e16b      	b.n	800394c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003674:	2201      	movs	r2, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	f040 815a 	bne.w	8003946 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d005      	beq.n	80036aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d130      	bne.n	800370c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 0201 	and.w	r2, r3, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b03      	cmp	r3, #3
 8003716:	d017      	beq.n	8003748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d123      	bne.n	800379c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	08da      	lsrs	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3208      	adds	r2, #8
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	220f      	movs	r2, #15
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	08da      	lsrs	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3208      	adds	r2, #8
 8003796:	69b9      	ldr	r1, [r7, #24]
 8003798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0203 	and.w	r2, r3, #3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80b4 	beq.w	8003946 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b60      	ldr	r3, [pc, #384]	; (8003964 <HAL_GPIO_Init+0x30c>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4a5f      	ldr	r2, [pc, #380]	; (8003964 <HAL_GPIO_Init+0x30c>)
 80037e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ec:	6453      	str	r3, [r2, #68]	; 0x44
 80037ee:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <HAL_GPIO_Init+0x30c>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037fa:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_GPIO_Init+0x310>)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3302      	adds	r3, #2
 8003802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	220f      	movs	r2, #15
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_GPIO_Init+0x314>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d02b      	beq.n	800387e <HAL_GPIO_Init+0x226>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a51      	ldr	r2, [pc, #324]	; (8003970 <HAL_GPIO_Init+0x318>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d025      	beq.n	800387a <HAL_GPIO_Init+0x222>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a50      	ldr	r2, [pc, #320]	; (8003974 <HAL_GPIO_Init+0x31c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <HAL_GPIO_Init+0x21e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <HAL_GPIO_Init+0x320>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d019      	beq.n	8003872 <HAL_GPIO_Init+0x21a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4e      	ldr	r2, [pc, #312]	; (800397c <HAL_GPIO_Init+0x324>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_GPIO_Init+0x216>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4d      	ldr	r2, [pc, #308]	; (8003980 <HAL_GPIO_Init+0x328>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00d      	beq.n	800386a <HAL_GPIO_Init+0x212>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4c      	ldr	r2, [pc, #304]	; (8003984 <HAL_GPIO_Init+0x32c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <HAL_GPIO_Init+0x20e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_GPIO_Init+0x330>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_GPIO_Init+0x20a>
 800385e:	2307      	movs	r3, #7
 8003860:	e00e      	b.n	8003880 <HAL_GPIO_Init+0x228>
 8003862:	2308      	movs	r3, #8
 8003864:	e00c      	b.n	8003880 <HAL_GPIO_Init+0x228>
 8003866:	2306      	movs	r3, #6
 8003868:	e00a      	b.n	8003880 <HAL_GPIO_Init+0x228>
 800386a:	2305      	movs	r3, #5
 800386c:	e008      	b.n	8003880 <HAL_GPIO_Init+0x228>
 800386e:	2304      	movs	r3, #4
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x228>
 8003872:	2303      	movs	r3, #3
 8003874:	e004      	b.n	8003880 <HAL_GPIO_Init+0x228>
 8003876:	2302      	movs	r3, #2
 8003878:	e002      	b.n	8003880 <HAL_GPIO_Init+0x228>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_GPIO_Init+0x228>
 800387e:	2300      	movs	r3, #0
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f002 0203 	and.w	r2, r2, #3
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	4093      	lsls	r3, r2
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003890:	4935      	ldr	r1, [pc, #212]	; (8003968 <HAL_GPIO_Init+0x310>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_GPIO_Init+0x334>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c2:	4a32      	ldr	r2, [pc, #200]	; (800398c <HAL_GPIO_Init+0x334>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038c8:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_GPIO_Init+0x334>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <HAL_GPIO_Init+0x334>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_GPIO_Init+0x334>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_GPIO_Init+0x334>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_GPIO_Init+0x334>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <HAL_GPIO_Init+0x334>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	f67f ae90 	bls.w	8003674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	40013800 	.word	0x40013800
 800396c:	40020000 	.word	0x40020000
 8003970:	40020400 	.word	0x40020400
 8003974:	40020800 	.word	0x40020800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40021400 	.word	0x40021400
 8003984:	40021800 	.word	0x40021800
 8003988:	40021c00 	.word	0x40021c00
 800398c:	40013c00 	.word	0x40013c00

08003990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e001      	b.n	80039b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039dc:	e003      	b.n	80039e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e264      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d075      	beq.n	8003afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a12:	4ba3      	ldr	r3, [pc, #652]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d00c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d112      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2a:	4b9d      	ldr	r3, [pc, #628]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05b      	beq.n	8003afc <HAL_RCC_OscConfig+0x108>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d157      	bne.n	8003afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e23f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d106      	bne.n	8003a68 <HAL_RCC_OscConfig+0x74>
 8003a5a:	4b91      	ldr	r3, [pc, #580]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a90      	ldr	r2, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e01d      	b.n	8003aa4 <HAL_RCC_OscConfig+0xb0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x98>
 8003a72:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a8a      	ldr	r2, [pc, #552]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a87      	ldr	r2, [pc, #540]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a80      	ldr	r2, [pc, #512]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d013      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fdca 	bl	8002644 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fdc6 	bl	8002644 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e204      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xc0>
 8003ad2:	e014      	b.n	8003afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fdb6 	bl	8002644 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fdb2 	bl	8002644 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e1f0      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0xe8>
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d063      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b16:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d11c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b22:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x152>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e1c4      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4952      	ldr	r1, [pc, #328]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	e03a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b64:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <HAL_RCC_OscConfig+0x2b0>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fd6b 	bl	8002644 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe fd67 	bl	8002644 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1a5      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4940      	ldr	r1, [pc, #256]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_OscConfig+0x2b0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe fd4a 	bl	8002644 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7fe fd46 	bl	8002644 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e184      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_RCC_OscConfig+0x2b4>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fe fd2a 	bl	8002644 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fd26 	bl	8002644 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e164      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x200>
 8003c12:	e015      	b.n	8003c40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x2b4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fd13 	bl	8002644 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fe fd0f 	bl	8002644 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e14d      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a0 	beq.w	8003d8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_OscConfig+0x2b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d121      	bne.n	8003cce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_RCC_OscConfig+0x2b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_RCC_OscConfig+0x2b8>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fe fcd5 	bl	8002644 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	e011      	b.n	8003cc2 <HAL_RCC_OscConfig+0x2ce>
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	42470000 	.word	0x42470000
 8003ca8:	42470e80 	.word	0x42470e80
 8003cac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fe fcc8 	bl	8002644 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e106      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b85      	ldr	r3, [pc, #532]	; (8003ed8 <HAL_RCC_OscConfig+0x4e4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2f0>
 8003cd6:	4b81      	ldr	r3, [pc, #516]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a80      	ldr	r2, [pc, #512]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	e01c      	b.n	8003d1e <HAL_RCC_OscConfig+0x32a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x312>
 8003cec:	4b7b      	ldr	r3, [pc, #492]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a7a      	ldr	r2, [pc, #488]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	4b78      	ldr	r3, [pc, #480]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	4a77      	ldr	r2, [pc, #476]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6713      	str	r3, [r2, #112]	; 0x70
 8003d04:	e00b      	b.n	8003d1e <HAL_RCC_OscConfig+0x32a>
 8003d06:	4b75      	ldr	r3, [pc, #468]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a74      	ldr	r2, [pc, #464]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	4b72      	ldr	r3, [pc, #456]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4a71      	ldr	r2, [pc, #452]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d015      	beq.n	8003d52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fe fc8d 	bl	8002644 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe fc89 	bl	8002644 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0c5      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ee      	beq.n	8003d2e <HAL_RCC_OscConfig+0x33a>
 8003d50:	e014      	b.n	8003d7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fc77 	bl	8002644 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe fc73 	bl	8002644 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0af      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b56      	ldr	r3, [pc, #344]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a55      	ldr	r2, [pc, #340]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 809b 	beq.w	8003ece <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d05c      	beq.n	8003e5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d141      	bne.n	8003e30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <HAL_RCC_OscConfig+0x4ec>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fc47 	bl	8002644 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fc43 	bl	8002644 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e081      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dcc:	4b43      	ldr	r3, [pc, #268]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	019b      	lsls	r3, r3, #6
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	3b01      	subs	r3, #1
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	4937      	ldr	r1, [pc, #220]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <HAL_RCC_OscConfig+0x4ec>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fe fc1c 	bl	8002644 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fe fc18 	bl	8002644 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e056      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x41c>
 8003e2e:	e04e      	b.n	8003ece <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <HAL_RCC_OscConfig+0x4ec>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fe fc05 	bl	8002644 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fe fc01 	bl	8002644 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e03f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x44a>
 8003e5c:	e037      	b.n	8003ece <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e032      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d028      	beq.n	8003eca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d121      	bne.n	8003eca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d11a      	bne.n	8003eca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ea0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	42470060 	.word	0x42470060

08003ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cc      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d90c      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b63      	ldr	r3, [pc, #396]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0b8      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d020      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f38:	4b59      	ldr	r3, [pc, #356]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a58      	ldr	r2, [pc, #352]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f50:	4b53      	ldr	r3, [pc, #332]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a52      	ldr	r2, [pc, #328]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	494d      	ldr	r1, [pc, #308]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d044      	beq.n	8004004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d119      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e07f      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06f      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e067      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc2:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4934      	ldr	r1, [pc, #208]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd4:	f7fe fb36 	bl	8002644 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fdc:	f7fe fb32 	bl	8002644 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e04f      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 020c 	and.w	r2, r3, #12
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	429a      	cmp	r2, r3
 8004002:	d1eb      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d20c      	bcs.n	800402c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e032      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4916      	ldr	r1, [pc, #88]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	490e      	ldr	r1, [pc, #56]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800406a:	f000 f821 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 800406e:	4602      	mov	r2, r0
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	490a      	ldr	r1, [pc, #40]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	5ccb      	ldrb	r3, [r1, r3]
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_ClockConfig+0x1c8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fa96 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023c00 	.word	0x40023c00
 80040a0:	40023800 	.word	0x40023800
 80040a4:	08006c20 	.word	0x08006c20
 80040a8:	20000034 	.word	0x20000034
 80040ac:	20000038 	.word	0x20000038

080040b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b0:	b5b0      	push	{r4, r5, r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040b6:	2100      	movs	r1, #0
 80040b8:	6079      	str	r1, [r7, #4]
 80040ba:	2100      	movs	r1, #0
 80040bc:	60f9      	str	r1, [r7, #12]
 80040be:	2100      	movs	r1, #0
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040c2:	2100      	movs	r1, #0
 80040c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c6:	4952      	ldr	r1, [pc, #328]	; (8004210 <HAL_RCC_GetSysClockFreq+0x160>)
 80040c8:	6889      	ldr	r1, [r1, #8]
 80040ca:	f001 010c 	and.w	r1, r1, #12
 80040ce:	2908      	cmp	r1, #8
 80040d0:	d00d      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x3e>
 80040d2:	2908      	cmp	r1, #8
 80040d4:	f200 8094 	bhi.w	8004200 <HAL_RCC_GetSysClockFreq+0x150>
 80040d8:	2900      	cmp	r1, #0
 80040da:	d002      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x32>
 80040dc:	2904      	cmp	r1, #4
 80040de:	d003      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x38>
 80040e0:	e08e      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e2:	4b4c      	ldr	r3, [pc, #304]	; (8004214 <HAL_RCC_GetSysClockFreq+0x164>)
 80040e4:	60bb      	str	r3, [r7, #8]
       break;
 80040e6:	e08e      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e8:	4b4b      	ldr	r3, [pc, #300]	; (8004218 <HAL_RCC_GetSysClockFreq+0x168>)
 80040ea:	60bb      	str	r3, [r7, #8]
      break;
 80040ec:	e08b      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ee:	4948      	ldr	r1, [pc, #288]	; (8004210 <HAL_RCC_GetSysClockFreq+0x160>)
 80040f0:	6849      	ldr	r1, [r1, #4]
 80040f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80040f6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040f8:	4945      	ldr	r1, [pc, #276]	; (8004210 <HAL_RCC_GetSysClockFreq+0x160>)
 80040fa:	6849      	ldr	r1, [r1, #4]
 80040fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004100:	2900      	cmp	r1, #0
 8004102:	d024      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4942      	ldr	r1, [pc, #264]	; (8004210 <HAL_RCC_GetSysClockFreq+0x160>)
 8004106:	6849      	ldr	r1, [r1, #4]
 8004108:	0989      	lsrs	r1, r1, #6
 800410a:	4608      	mov	r0, r1
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004114:	f04f 0500 	mov.w	r5, #0
 8004118:	ea00 0204 	and.w	r2, r0, r4
 800411c:	ea01 0305 	and.w	r3, r1, r5
 8004120:	493d      	ldr	r1, [pc, #244]	; (8004218 <HAL_RCC_GetSysClockFreq+0x168>)
 8004122:	fb01 f003 	mul.w	r0, r1, r3
 8004126:	2100      	movs	r1, #0
 8004128:	fb01 f102 	mul.w	r1, r1, r2
 800412c:	1844      	adds	r4, r0, r1
 800412e:	493a      	ldr	r1, [pc, #232]	; (8004218 <HAL_RCC_GetSysClockFreq+0x168>)
 8004130:	fba2 0101 	umull	r0, r1, r2, r1
 8004134:	1863      	adds	r3, r4, r1
 8004136:	4619      	mov	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	f7fc f896 	bl	8000270 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e04a      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414e:	4b30      	ldr	r3, [pc, #192]	; (8004210 <HAL_RCC_GetSysClockFreq+0x160>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	099b      	lsrs	r3, r3, #6
 8004154:	461a      	mov	r2, r3
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	ea02 0400 	and.w	r4, r2, r0
 8004166:	ea03 0501 	and.w	r5, r3, r1
 800416a:	4620      	mov	r0, r4
 800416c:	4629      	mov	r1, r5
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	014b      	lsls	r3, r1, #5
 8004178:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800417c:	0142      	lsls	r2, r0, #5
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	1b00      	subs	r0, r0, r4
 8004184:	eb61 0105 	sbc.w	r1, r1, r5
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	018b      	lsls	r3, r1, #6
 8004192:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004196:	0182      	lsls	r2, r0, #6
 8004198:	1a12      	subs	r2, r2, r0
 800419a:	eb63 0301 	sbc.w	r3, r3, r1
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	00d9      	lsls	r1, r3, #3
 80041a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ac:	00d0      	lsls	r0, r2, #3
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	1912      	adds	r2, r2, r4
 80041b4:	eb45 0303 	adc.w	r3, r5, r3
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	0299      	lsls	r1, r3, #10
 80041c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041c6:	0290      	lsls	r0, r2, #10
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	f7fc f84a 	bl	8000270 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_GetSysClockFreq+0x160>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	3301      	adds	r3, #1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	60bb      	str	r3, [r7, #8]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCC_GetSysClockFreq+0x164>)
 8004202:	60bb      	str	r3, [r7, #8]
      break;
 8004204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004206:	68bb      	ldr	r3, [r7, #8]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bdb0      	pop	{r4, r5, r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	017d7840 	.word	0x017d7840

0800421c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07b      	b.n	8004326 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800423e:	d009      	beq.n	8004254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
 8004246:	e005      	b.n	8004254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd ffb4 	bl	80021dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	ea42 0103 	orr.w	r1, r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0104 	and.w	r1, r3, #4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0210 	and.w	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b088      	sub	sp, #32
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_SPI_Transmit+0x22>
 800434c:	2302      	movs	r3, #2
 800434e:	e126      	b.n	800459e <HAL_SPI_Transmit+0x270>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004358:	f7fe f974 	bl	8002644 <HAL_GetTick>
 800435c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d002      	beq.n	8004374 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004372:	e10b      	b.n	800458c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_SPI_Transmit+0x52>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004384:	e102      	b.n	800458c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2203      	movs	r2, #3
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043cc:	d10f      	bne.n	80043ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d007      	beq.n	800440c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004414:	d14b      	bne.n	80044ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_Transmit+0xf6>
 800441e:	8afb      	ldrh	r3, [r7, #22]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d13e      	bne.n	80044a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	881a      	ldrh	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	1c9a      	adds	r2, r3, #2
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004448:	e02b      	b.n	80044a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d112      	bne.n	800447e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	881a      	ldrh	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	86da      	strh	r2, [r3, #54]	; 0x36
 800447c:	e011      	b.n	80044a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800447e:	f7fe f8e1 	bl	8002644 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d803      	bhi.n	8004496 <HAL_SPI_Transmit+0x168>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d102      	bne.n	800449c <HAL_SPI_Transmit+0x16e>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044a0:	e074      	b.n	800458c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ce      	bne.n	800444a <HAL_SPI_Transmit+0x11c>
 80044ac:	e04c      	b.n	8004548 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0x18e>
 80044b6:	8afb      	ldrh	r3, [r7, #22]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d140      	bne.n	800453e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044e2:	e02c      	b.n	800453e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d113      	bne.n	800451a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	86da      	strh	r2, [r3, #54]	; 0x36
 8004518:	e011      	b.n	800453e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451a:	f7fe f893 	bl	8002644 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d803      	bhi.n	8004532 <HAL_SPI_Transmit+0x204>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Transmit+0x20a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800453c:	e026      	b.n	800458c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1cd      	bne.n	80044e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f8b3 	bl	80046b8 <SPI_EndRxTxTransaction>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e000      	b.n	800458c <HAL_SPI_Transmit+0x25e>
  }

error:
 800458a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800459c:	7ffb      	ldrb	r3, [r7, #31]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045b8:	f7fe f844 	bl	8002644 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045c8:	f7fe f83c 	bl	8002644 <HAL_GetTick>
 80045cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	015b      	lsls	r3, r3, #5
 80045d4:	0d1b      	lsrs	r3, r3, #20
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045de:	e054      	b.n	800468a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d050      	beq.n	800468a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045e8:	f7fe f82c 	bl	8002644 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d902      	bls.n	80045fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d13d      	bne.n	800467a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800460c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004616:	d111      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004620:	d004      	beq.n	800462c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d107      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004644:	d10f      	bne.n	8004666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e017      	b.n	80046aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3b01      	subs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4013      	ands	r3, r2
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	bf0c      	ite	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	2300      	movne	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d19b      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000034 	.word	0x20000034

080046b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <SPI_EndRxTxTransaction+0x7c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <SPI_EndRxTxTransaction+0x80>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0d5b      	lsrs	r3, r3, #21
 80046d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e2:	d112      	bne.n	800470a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff ff5a 	bl	80045a8 <SPI_WaitFlagStateUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e00f      	b.n	800472a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3b01      	subs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	2b80      	cmp	r3, #128	; 0x80
 8004722:	d0f2      	beq.n	800470a <SPI_EndRxTxTransaction+0x52>
 8004724:	e000      	b.n	8004728 <SPI_EndRxTxTransaction+0x70>
        break;
 8004726:	bf00      	nop
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000034 	.word	0x20000034
 8004738:	165e9f81 	.word	0x165e9f81

0800473c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e041      	b.n	80047d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fda2 	bl	80022ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f000 fa96 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e04e      	b.n	8004892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a23      	ldr	r2, [pc, #140]	; (80048a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d01d      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_TIM_Base_Start_IT+0xd0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d010      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	e007      	b.n	8004890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40001800 	.word	0x40001800

080048bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0202 	mvn.w	r2, #2
 80048e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9b5 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9a7 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9b8 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b04      	cmp	r3, #4
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b04      	cmp	r3, #4
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0204 	mvn.w	r2, #4
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f98b 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f97d 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f98e 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b08      	cmp	r3, #8
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b08      	cmp	r3, #8
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0208 	mvn.w	r2, #8
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f961 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f953 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f964 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0210 	mvn.w	r2, #16
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2208      	movs	r2, #8
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f937 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f929 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f93a 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0201 	mvn.w	r2, #1
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fa16 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d10e      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a58:	2b80      	cmp	r3, #128	; 0x80
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fae0 	bl	800502c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d10e      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d107      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8ff 	bl	8004c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d107      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0220 	mvn.w	r2, #32
 8004abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 faaa 	bl	8005018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0b4      	b.n	8004c52 <HAL_TIM_ConfigClockSource+0x186>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b20:	d03e      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	f200 8087 	bhi.w	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	f000 8086 	beq.w	8004c3e <HAL_TIM_ConfigClockSource+0x172>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d87f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b70      	cmp	r3, #112	; 0x70
 8004b3a:	d01a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xa6>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d87b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d050      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d877      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b50      	cmp	r3, #80	; 0x50
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d873      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d058      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x13a>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d86f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b30      	cmp	r3, #48	; 0x30
 8004b5a:	d064      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d86b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d060      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d867      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d05a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	e062      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f000 f9ad 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
      break;
 8004b9e:	e04f      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f000 f996 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc2:	609a      	str	r2, [r3, #8]
      break;
 8004bc4:	e03c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f90a 	bl	8004dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2150      	movs	r1, #80	; 0x50
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f963 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004be4:	e02c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f929 	bl	8004e4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2160      	movs	r1, #96	; 0x60
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f953 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004c04:	e01c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f8ea 	bl	8004dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f943 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 f93a 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <TIM_Base_SetConfig+0x118>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <TIM_Base_SetConfig+0x120>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d02b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d027      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2c      	ldr	r2, [pc, #176]	; (8004dc4 <TIM_Base_SetConfig+0x118>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d023      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2b      	ldr	r2, [pc, #172]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01f      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <TIM_Base_SetConfig+0x120>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d017      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00f      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <TIM_Base_SetConfig+0x134>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a24      	ldr	r2, [pc, #144]	; (8004de4 <TIM_Base_SetConfig+0x138>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <TIM_Base_SetConfig+0x13c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0xf8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40010400 	.word	0x40010400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800
 8004de0:	40001800 	.word	0x40001800
 8004de4:	40001c00 	.word	0x40001c00
 8004de8:	40002000 	.word	0x40002000

08004dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 030a 	bic.w	r3, r3, #10
 8004e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0210 	bic.w	r2, r3, #16
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	031b      	lsls	r3, r3, #12
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f043 0307 	orr.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e05a      	b.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d022      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d01d      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d018      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a18      	ldr	r2, [pc, #96]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10c      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800

08005018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <__errno>:
 8005040:	4b01      	ldr	r3, [pc, #4]	; (8005048 <__errno+0x8>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000040 	.word	0x20000040

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4d0d      	ldr	r5, [pc, #52]	; (8005084 <__libc_init_array+0x38>)
 8005050:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005052:	1b64      	subs	r4, r4, r5
 8005054:	10a4      	asrs	r4, r4, #2
 8005056:	2600      	movs	r6, #0
 8005058:	42a6      	cmp	r6, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	4d0b      	ldr	r5, [pc, #44]	; (800508c <__libc_init_array+0x40>)
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <__libc_init_array+0x44>)
 8005060:	f001 f884 	bl	800616c <_init>
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	2600      	movs	r6, #0
 800506a:	42a6      	cmp	r6, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f855 3b04 	ldr.w	r3, [r5], #4
 8005074:	4798      	blx	r3
 8005076:	3601      	adds	r6, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f855 3b04 	ldr.w	r3, [r5], #4
 800507e:	4798      	blx	r3
 8005080:	3601      	adds	r6, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	08006d84 	.word	0x08006d84
 8005088:	08006d84 	.word	0x08006d84
 800508c:	08006d84 	.word	0x08006d84
 8005090:	08006d88 	.word	0x08006d88

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <srand>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <srand+0x44>)
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050ac:	4604      	mov	r4, r0
 80050ae:	b9b3      	cbnz	r3, 80050de <srand+0x3a>
 80050b0:	2018      	movs	r0, #24
 80050b2:	f000 f8c1 	bl	8005238 <malloc>
 80050b6:	4602      	mov	r2, r0
 80050b8:	63a8      	str	r0, [r5, #56]	; 0x38
 80050ba:	b920      	cbnz	r0, 80050c6 <srand+0x22>
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <srand+0x48>)
 80050be:	480c      	ldr	r0, [pc, #48]	; (80050f0 <srand+0x4c>)
 80050c0:	2142      	movs	r1, #66	; 0x42
 80050c2:	f000 f877 	bl	80051b4 <__assert_func>
 80050c6:	490b      	ldr	r1, [pc, #44]	; (80050f4 <srand+0x50>)
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <srand+0x54>)
 80050ca:	e9c0 1300 	strd	r1, r3, [r0]
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <srand+0x58>)
 80050d0:	6083      	str	r3, [r0, #8]
 80050d2:	230b      	movs	r3, #11
 80050d4:	8183      	strh	r3, [r0, #12]
 80050d6:	2100      	movs	r1, #0
 80050d8:	2001      	movs	r0, #1
 80050da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050e0:	2200      	movs	r2, #0
 80050e2:	611c      	str	r4, [r3, #16]
 80050e4:	615a      	str	r2, [r3, #20]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20000040 	.word	0x20000040
 80050ec:	08006c34 	.word	0x08006c34
 80050f0:	08006c4b 	.word	0x08006c4b
 80050f4:	abcd330e 	.word	0xabcd330e
 80050f8:	e66d1234 	.word	0xe66d1234
 80050fc:	0005deec 	.word	0x0005deec

08005100 <rand>:
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <rand+0x60>)
 8005102:	b510      	push	{r4, lr}
 8005104:	681c      	ldr	r4, [r3, #0]
 8005106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005108:	b9b3      	cbnz	r3, 8005138 <rand+0x38>
 800510a:	2018      	movs	r0, #24
 800510c:	f000 f894 	bl	8005238 <malloc>
 8005110:	63a0      	str	r0, [r4, #56]	; 0x38
 8005112:	b928      	cbnz	r0, 8005120 <rand+0x20>
 8005114:	4602      	mov	r2, r0
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <rand+0x64>)
 8005118:	4813      	ldr	r0, [pc, #76]	; (8005168 <rand+0x68>)
 800511a:	214e      	movs	r1, #78	; 0x4e
 800511c:	f000 f84a 	bl	80051b4 <__assert_func>
 8005120:	4a12      	ldr	r2, [pc, #72]	; (800516c <rand+0x6c>)
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <rand+0x70>)
 8005124:	e9c0 2300 	strd	r2, r3, [r0]
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <rand+0x74>)
 800512a:	6083      	str	r3, [r0, #8]
 800512c:	230b      	movs	r3, #11
 800512e:	8183      	strh	r3, [r0, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	2300      	movs	r3, #0
 8005134:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005138:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800513a:	480f      	ldr	r0, [pc, #60]	; (8005178 <rand+0x78>)
 800513c:	690a      	ldr	r2, [r1, #16]
 800513e:	694b      	ldr	r3, [r1, #20]
 8005140:	4c0e      	ldr	r4, [pc, #56]	; (800517c <rand+0x7c>)
 8005142:	4350      	muls	r0, r2
 8005144:	fb04 0003 	mla	r0, r4, r3, r0
 8005148:	fba2 3404 	umull	r3, r4, r2, r4
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	4404      	add	r4, r0
 8005150:	f144 0000 	adc.w	r0, r4, #0
 8005154:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005158:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800515c:	bd10      	pop	{r4, pc}
 800515e:	bf00      	nop
 8005160:	20000040 	.word	0x20000040
 8005164:	08006c34 	.word	0x08006c34
 8005168:	08006c4b 	.word	0x08006c4b
 800516c:	abcd330e 	.word	0xabcd330e
 8005170:	e66d1234 	.word	0xe66d1234
 8005174:	0005deec 	.word	0x0005deec
 8005178:	5851f42d 	.word	0x5851f42d
 800517c:	4c957f2d 	.word	0x4c957f2d

08005180 <time>:
 8005180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <time+0x30>)
 8005184:	2200      	movs	r2, #0
 8005186:	4669      	mov	r1, sp
 8005188:	4604      	mov	r4, r0
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	f000 f842 	bl	8005214 <_gettimeofday_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	bfbe      	ittt	lt
 8005194:	f04f 32ff 	movlt.w	r2, #4294967295
 8005198:	f04f 33ff 	movlt.w	r3, #4294967295
 800519c:	e9cd 2300 	strdlt	r2, r3, [sp]
 80051a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a4:	b10c      	cbz	r4, 80051aa <time+0x2a>
 80051a6:	e9c4 0100 	strd	r0, r1, [r4]
 80051aa:	b004      	add	sp, #16
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	bf00      	nop
 80051b0:	20000040 	.word	0x20000040

080051b4 <__assert_func>:
 80051b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051b6:	4614      	mov	r4, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <__assert_func+0x2c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4605      	mov	r5, r0
 80051c0:	68d8      	ldr	r0, [r3, #12]
 80051c2:	b14c      	cbz	r4, 80051d8 <__assert_func+0x24>
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <__assert_func+0x30>)
 80051c6:	9100      	str	r1, [sp, #0]
 80051c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051cc:	4906      	ldr	r1, [pc, #24]	; (80051e8 <__assert_func+0x34>)
 80051ce:	462b      	mov	r3, r5
 80051d0:	f000 f80e 	bl	80051f0 <fiprintf>
 80051d4:	f000 fca0 	bl	8005b18 <abort>
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <__assert_func+0x38>)
 80051da:	461c      	mov	r4, r3
 80051dc:	e7f3      	b.n	80051c6 <__assert_func+0x12>
 80051de:	bf00      	nop
 80051e0:	20000040 	.word	0x20000040
 80051e4:	08006caa 	.word	0x08006caa
 80051e8:	08006cb7 	.word	0x08006cb7
 80051ec:	08006ce5 	.word	0x08006ce5

080051f0 <fiprintf>:
 80051f0:	b40e      	push	{r1, r2, r3}
 80051f2:	b503      	push	{r0, r1, lr}
 80051f4:	4601      	mov	r1, r0
 80051f6:	ab03      	add	r3, sp, #12
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <fiprintf+0x20>)
 80051fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fe:	6800      	ldr	r0, [r0, #0]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	f000 f8f5 	bl	80053f0 <_vfiprintf_r>
 8005206:	b002      	add	sp, #8
 8005208:	f85d eb04 	ldr.w	lr, [sp], #4
 800520c:	b003      	add	sp, #12
 800520e:	4770      	bx	lr
 8005210:	20000040 	.word	0x20000040

08005214 <_gettimeofday_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d07      	ldr	r5, [pc, #28]	; (8005234 <_gettimeofday_r+0x20>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	f000 ff9b 	bl	800615c <_gettimeofday>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d102      	bne.n	8005230 <_gettimeofday_r+0x1c>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	b103      	cbz	r3, 8005230 <_gettimeofday_r+0x1c>
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	200002cc 	.word	0x200002cc

08005238 <malloc>:
 8005238:	4b02      	ldr	r3, [pc, #8]	; (8005244 <malloc+0xc>)
 800523a:	4601      	mov	r1, r0
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f000 b853 	b.w	80052e8 <_malloc_r>
 8005242:	bf00      	nop
 8005244:	20000040 	.word	0x20000040

08005248 <_free_r>:
 8005248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800524a:	2900      	cmp	r1, #0
 800524c:	d048      	beq.n	80052e0 <_free_r+0x98>
 800524e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005252:	9001      	str	r0, [sp, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f1a1 0404 	sub.w	r4, r1, #4
 800525a:	bfb8      	it	lt
 800525c:	18e4      	addlt	r4, r4, r3
 800525e:	f000 fe81 	bl	8005f64 <__malloc_lock>
 8005262:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <_free_r+0x9c>)
 8005264:	9801      	ldr	r0, [sp, #4]
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	4615      	mov	r5, r2
 800526a:	b933      	cbnz	r3, 800527a <_free_r+0x32>
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	6014      	str	r4, [r2, #0]
 8005270:	b003      	add	sp, #12
 8005272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005276:	f000 be7b 	b.w	8005f70 <__malloc_unlock>
 800527a:	42a3      	cmp	r3, r4
 800527c:	d90b      	bls.n	8005296 <_free_r+0x4e>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	1862      	adds	r2, r4, r1
 8005282:	4293      	cmp	r3, r2
 8005284:	bf04      	itt	eq
 8005286:	681a      	ldreq	r2, [r3, #0]
 8005288:	685b      	ldreq	r3, [r3, #4]
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	bf04      	itt	eq
 800528e:	1852      	addeq	r2, r2, r1
 8005290:	6022      	streq	r2, [r4, #0]
 8005292:	602c      	str	r4, [r5, #0]
 8005294:	e7ec      	b.n	8005270 <_free_r+0x28>
 8005296:	461a      	mov	r2, r3
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	b10b      	cbz	r3, 80052a0 <_free_r+0x58>
 800529c:	42a3      	cmp	r3, r4
 800529e:	d9fa      	bls.n	8005296 <_free_r+0x4e>
 80052a0:	6811      	ldr	r1, [r2, #0]
 80052a2:	1855      	adds	r5, r2, r1
 80052a4:	42a5      	cmp	r5, r4
 80052a6:	d10b      	bne.n	80052c0 <_free_r+0x78>
 80052a8:	6824      	ldr	r4, [r4, #0]
 80052aa:	4421      	add	r1, r4
 80052ac:	1854      	adds	r4, r2, r1
 80052ae:	42a3      	cmp	r3, r4
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	d1dd      	bne.n	8005270 <_free_r+0x28>
 80052b4:	681c      	ldr	r4, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	6053      	str	r3, [r2, #4]
 80052ba:	4421      	add	r1, r4
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	e7d7      	b.n	8005270 <_free_r+0x28>
 80052c0:	d902      	bls.n	80052c8 <_free_r+0x80>
 80052c2:	230c      	movs	r3, #12
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	e7d3      	b.n	8005270 <_free_r+0x28>
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1961      	adds	r1, r4, r5
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf04      	itt	eq
 80052d0:	6819      	ldreq	r1, [r3, #0]
 80052d2:	685b      	ldreq	r3, [r3, #4]
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	bf04      	itt	eq
 80052d8:	1949      	addeq	r1, r1, r5
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	6054      	str	r4, [r2, #4]
 80052de:	e7c7      	b.n	8005270 <_free_r+0x28>
 80052e0:	b003      	add	sp, #12
 80052e2:	bd30      	pop	{r4, r5, pc}
 80052e4:	20000108 	.word	0x20000108

080052e8 <_malloc_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	1ccd      	adds	r5, r1, #3
 80052ec:	f025 0503 	bic.w	r5, r5, #3
 80052f0:	3508      	adds	r5, #8
 80052f2:	2d0c      	cmp	r5, #12
 80052f4:	bf38      	it	cc
 80052f6:	250c      	movcc	r5, #12
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	4606      	mov	r6, r0
 80052fc:	db01      	blt.n	8005302 <_malloc_r+0x1a>
 80052fe:	42a9      	cmp	r1, r5
 8005300:	d903      	bls.n	800530a <_malloc_r+0x22>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	2000      	movs	r0, #0
 8005308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530a:	f000 fe2b 	bl	8005f64 <__malloc_lock>
 800530e:	4921      	ldr	r1, [pc, #132]	; (8005394 <_malloc_r+0xac>)
 8005310:	680a      	ldr	r2, [r1, #0]
 8005312:	4614      	mov	r4, r2
 8005314:	b99c      	cbnz	r4, 800533e <_malloc_r+0x56>
 8005316:	4f20      	ldr	r7, [pc, #128]	; (8005398 <_malloc_r+0xb0>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	b923      	cbnz	r3, 8005326 <_malloc_r+0x3e>
 800531c:	4621      	mov	r1, r4
 800531e:	4630      	mov	r0, r6
 8005320:	f000 fb2a 	bl	8005978 <_sbrk_r>
 8005324:	6038      	str	r0, [r7, #0]
 8005326:	4629      	mov	r1, r5
 8005328:	4630      	mov	r0, r6
 800532a:	f000 fb25 	bl	8005978 <_sbrk_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d123      	bne.n	800537a <_malloc_r+0x92>
 8005332:	230c      	movs	r3, #12
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	4630      	mov	r0, r6
 8005338:	f000 fe1a 	bl	8005f70 <__malloc_unlock>
 800533c:	e7e3      	b.n	8005306 <_malloc_r+0x1e>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	1b5b      	subs	r3, r3, r5
 8005342:	d417      	bmi.n	8005374 <_malloc_r+0x8c>
 8005344:	2b0b      	cmp	r3, #11
 8005346:	d903      	bls.n	8005350 <_malloc_r+0x68>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	441c      	add	r4, r3
 800534c:	6025      	str	r5, [r4, #0]
 800534e:	e004      	b.n	800535a <_malloc_r+0x72>
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	42a2      	cmp	r2, r4
 8005354:	bf0c      	ite	eq
 8005356:	600b      	streq	r3, [r1, #0]
 8005358:	6053      	strne	r3, [r2, #4]
 800535a:	4630      	mov	r0, r6
 800535c:	f000 fe08 	bl	8005f70 <__malloc_unlock>
 8005360:	f104 000b 	add.w	r0, r4, #11
 8005364:	1d23      	adds	r3, r4, #4
 8005366:	f020 0007 	bic.w	r0, r0, #7
 800536a:	1ac2      	subs	r2, r0, r3
 800536c:	d0cc      	beq.n	8005308 <_malloc_r+0x20>
 800536e:	1a1b      	subs	r3, r3, r0
 8005370:	50a3      	str	r3, [r4, r2]
 8005372:	e7c9      	b.n	8005308 <_malloc_r+0x20>
 8005374:	4622      	mov	r2, r4
 8005376:	6864      	ldr	r4, [r4, #4]
 8005378:	e7cc      	b.n	8005314 <_malloc_r+0x2c>
 800537a:	1cc4      	adds	r4, r0, #3
 800537c:	f024 0403 	bic.w	r4, r4, #3
 8005380:	42a0      	cmp	r0, r4
 8005382:	d0e3      	beq.n	800534c <_malloc_r+0x64>
 8005384:	1a21      	subs	r1, r4, r0
 8005386:	4630      	mov	r0, r6
 8005388:	f000 faf6 	bl	8005978 <_sbrk_r>
 800538c:	3001      	adds	r0, #1
 800538e:	d1dd      	bne.n	800534c <_malloc_r+0x64>
 8005390:	e7cf      	b.n	8005332 <_malloc_r+0x4a>
 8005392:	bf00      	nop
 8005394:	20000108 	.word	0x20000108
 8005398:	2000010c 	.word	0x2000010c

0800539c <__sfputc_r>:
 800539c:	6893      	ldr	r3, [r2, #8]
 800539e:	3b01      	subs	r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	b410      	push	{r4}
 80053a4:	6093      	str	r3, [r2, #8]
 80053a6:	da08      	bge.n	80053ba <__sfputc_r+0x1e>
 80053a8:	6994      	ldr	r4, [r2, #24]
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	db01      	blt.n	80053b2 <__sfputc_r+0x16>
 80053ae:	290a      	cmp	r1, #10
 80053b0:	d103      	bne.n	80053ba <__sfputc_r+0x1e>
 80053b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b6:	f000 baef 	b.w	8005998 <__swbuf_r>
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	1c58      	adds	r0, r3, #1
 80053be:	6010      	str	r0, [r2, #0]
 80053c0:	7019      	strb	r1, [r3, #0]
 80053c2:	4608      	mov	r0, r1
 80053c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <__sfputs_r>:
 80053ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	4614      	mov	r4, r2
 80053d2:	18d5      	adds	r5, r2, r3
 80053d4:	42ac      	cmp	r4, r5
 80053d6:	d101      	bne.n	80053dc <__sfputs_r+0x12>
 80053d8:	2000      	movs	r0, #0
 80053da:	e007      	b.n	80053ec <__sfputs_r+0x22>
 80053dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e0:	463a      	mov	r2, r7
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7ff ffda 	bl	800539c <__sfputc_r>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d1f3      	bne.n	80053d4 <__sfputs_r+0xa>
 80053ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053f0 <_vfiprintf_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	460d      	mov	r5, r1
 80053f6:	b09d      	sub	sp, #116	; 0x74
 80053f8:	4614      	mov	r4, r2
 80053fa:	4698      	mov	r8, r3
 80053fc:	4606      	mov	r6, r0
 80053fe:	b118      	cbz	r0, 8005408 <_vfiprintf_r+0x18>
 8005400:	6983      	ldr	r3, [r0, #24]
 8005402:	b90b      	cbnz	r3, 8005408 <_vfiprintf_r+0x18>
 8005404:	f000 fcaa 	bl	8005d5c <__sinit>
 8005408:	4b89      	ldr	r3, [pc, #548]	; (8005630 <_vfiprintf_r+0x240>)
 800540a:	429d      	cmp	r5, r3
 800540c:	d11b      	bne.n	8005446 <_vfiprintf_r+0x56>
 800540e:	6875      	ldr	r5, [r6, #4]
 8005410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	d405      	bmi.n	8005422 <_vfiprintf_r+0x32>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	059a      	lsls	r2, r3, #22
 800541a:	d402      	bmi.n	8005422 <_vfiprintf_r+0x32>
 800541c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541e:	f000 fd3b 	bl	8005e98 <__retarget_lock_acquire_recursive>
 8005422:	89ab      	ldrh	r3, [r5, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	d501      	bpl.n	800542c <_vfiprintf_r+0x3c>
 8005428:	692b      	ldr	r3, [r5, #16]
 800542a:	b9eb      	cbnz	r3, 8005468 <_vfiprintf_r+0x78>
 800542c:	4629      	mov	r1, r5
 800542e:	4630      	mov	r0, r6
 8005430:	f000 fb04 	bl	8005a3c <__swsetup_r>
 8005434:	b1c0      	cbz	r0, 8005468 <_vfiprintf_r+0x78>
 8005436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005438:	07dc      	lsls	r4, r3, #31
 800543a:	d50e      	bpl.n	800545a <_vfiprintf_r+0x6a>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b01d      	add	sp, #116	; 0x74
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <_vfiprintf_r+0x244>)
 8005448:	429d      	cmp	r5, r3
 800544a:	d101      	bne.n	8005450 <_vfiprintf_r+0x60>
 800544c:	68b5      	ldr	r5, [r6, #8]
 800544e:	e7df      	b.n	8005410 <_vfiprintf_r+0x20>
 8005450:	4b79      	ldr	r3, [pc, #484]	; (8005638 <_vfiprintf_r+0x248>)
 8005452:	429d      	cmp	r5, r3
 8005454:	bf08      	it	eq
 8005456:	68f5      	ldreq	r5, [r6, #12]
 8005458:	e7da      	b.n	8005410 <_vfiprintf_r+0x20>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	0598      	lsls	r0, r3, #22
 800545e:	d4ed      	bmi.n	800543c <_vfiprintf_r+0x4c>
 8005460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005462:	f000 fd1a 	bl	8005e9a <__retarget_lock_release_recursive>
 8005466:	e7e9      	b.n	800543c <_vfiprintf_r+0x4c>
 8005468:	2300      	movs	r3, #0
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
 800546c:	2320      	movs	r3, #32
 800546e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005472:	f8cd 800c 	str.w	r8, [sp, #12]
 8005476:	2330      	movs	r3, #48	; 0x30
 8005478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800563c <_vfiprintf_r+0x24c>
 800547c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005480:	f04f 0901 	mov.w	r9, #1
 8005484:	4623      	mov	r3, r4
 8005486:	469a      	mov	sl, r3
 8005488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800548c:	b10a      	cbz	r2, 8005492 <_vfiprintf_r+0xa2>
 800548e:	2a25      	cmp	r2, #37	; 0x25
 8005490:	d1f9      	bne.n	8005486 <_vfiprintf_r+0x96>
 8005492:	ebba 0b04 	subs.w	fp, sl, r4
 8005496:	d00b      	beq.n	80054b0 <_vfiprintf_r+0xc0>
 8005498:	465b      	mov	r3, fp
 800549a:	4622      	mov	r2, r4
 800549c:	4629      	mov	r1, r5
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ff93 	bl	80053ca <__sfputs_r>
 80054a4:	3001      	adds	r0, #1
 80054a6:	f000 80aa 	beq.w	80055fe <_vfiprintf_r+0x20e>
 80054aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ac:	445a      	add	r2, fp
 80054ae:	9209      	str	r2, [sp, #36]	; 0x24
 80054b0:	f89a 3000 	ldrb.w	r3, [sl]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a2 	beq.w	80055fe <_vfiprintf_r+0x20e>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c4:	f10a 0a01 	add.w	sl, sl, #1
 80054c8:	9304      	str	r3, [sp, #16]
 80054ca:	9307      	str	r3, [sp, #28]
 80054cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054d0:	931a      	str	r3, [sp, #104]	; 0x68
 80054d2:	4654      	mov	r4, sl
 80054d4:	2205      	movs	r2, #5
 80054d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054da:	4858      	ldr	r0, [pc, #352]	; (800563c <_vfiprintf_r+0x24c>)
 80054dc:	f7fa fe78 	bl	80001d0 <memchr>
 80054e0:	9a04      	ldr	r2, [sp, #16]
 80054e2:	b9d8      	cbnz	r0, 800551c <_vfiprintf_r+0x12c>
 80054e4:	06d1      	lsls	r1, r2, #27
 80054e6:	bf44      	itt	mi
 80054e8:	2320      	movmi	r3, #32
 80054ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ee:	0713      	lsls	r3, r2, #28
 80054f0:	bf44      	itt	mi
 80054f2:	232b      	movmi	r3, #43	; 0x2b
 80054f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f8:	f89a 3000 	ldrb.w	r3, [sl]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d015      	beq.n	800552c <_vfiprintf_r+0x13c>
 8005500:	9a07      	ldr	r2, [sp, #28]
 8005502:	4654      	mov	r4, sl
 8005504:	2000      	movs	r0, #0
 8005506:	f04f 0c0a 	mov.w	ip, #10
 800550a:	4621      	mov	r1, r4
 800550c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005510:	3b30      	subs	r3, #48	; 0x30
 8005512:	2b09      	cmp	r3, #9
 8005514:	d94e      	bls.n	80055b4 <_vfiprintf_r+0x1c4>
 8005516:	b1b0      	cbz	r0, 8005546 <_vfiprintf_r+0x156>
 8005518:	9207      	str	r2, [sp, #28]
 800551a:	e014      	b.n	8005546 <_vfiprintf_r+0x156>
 800551c:	eba0 0308 	sub.w	r3, r0, r8
 8005520:	fa09 f303 	lsl.w	r3, r9, r3
 8005524:	4313      	orrs	r3, r2
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	46a2      	mov	sl, r4
 800552a:	e7d2      	b.n	80054d2 <_vfiprintf_r+0xe2>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	1d19      	adds	r1, r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	9103      	str	r1, [sp, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfbb      	ittet	lt
 8005538:	425b      	neglt	r3, r3
 800553a:	f042 0202 	orrlt.w	r2, r2, #2
 800553e:	9307      	strge	r3, [sp, #28]
 8005540:	9307      	strlt	r3, [sp, #28]
 8005542:	bfb8      	it	lt
 8005544:	9204      	strlt	r2, [sp, #16]
 8005546:	7823      	ldrb	r3, [r4, #0]
 8005548:	2b2e      	cmp	r3, #46	; 0x2e
 800554a:	d10c      	bne.n	8005566 <_vfiprintf_r+0x176>
 800554c:	7863      	ldrb	r3, [r4, #1]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	d135      	bne.n	80055be <_vfiprintf_r+0x1ce>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	1d1a      	adds	r2, r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	9203      	str	r2, [sp, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfb8      	it	lt
 800555e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005562:	3402      	adds	r4, #2
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800564c <_vfiprintf_r+0x25c>
 800556a:	7821      	ldrb	r1, [r4, #0]
 800556c:	2203      	movs	r2, #3
 800556e:	4650      	mov	r0, sl
 8005570:	f7fa fe2e 	bl	80001d0 <memchr>
 8005574:	b140      	cbz	r0, 8005588 <_vfiprintf_r+0x198>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	eba0 000a 	sub.w	r0, r0, sl
 800557c:	fa03 f000 	lsl.w	r0, r3, r0
 8005580:	9b04      	ldr	r3, [sp, #16]
 8005582:	4303      	orrs	r3, r0
 8005584:	3401      	adds	r4, #1
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558c:	482c      	ldr	r0, [pc, #176]	; (8005640 <_vfiprintf_r+0x250>)
 800558e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005592:	2206      	movs	r2, #6
 8005594:	f7fa fe1c 	bl	80001d0 <memchr>
 8005598:	2800      	cmp	r0, #0
 800559a:	d03f      	beq.n	800561c <_vfiprintf_r+0x22c>
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <_vfiprintf_r+0x254>)
 800559e:	bb1b      	cbnz	r3, 80055e8 <_vfiprintf_r+0x1f8>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	3307      	adds	r3, #7
 80055a4:	f023 0307 	bic.w	r3, r3, #7
 80055a8:	3308      	adds	r3, #8
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ae:	443b      	add	r3, r7
 80055b0:	9309      	str	r3, [sp, #36]	; 0x24
 80055b2:	e767      	b.n	8005484 <_vfiprintf_r+0x94>
 80055b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055b8:	460c      	mov	r4, r1
 80055ba:	2001      	movs	r0, #1
 80055bc:	e7a5      	b.n	800550a <_vfiprintf_r+0x11a>
 80055be:	2300      	movs	r3, #0
 80055c0:	3401      	adds	r4, #1
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	4619      	mov	r1, r3
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4620      	mov	r0, r4
 80055cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d0:	3a30      	subs	r2, #48	; 0x30
 80055d2:	2a09      	cmp	r2, #9
 80055d4:	d903      	bls.n	80055de <_vfiprintf_r+0x1ee>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c5      	beq.n	8005566 <_vfiprintf_r+0x176>
 80055da:	9105      	str	r1, [sp, #20]
 80055dc:	e7c3      	b.n	8005566 <_vfiprintf_r+0x176>
 80055de:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e2:	4604      	mov	r4, r0
 80055e4:	2301      	movs	r3, #1
 80055e6:	e7f0      	b.n	80055ca <_vfiprintf_r+0x1da>
 80055e8:	ab03      	add	r3, sp, #12
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	462a      	mov	r2, r5
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <_vfiprintf_r+0x258>)
 80055f0:	a904      	add	r1, sp, #16
 80055f2:	4630      	mov	r0, r6
 80055f4:	f3af 8000 	nop.w
 80055f8:	4607      	mov	r7, r0
 80055fa:	1c78      	adds	r0, r7, #1
 80055fc:	d1d6      	bne.n	80055ac <_vfiprintf_r+0x1bc>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005600:	07d9      	lsls	r1, r3, #31
 8005602:	d405      	bmi.n	8005610 <_vfiprintf_r+0x220>
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	059a      	lsls	r2, r3, #22
 8005608:	d402      	bmi.n	8005610 <_vfiprintf_r+0x220>
 800560a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800560c:	f000 fc45 	bl	8005e9a <__retarget_lock_release_recursive>
 8005610:	89ab      	ldrh	r3, [r5, #12]
 8005612:	065b      	lsls	r3, r3, #25
 8005614:	f53f af12 	bmi.w	800543c <_vfiprintf_r+0x4c>
 8005618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800561a:	e711      	b.n	8005440 <_vfiprintf_r+0x50>
 800561c:	ab03      	add	r3, sp, #12
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	462a      	mov	r2, r5
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <_vfiprintf_r+0x258>)
 8005624:	a904      	add	r1, sp, #16
 8005626:	4630      	mov	r0, r6
 8005628:	f000 f880 	bl	800572c <_printf_i>
 800562c:	e7e4      	b.n	80055f8 <_vfiprintf_r+0x208>
 800562e:	bf00      	nop
 8005630:	08006d3c 	.word	0x08006d3c
 8005634:	08006d5c 	.word	0x08006d5c
 8005638:	08006d1c 	.word	0x08006d1c
 800563c:	08006ce6 	.word	0x08006ce6
 8005640:	08006cf0 	.word	0x08006cf0
 8005644:	00000000 	.word	0x00000000
 8005648:	080053cb 	.word	0x080053cb
 800564c:	08006cec 	.word	0x08006cec

08005650 <_printf_common>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	4616      	mov	r6, r2
 8005656:	4699      	mov	r9, r3
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005660:	4293      	cmp	r3, r2
 8005662:	bfb8      	it	lt
 8005664:	4613      	movlt	r3, r2
 8005666:	6033      	str	r3, [r6, #0]
 8005668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800566c:	4607      	mov	r7, r0
 800566e:	460c      	mov	r4, r1
 8005670:	b10a      	cbz	r2, 8005676 <_printf_common+0x26>
 8005672:	3301      	adds	r3, #1
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	0699      	lsls	r1, r3, #26
 800567a:	bf42      	ittt	mi
 800567c:	6833      	ldrmi	r3, [r6, #0]
 800567e:	3302      	addmi	r3, #2
 8005680:	6033      	strmi	r3, [r6, #0]
 8005682:	6825      	ldr	r5, [r4, #0]
 8005684:	f015 0506 	ands.w	r5, r5, #6
 8005688:	d106      	bne.n	8005698 <_printf_common+0x48>
 800568a:	f104 0a19 	add.w	sl, r4, #25
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	42ab      	cmp	r3, r5
 8005696:	dc26      	bgt.n	80056e6 <_printf_common+0x96>
 8005698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800569c:	1e13      	subs	r3, r2, #0
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	bf18      	it	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	0692      	lsls	r2, r2, #26
 80056a6:	d42b      	bmi.n	8005700 <_printf_common+0xb0>
 80056a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ac:	4649      	mov	r1, r9
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c0      	blx	r8
 80056b2:	3001      	adds	r0, #1
 80056b4:	d01e      	beq.n	80056f4 <_printf_common+0xa4>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	68e5      	ldr	r5, [r4, #12]
 80056ba:	6832      	ldr	r2, [r6, #0]
 80056bc:	f003 0306 	and.w	r3, r3, #6
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	bf08      	it	eq
 80056c4:	1aad      	subeq	r5, r5, r2
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	6922      	ldr	r2, [r4, #16]
 80056ca:	bf0c      	ite	eq
 80056cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d0:	2500      	movne	r5, #0
 80056d2:	4293      	cmp	r3, r2
 80056d4:	bfc4      	itt	gt
 80056d6:	1a9b      	subgt	r3, r3, r2
 80056d8:	18ed      	addgt	r5, r5, r3
 80056da:	2600      	movs	r6, #0
 80056dc:	341a      	adds	r4, #26
 80056de:	42b5      	cmp	r5, r6
 80056e0:	d11a      	bne.n	8005718 <_printf_common+0xc8>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e008      	b.n	80056f8 <_printf_common+0xa8>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4649      	mov	r1, r9
 80056ec:	4638      	mov	r0, r7
 80056ee:	47c0      	blx	r8
 80056f0:	3001      	adds	r0, #1
 80056f2:	d103      	bne.n	80056fc <_printf_common+0xac>
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	3501      	adds	r5, #1
 80056fe:	e7c6      	b.n	800568e <_printf_common+0x3e>
 8005700:	18e1      	adds	r1, r4, r3
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	2030      	movs	r0, #48	; 0x30
 8005706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800570a:	4422      	add	r2, r4
 800570c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005714:	3302      	adds	r3, #2
 8005716:	e7c7      	b.n	80056a8 <_printf_common+0x58>
 8005718:	2301      	movs	r3, #1
 800571a:	4622      	mov	r2, r4
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d0e6      	beq.n	80056f4 <_printf_common+0xa4>
 8005726:	3601      	adds	r6, #1
 8005728:	e7d9      	b.n	80056de <_printf_common+0x8e>
	...

0800572c <_printf_i>:
 800572c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	460c      	mov	r4, r1
 8005732:	4691      	mov	r9, r2
 8005734:	7e27      	ldrb	r7, [r4, #24]
 8005736:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005738:	2f78      	cmp	r7, #120	; 0x78
 800573a:	4680      	mov	r8, r0
 800573c:	469a      	mov	sl, r3
 800573e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005742:	d807      	bhi.n	8005754 <_printf_i+0x28>
 8005744:	2f62      	cmp	r7, #98	; 0x62
 8005746:	d80a      	bhi.n	800575e <_printf_i+0x32>
 8005748:	2f00      	cmp	r7, #0
 800574a:	f000 80d8 	beq.w	80058fe <_printf_i+0x1d2>
 800574e:	2f58      	cmp	r7, #88	; 0x58
 8005750:	f000 80a3 	beq.w	800589a <_printf_i+0x16e>
 8005754:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800575c:	e03a      	b.n	80057d4 <_printf_i+0xa8>
 800575e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005762:	2b15      	cmp	r3, #21
 8005764:	d8f6      	bhi.n	8005754 <_printf_i+0x28>
 8005766:	a001      	add	r0, pc, #4	; (adr r0, 800576c <_printf_i+0x40>)
 8005768:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800576c:	080057c5 	.word	0x080057c5
 8005770:	080057d9 	.word	0x080057d9
 8005774:	08005755 	.word	0x08005755
 8005778:	08005755 	.word	0x08005755
 800577c:	08005755 	.word	0x08005755
 8005780:	08005755 	.word	0x08005755
 8005784:	080057d9 	.word	0x080057d9
 8005788:	08005755 	.word	0x08005755
 800578c:	08005755 	.word	0x08005755
 8005790:	08005755 	.word	0x08005755
 8005794:	08005755 	.word	0x08005755
 8005798:	080058e5 	.word	0x080058e5
 800579c:	08005809 	.word	0x08005809
 80057a0:	080058c7 	.word	0x080058c7
 80057a4:	08005755 	.word	0x08005755
 80057a8:	08005755 	.word	0x08005755
 80057ac:	08005907 	.word	0x08005907
 80057b0:	08005755 	.word	0x08005755
 80057b4:	08005809 	.word	0x08005809
 80057b8:	08005755 	.word	0x08005755
 80057bc:	08005755 	.word	0x08005755
 80057c0:	080058cf 	.word	0x080058cf
 80057c4:	680b      	ldr	r3, [r1, #0]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	600a      	str	r2, [r1, #0]
 80057cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0a3      	b.n	8005920 <_printf_i+0x1f4>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	6808      	ldr	r0, [r1, #0]
 80057dc:	062e      	lsls	r6, r5, #24
 80057de:	f100 0304 	add.w	r3, r0, #4
 80057e2:	d50a      	bpl.n	80057fa <_printf_i+0xce>
 80057e4:	6805      	ldr	r5, [r0, #0]
 80057e6:	600b      	str	r3, [r1, #0]
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	da03      	bge.n	80057f4 <_printf_i+0xc8>
 80057ec:	232d      	movs	r3, #45	; 0x2d
 80057ee:	426d      	negs	r5, r5
 80057f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f4:	485e      	ldr	r0, [pc, #376]	; (8005970 <_printf_i+0x244>)
 80057f6:	230a      	movs	r3, #10
 80057f8:	e019      	b.n	800582e <_printf_i+0x102>
 80057fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057fe:	6805      	ldr	r5, [r0, #0]
 8005800:	600b      	str	r3, [r1, #0]
 8005802:	bf18      	it	ne
 8005804:	b22d      	sxthne	r5, r5
 8005806:	e7ef      	b.n	80057e8 <_printf_i+0xbc>
 8005808:	680b      	ldr	r3, [r1, #0]
 800580a:	6825      	ldr	r5, [r4, #0]
 800580c:	1d18      	adds	r0, r3, #4
 800580e:	6008      	str	r0, [r1, #0]
 8005810:	0628      	lsls	r0, r5, #24
 8005812:	d501      	bpl.n	8005818 <_printf_i+0xec>
 8005814:	681d      	ldr	r5, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0xf2>
 8005818:	0669      	lsls	r1, r5, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0xe8>
 800581c:	881d      	ldrh	r5, [r3, #0]
 800581e:	4854      	ldr	r0, [pc, #336]	; (8005970 <_printf_i+0x244>)
 8005820:	2f6f      	cmp	r7, #111	; 0x6f
 8005822:	bf0c      	ite	eq
 8005824:	2308      	moveq	r3, #8
 8005826:	230a      	movne	r3, #10
 8005828:	2100      	movs	r1, #0
 800582a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800582e:	6866      	ldr	r6, [r4, #4]
 8005830:	60a6      	str	r6, [r4, #8]
 8005832:	2e00      	cmp	r6, #0
 8005834:	bfa2      	ittt	ge
 8005836:	6821      	ldrge	r1, [r4, #0]
 8005838:	f021 0104 	bicge.w	r1, r1, #4
 800583c:	6021      	strge	r1, [r4, #0]
 800583e:	b90d      	cbnz	r5, 8005844 <_printf_i+0x118>
 8005840:	2e00      	cmp	r6, #0
 8005842:	d04d      	beq.n	80058e0 <_printf_i+0x1b4>
 8005844:	4616      	mov	r6, r2
 8005846:	fbb5 f1f3 	udiv	r1, r5, r3
 800584a:	fb03 5711 	mls	r7, r3, r1, r5
 800584e:	5dc7      	ldrb	r7, [r0, r7]
 8005850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005854:	462f      	mov	r7, r5
 8005856:	42bb      	cmp	r3, r7
 8005858:	460d      	mov	r5, r1
 800585a:	d9f4      	bls.n	8005846 <_printf_i+0x11a>
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10b      	bne.n	8005878 <_printf_i+0x14c>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	07df      	lsls	r7, r3, #31
 8005864:	d508      	bpl.n	8005878 <_printf_i+0x14c>
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	4299      	cmp	r1, r3
 800586c:	bfde      	ittt	le
 800586e:	2330      	movle	r3, #48	; 0x30
 8005870:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005874:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005878:	1b92      	subs	r2, r2, r6
 800587a:	6122      	str	r2, [r4, #16]
 800587c:	f8cd a000 	str.w	sl, [sp]
 8005880:	464b      	mov	r3, r9
 8005882:	aa03      	add	r2, sp, #12
 8005884:	4621      	mov	r1, r4
 8005886:	4640      	mov	r0, r8
 8005888:	f7ff fee2 	bl	8005650 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	d14c      	bne.n	800592a <_printf_i+0x1fe>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	b004      	add	sp, #16
 8005896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589a:	4835      	ldr	r0, [pc, #212]	; (8005970 <_printf_i+0x244>)
 800589c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	680e      	ldr	r6, [r1, #0]
 80058a4:	061f      	lsls	r7, r3, #24
 80058a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80058aa:	600e      	str	r6, [r1, #0]
 80058ac:	d514      	bpl.n	80058d8 <_printf_i+0x1ac>
 80058ae:	07d9      	lsls	r1, r3, #31
 80058b0:	bf44      	itt	mi
 80058b2:	f043 0320 	orrmi.w	r3, r3, #32
 80058b6:	6023      	strmi	r3, [r4, #0]
 80058b8:	b91d      	cbnz	r5, 80058c2 <_printf_i+0x196>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f023 0320 	bic.w	r3, r3, #32
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	2310      	movs	r3, #16
 80058c4:	e7b0      	b.n	8005828 <_printf_i+0xfc>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f043 0320 	orr.w	r3, r3, #32
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	2378      	movs	r3, #120	; 0x78
 80058d0:	4828      	ldr	r0, [pc, #160]	; (8005974 <_printf_i+0x248>)
 80058d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058d6:	e7e3      	b.n	80058a0 <_printf_i+0x174>
 80058d8:	065e      	lsls	r6, r3, #25
 80058da:	bf48      	it	mi
 80058dc:	b2ad      	uxthmi	r5, r5
 80058de:	e7e6      	b.n	80058ae <_printf_i+0x182>
 80058e0:	4616      	mov	r6, r2
 80058e2:	e7bb      	b.n	800585c <_printf_i+0x130>
 80058e4:	680b      	ldr	r3, [r1, #0]
 80058e6:	6826      	ldr	r6, [r4, #0]
 80058e8:	6960      	ldr	r0, [r4, #20]
 80058ea:	1d1d      	adds	r5, r3, #4
 80058ec:	600d      	str	r5, [r1, #0]
 80058ee:	0635      	lsls	r5, r6, #24
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0x1cc>
 80058f4:	6018      	str	r0, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0x1d2>
 80058f8:	0671      	lsls	r1, r6, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0x1c8>
 80058fc:	8018      	strh	r0, [r3, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	4616      	mov	r6, r2
 8005904:	e7ba      	b.n	800587c <_printf_i+0x150>
 8005906:	680b      	ldr	r3, [r1, #0]
 8005908:	1d1a      	adds	r2, r3, #4
 800590a:	600a      	str	r2, [r1, #0]
 800590c:	681e      	ldr	r6, [r3, #0]
 800590e:	6862      	ldr	r2, [r4, #4]
 8005910:	2100      	movs	r1, #0
 8005912:	4630      	mov	r0, r6
 8005914:	f7fa fc5c 	bl	80001d0 <memchr>
 8005918:	b108      	cbz	r0, 800591e <_printf_i+0x1f2>
 800591a:	1b80      	subs	r0, r0, r6
 800591c:	6060      	str	r0, [r4, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	2300      	movs	r3, #0
 8005924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005928:	e7a8      	b.n	800587c <_printf_i+0x150>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	4632      	mov	r2, r6
 800592e:	4649      	mov	r1, r9
 8005930:	4640      	mov	r0, r8
 8005932:	47d0      	blx	sl
 8005934:	3001      	adds	r0, #1
 8005936:	d0ab      	beq.n	8005890 <_printf_i+0x164>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	079b      	lsls	r3, r3, #30
 800593c:	d413      	bmi.n	8005966 <_printf_i+0x23a>
 800593e:	68e0      	ldr	r0, [r4, #12]
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	4298      	cmp	r0, r3
 8005944:	bfb8      	it	lt
 8005946:	4618      	movlt	r0, r3
 8005948:	e7a4      	b.n	8005894 <_printf_i+0x168>
 800594a:	2301      	movs	r3, #1
 800594c:	4632      	mov	r2, r6
 800594e:	4649      	mov	r1, r9
 8005950:	4640      	mov	r0, r8
 8005952:	47d0      	blx	sl
 8005954:	3001      	adds	r0, #1
 8005956:	d09b      	beq.n	8005890 <_printf_i+0x164>
 8005958:	3501      	adds	r5, #1
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	9903      	ldr	r1, [sp, #12]
 800595e:	1a5b      	subs	r3, r3, r1
 8005960:	42ab      	cmp	r3, r5
 8005962:	dcf2      	bgt.n	800594a <_printf_i+0x21e>
 8005964:	e7eb      	b.n	800593e <_printf_i+0x212>
 8005966:	2500      	movs	r5, #0
 8005968:	f104 0619 	add.w	r6, r4, #25
 800596c:	e7f5      	b.n	800595a <_printf_i+0x22e>
 800596e:	bf00      	nop
 8005970:	08006cf7 	.word	0x08006cf7
 8005974:	08006d08 	.word	0x08006d08

08005978 <_sbrk_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d06      	ldr	r5, [pc, #24]	; (8005994 <_sbrk_r+0x1c>)
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fc fd86 	bl	8002494 <_sbrk>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_sbrk_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_sbrk_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	200002cc 	.word	0x200002cc

08005998 <__swbuf_r>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	460e      	mov	r6, r1
 800599c:	4614      	mov	r4, r2
 800599e:	4605      	mov	r5, r0
 80059a0:	b118      	cbz	r0, 80059aa <__swbuf_r+0x12>
 80059a2:	6983      	ldr	r3, [r0, #24]
 80059a4:	b90b      	cbnz	r3, 80059aa <__swbuf_r+0x12>
 80059a6:	f000 f9d9 	bl	8005d5c <__sinit>
 80059aa:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <__swbuf_r+0x98>)
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d12b      	bne.n	8005a08 <__swbuf_r+0x70>
 80059b0:	686c      	ldr	r4, [r5, #4]
 80059b2:	69a3      	ldr	r3, [r4, #24]
 80059b4:	60a3      	str	r3, [r4, #8]
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	071a      	lsls	r2, r3, #28
 80059ba:	d52f      	bpl.n	8005a1c <__swbuf_r+0x84>
 80059bc:	6923      	ldr	r3, [r4, #16]
 80059be:	b36b      	cbz	r3, 8005a1c <__swbuf_r+0x84>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	1ac0      	subs	r0, r0, r3
 80059c6:	6963      	ldr	r3, [r4, #20]
 80059c8:	b2f6      	uxtb	r6, r6
 80059ca:	4283      	cmp	r3, r0
 80059cc:	4637      	mov	r7, r6
 80059ce:	dc04      	bgt.n	80059da <__swbuf_r+0x42>
 80059d0:	4621      	mov	r1, r4
 80059d2:	4628      	mov	r0, r5
 80059d4:	f000 f92e 	bl	8005c34 <_fflush_r>
 80059d8:	bb30      	cbnz	r0, 8005a28 <__swbuf_r+0x90>
 80059da:	68a3      	ldr	r3, [r4, #8]
 80059dc:	3b01      	subs	r3, #1
 80059de:	60a3      	str	r3, [r4, #8]
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	6022      	str	r2, [r4, #0]
 80059e6:	701e      	strb	r6, [r3, #0]
 80059e8:	6963      	ldr	r3, [r4, #20]
 80059ea:	3001      	adds	r0, #1
 80059ec:	4283      	cmp	r3, r0
 80059ee:	d004      	beq.n	80059fa <__swbuf_r+0x62>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	07db      	lsls	r3, r3, #31
 80059f4:	d506      	bpl.n	8005a04 <__swbuf_r+0x6c>
 80059f6:	2e0a      	cmp	r6, #10
 80059f8:	d104      	bne.n	8005a04 <__swbuf_r+0x6c>
 80059fa:	4621      	mov	r1, r4
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 f919 	bl	8005c34 <_fflush_r>
 8005a02:	b988      	cbnz	r0, 8005a28 <__swbuf_r+0x90>
 8005a04:	4638      	mov	r0, r7
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <__swbuf_r+0x9c>)
 8005a0a:	429c      	cmp	r4, r3
 8005a0c:	d101      	bne.n	8005a12 <__swbuf_r+0x7a>
 8005a0e:	68ac      	ldr	r4, [r5, #8]
 8005a10:	e7cf      	b.n	80059b2 <__swbuf_r+0x1a>
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <__swbuf_r+0xa0>)
 8005a14:	429c      	cmp	r4, r3
 8005a16:	bf08      	it	eq
 8005a18:	68ec      	ldreq	r4, [r5, #12]
 8005a1a:	e7ca      	b.n	80059b2 <__swbuf_r+0x1a>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f80c 	bl	8005a3c <__swsetup_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0cb      	beq.n	80059c0 <__swbuf_r+0x28>
 8005a28:	f04f 37ff 	mov.w	r7, #4294967295
 8005a2c:	e7ea      	b.n	8005a04 <__swbuf_r+0x6c>
 8005a2e:	bf00      	nop
 8005a30:	08006d3c 	.word	0x08006d3c
 8005a34:	08006d5c 	.word	0x08006d5c
 8005a38:	08006d1c 	.word	0x08006d1c

08005a3c <__swsetup_r>:
 8005a3c:	4b32      	ldr	r3, [pc, #200]	; (8005b08 <__swsetup_r+0xcc>)
 8005a3e:	b570      	push	{r4, r5, r6, lr}
 8005a40:	681d      	ldr	r5, [r3, #0]
 8005a42:	4606      	mov	r6, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	b125      	cbz	r5, 8005a52 <__swsetup_r+0x16>
 8005a48:	69ab      	ldr	r3, [r5, #24]
 8005a4a:	b913      	cbnz	r3, 8005a52 <__swsetup_r+0x16>
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f000 f985 	bl	8005d5c <__sinit>
 8005a52:	4b2e      	ldr	r3, [pc, #184]	; (8005b0c <__swsetup_r+0xd0>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d10f      	bne.n	8005a78 <__swsetup_r+0x3c>
 8005a58:	686c      	ldr	r4, [r5, #4]
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a60:	0719      	lsls	r1, r3, #28
 8005a62:	d42c      	bmi.n	8005abe <__swsetup_r+0x82>
 8005a64:	06dd      	lsls	r5, r3, #27
 8005a66:	d411      	bmi.n	8005a8c <__swsetup_r+0x50>
 8005a68:	2309      	movs	r3, #9
 8005a6a:	6033      	str	r3, [r6, #0]
 8005a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	e03e      	b.n	8005af6 <__swsetup_r+0xba>
 8005a78:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <__swsetup_r+0xd4>)
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	d101      	bne.n	8005a82 <__swsetup_r+0x46>
 8005a7e:	68ac      	ldr	r4, [r5, #8]
 8005a80:	e7eb      	b.n	8005a5a <__swsetup_r+0x1e>
 8005a82:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <__swsetup_r+0xd8>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	bf08      	it	eq
 8005a88:	68ec      	ldreq	r4, [r5, #12]
 8005a8a:	e7e6      	b.n	8005a5a <__swsetup_r+0x1e>
 8005a8c:	0758      	lsls	r0, r3, #29
 8005a8e:	d512      	bpl.n	8005ab6 <__swsetup_r+0x7a>
 8005a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a92:	b141      	cbz	r1, 8005aa6 <__swsetup_r+0x6a>
 8005a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	d002      	beq.n	8005aa2 <__swsetup_r+0x66>
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff fbd3 	bl	8005248 <_free_r>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f043 0308 	orr.w	r3, r3, #8
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	b94b      	cbnz	r3, 8005ad6 <__swsetup_r+0x9a>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d003      	beq.n	8005ad6 <__swsetup_r+0x9a>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f000 fa07 	bl	8005ee4 <__smakebuf_r>
 8005ad6:	89a0      	ldrh	r0, [r4, #12]
 8005ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005adc:	f010 0301 	ands.w	r3, r0, #1
 8005ae0:	d00a      	beq.n	8005af8 <__swsetup_r+0xbc>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60a3      	str	r3, [r4, #8]
 8005ae6:	6963      	ldr	r3, [r4, #20]
 8005ae8:	425b      	negs	r3, r3
 8005aea:	61a3      	str	r3, [r4, #24]
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	b943      	cbnz	r3, 8005b02 <__swsetup_r+0xc6>
 8005af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005af4:	d1ba      	bne.n	8005a6c <__swsetup_r+0x30>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	0781      	lsls	r1, r0, #30
 8005afa:	bf58      	it	pl
 8005afc:	6963      	ldrpl	r3, [r4, #20]
 8005afe:	60a3      	str	r3, [r4, #8]
 8005b00:	e7f4      	b.n	8005aec <__swsetup_r+0xb0>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e7f7      	b.n	8005af6 <__swsetup_r+0xba>
 8005b06:	bf00      	nop
 8005b08:	20000040 	.word	0x20000040
 8005b0c:	08006d3c 	.word	0x08006d3c
 8005b10:	08006d5c 	.word	0x08006d5c
 8005b14:	08006d1c 	.word	0x08006d1c

08005b18 <abort>:
 8005b18:	b508      	push	{r3, lr}
 8005b1a:	2006      	movs	r0, #6
 8005b1c:	f000 fa56 	bl	8005fcc <raise>
 8005b20:	2001      	movs	r0, #1
 8005b22:	f7fc fc3f 	bl	80023a4 <_exit>
	...

08005b28 <__sflush_r>:
 8005b28:	898a      	ldrh	r2, [r1, #12]
 8005b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	4605      	mov	r5, r0
 8005b30:	0710      	lsls	r0, r2, #28
 8005b32:	460c      	mov	r4, r1
 8005b34:	d458      	bmi.n	8005be8 <__sflush_r+0xc0>
 8005b36:	684b      	ldr	r3, [r1, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dc05      	bgt.n	8005b48 <__sflush_r+0x20>
 8005b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dc02      	bgt.n	8005b48 <__sflush_r+0x20>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	d0f9      	beq.n	8005b42 <__sflush_r+0x1a>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b54:	682f      	ldr	r7, [r5, #0]
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	d032      	beq.n	8005bc0 <__sflush_r+0x98>
 8005b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	075a      	lsls	r2, r3, #29
 8005b60:	d505      	bpl.n	8005b6e <__sflush_r+0x46>
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	1ac0      	subs	r0, r0, r3
 8005b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b68:	b10b      	cbz	r3, 8005b6e <__sflush_r+0x46>
 8005b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6c:	1ac0      	subs	r0, r0, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4602      	mov	r2, r0
 8005b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b74:	6a21      	ldr	r1, [r4, #32]
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b0      	blx	r6
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	d106      	bne.n	8005b8e <__sflush_r+0x66>
 8005b80:	6829      	ldr	r1, [r5, #0]
 8005b82:	291d      	cmp	r1, #29
 8005b84:	d82c      	bhi.n	8005be0 <__sflush_r+0xb8>
 8005b86:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <__sflush_r+0x108>)
 8005b88:	40ca      	lsrs	r2, r1
 8005b8a:	07d6      	lsls	r6, r2, #31
 8005b8c:	d528      	bpl.n	8005be0 <__sflush_r+0xb8>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	6062      	str	r2, [r4, #4]
 8005b92:	04d9      	lsls	r1, r3, #19
 8005b94:	6922      	ldr	r2, [r4, #16]
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	d504      	bpl.n	8005ba4 <__sflush_r+0x7c>
 8005b9a:	1c42      	adds	r2, r0, #1
 8005b9c:	d101      	bne.n	8005ba2 <__sflush_r+0x7a>
 8005b9e:	682b      	ldr	r3, [r5, #0]
 8005ba0:	b903      	cbnz	r3, 8005ba4 <__sflush_r+0x7c>
 8005ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba6:	602f      	str	r7, [r5, #0]
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d0ca      	beq.n	8005b42 <__sflush_r+0x1a>
 8005bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	d002      	beq.n	8005bba <__sflush_r+0x92>
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f7ff fb47 	bl	8005248 <_free_r>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8005bbe:	e7c1      	b.n	8005b44 <__sflush_r+0x1c>
 8005bc0:	6a21      	ldr	r1, [r4, #32]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b0      	blx	r6
 8005bc8:	1c41      	adds	r1, r0, #1
 8005bca:	d1c7      	bne.n	8005b5c <__sflush_r+0x34>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0c4      	beq.n	8005b5c <__sflush_r+0x34>
 8005bd2:	2b1d      	cmp	r3, #29
 8005bd4:	d001      	beq.n	8005bda <__sflush_r+0xb2>
 8005bd6:	2b16      	cmp	r3, #22
 8005bd8:	d101      	bne.n	8005bde <__sflush_r+0xb6>
 8005bda:	602f      	str	r7, [r5, #0]
 8005bdc:	e7b1      	b.n	8005b42 <__sflush_r+0x1a>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	e7ad      	b.n	8005b44 <__sflush_r+0x1c>
 8005be8:	690f      	ldr	r7, [r1, #16]
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	d0a9      	beq.n	8005b42 <__sflush_r+0x1a>
 8005bee:	0793      	lsls	r3, r2, #30
 8005bf0:	680e      	ldr	r6, [r1, #0]
 8005bf2:	bf08      	it	eq
 8005bf4:	694b      	ldreq	r3, [r1, #20]
 8005bf6:	600f      	str	r7, [r1, #0]
 8005bf8:	bf18      	it	ne
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	eba6 0807 	sub.w	r8, r6, r7
 8005c00:	608b      	str	r3, [r1, #8]
 8005c02:	f1b8 0f00 	cmp.w	r8, #0
 8005c06:	dd9c      	ble.n	8005b42 <__sflush_r+0x1a>
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c0c:	4643      	mov	r3, r8
 8005c0e:	463a      	mov	r2, r7
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b0      	blx	r6
 8005c14:	2800      	cmp	r0, #0
 8005c16:	dc06      	bgt.n	8005c26 <__sflush_r+0xfe>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e78e      	b.n	8005b44 <__sflush_r+0x1c>
 8005c26:	4407      	add	r7, r0
 8005c28:	eba8 0800 	sub.w	r8, r8, r0
 8005c2c:	e7e9      	b.n	8005c02 <__sflush_r+0xda>
 8005c2e:	bf00      	nop
 8005c30:	20400001 	.word	0x20400001

08005c34 <_fflush_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	690b      	ldr	r3, [r1, #16]
 8005c38:	4605      	mov	r5, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	b913      	cbnz	r3, 8005c44 <_fflush_r+0x10>
 8005c3e:	2500      	movs	r5, #0
 8005c40:	4628      	mov	r0, r5
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	b118      	cbz	r0, 8005c4e <_fflush_r+0x1a>
 8005c46:	6983      	ldr	r3, [r0, #24]
 8005c48:	b90b      	cbnz	r3, 8005c4e <_fflush_r+0x1a>
 8005c4a:	f000 f887 	bl	8005d5c <__sinit>
 8005c4e:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <_fflush_r+0x6c>)
 8005c50:	429c      	cmp	r4, r3
 8005c52:	d11b      	bne.n	8005c8c <_fflush_r+0x58>
 8005c54:	686c      	ldr	r4, [r5, #4]
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ef      	beq.n	8005c3e <_fflush_r+0xa>
 8005c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c60:	07d0      	lsls	r0, r2, #31
 8005c62:	d404      	bmi.n	8005c6e <_fflush_r+0x3a>
 8005c64:	0599      	lsls	r1, r3, #22
 8005c66:	d402      	bmi.n	8005c6e <_fflush_r+0x3a>
 8005c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6a:	f000 f915 	bl	8005e98 <__retarget_lock_acquire_recursive>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7ff ff59 	bl	8005b28 <__sflush_r>
 8005c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c78:	07da      	lsls	r2, r3, #31
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	d4e0      	bmi.n	8005c40 <_fflush_r+0xc>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	059b      	lsls	r3, r3, #22
 8005c82:	d4dd      	bmi.n	8005c40 <_fflush_r+0xc>
 8005c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c86:	f000 f908 	bl	8005e9a <__retarget_lock_release_recursive>
 8005c8a:	e7d9      	b.n	8005c40 <_fflush_r+0xc>
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <_fflush_r+0x70>)
 8005c8e:	429c      	cmp	r4, r3
 8005c90:	d101      	bne.n	8005c96 <_fflush_r+0x62>
 8005c92:	68ac      	ldr	r4, [r5, #8]
 8005c94:	e7df      	b.n	8005c56 <_fflush_r+0x22>
 8005c96:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <_fflush_r+0x74>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	bf08      	it	eq
 8005c9c:	68ec      	ldreq	r4, [r5, #12]
 8005c9e:	e7da      	b.n	8005c56 <_fflush_r+0x22>
 8005ca0:	08006d3c 	.word	0x08006d3c
 8005ca4:	08006d5c 	.word	0x08006d5c
 8005ca8:	08006d1c 	.word	0x08006d1c

08005cac <std>:
 8005cac:	2300      	movs	r3, #0
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cba:	6083      	str	r3, [r0, #8]
 8005cbc:	8181      	strh	r1, [r0, #12]
 8005cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8005cc0:	81c2      	strh	r2, [r0, #14]
 8005cc2:	6183      	str	r3, [r0, #24]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	305c      	adds	r0, #92	; 0x5c
 8005cca:	f7ff f9e3 	bl	8005094 <memset>
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <std+0x38>)
 8005cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <std+0x3c>)
 8005cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x40>)
 8005cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <std+0x44>)
 8005cdc:	6224      	str	r4, [r4, #32]
 8005cde:	6323      	str	r3, [r4, #48]	; 0x30
 8005ce0:	bd10      	pop	{r4, pc}
 8005ce2:	bf00      	nop
 8005ce4:	08006005 	.word	0x08006005
 8005ce8:	08006027 	.word	0x08006027
 8005cec:	0800605f 	.word	0x0800605f
 8005cf0:	08006083 	.word	0x08006083

08005cf4 <_cleanup_r>:
 8005cf4:	4901      	ldr	r1, [pc, #4]	; (8005cfc <_cleanup_r+0x8>)
 8005cf6:	f000 b8af 	b.w	8005e58 <_fwalk_reent>
 8005cfa:	bf00      	nop
 8005cfc:	08005c35 	.word	0x08005c35

08005d00 <__sfmoreglue>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	1e4a      	subs	r2, r1, #1
 8005d04:	2568      	movs	r5, #104	; 0x68
 8005d06:	4355      	muls	r5, r2
 8005d08:	460e      	mov	r6, r1
 8005d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d0e:	f7ff faeb 	bl	80052e8 <_malloc_r>
 8005d12:	4604      	mov	r4, r0
 8005d14:	b140      	cbz	r0, 8005d28 <__sfmoreglue+0x28>
 8005d16:	2100      	movs	r1, #0
 8005d18:	e9c0 1600 	strd	r1, r6, [r0]
 8005d1c:	300c      	adds	r0, #12
 8005d1e:	60a0      	str	r0, [r4, #8]
 8005d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d24:	f7ff f9b6 	bl	8005094 <memset>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}

08005d2c <__sfp_lock_acquire>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__sfp_lock_acquire+0x8>)
 8005d2e:	f000 b8b3 	b.w	8005e98 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	200002d8 	.word	0x200002d8

08005d38 <__sfp_lock_release>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__sfp_lock_release+0x8>)
 8005d3a:	f000 b8ae 	b.w	8005e9a <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	200002d8 	.word	0x200002d8

08005d44 <__sinit_lock_acquire>:
 8005d44:	4801      	ldr	r0, [pc, #4]	; (8005d4c <__sinit_lock_acquire+0x8>)
 8005d46:	f000 b8a7 	b.w	8005e98 <__retarget_lock_acquire_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	200002d3 	.word	0x200002d3

08005d50 <__sinit_lock_release>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__sinit_lock_release+0x8>)
 8005d52:	f000 b8a2 	b.w	8005e9a <__retarget_lock_release_recursive>
 8005d56:	bf00      	nop
 8005d58:	200002d3 	.word	0x200002d3

08005d5c <__sinit>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	f7ff fff0 	bl	8005d44 <__sinit_lock_acquire>
 8005d64:	69a3      	ldr	r3, [r4, #24]
 8005d66:	b11b      	cbz	r3, 8005d70 <__sinit+0x14>
 8005d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6c:	f7ff bff0 	b.w	8005d50 <__sinit_lock_release>
 8005d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d74:	6523      	str	r3, [r4, #80]	; 0x50
 8005d76:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <__sinit+0x68>)
 8005d78:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <__sinit+0x6c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	bf04      	itt	eq
 8005d82:	2301      	moveq	r3, #1
 8005d84:	61a3      	streq	r3, [r4, #24]
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 f820 	bl	8005dcc <__sfp>
 8005d8c:	6060      	str	r0, [r4, #4]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 f81c 	bl	8005dcc <__sfp>
 8005d94:	60a0      	str	r0, [r4, #8]
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f818 	bl	8005dcc <__sfp>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	60e0      	str	r0, [r4, #12]
 8005da0:	2104      	movs	r1, #4
 8005da2:	6860      	ldr	r0, [r4, #4]
 8005da4:	f7ff ff82 	bl	8005cac <std>
 8005da8:	68a0      	ldr	r0, [r4, #8]
 8005daa:	2201      	movs	r2, #1
 8005dac:	2109      	movs	r1, #9
 8005dae:	f7ff ff7d 	bl	8005cac <std>
 8005db2:	68e0      	ldr	r0, [r4, #12]
 8005db4:	2202      	movs	r2, #2
 8005db6:	2112      	movs	r1, #18
 8005db8:	f7ff ff78 	bl	8005cac <std>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	61a3      	str	r3, [r4, #24]
 8005dc0:	e7d2      	b.n	8005d68 <__sinit+0xc>
 8005dc2:	bf00      	nop
 8005dc4:	08006c30 	.word	0x08006c30
 8005dc8:	08005cf5 	.word	0x08005cf5

08005dcc <__sfp>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	4607      	mov	r7, r0
 8005dd0:	f7ff ffac 	bl	8005d2c <__sfp_lock_acquire>
 8005dd4:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <__sfp+0x84>)
 8005dd6:	681e      	ldr	r6, [r3, #0]
 8005dd8:	69b3      	ldr	r3, [r6, #24]
 8005dda:	b913      	cbnz	r3, 8005de2 <__sfp+0x16>
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f7ff ffbd 	bl	8005d5c <__sinit>
 8005de2:	3648      	adds	r6, #72	; 0x48
 8005de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	d503      	bpl.n	8005df4 <__sfp+0x28>
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	b30b      	cbz	r3, 8005e34 <__sfp+0x68>
 8005df0:	6836      	ldr	r6, [r6, #0]
 8005df2:	e7f7      	b.n	8005de4 <__sfp+0x18>
 8005df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005df8:	b9d5      	cbnz	r5, 8005e30 <__sfp+0x64>
 8005dfa:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <__sfp+0x88>)
 8005dfc:	60e3      	str	r3, [r4, #12]
 8005dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e02:	6665      	str	r5, [r4, #100]	; 0x64
 8005e04:	f000 f847 	bl	8005e96 <__retarget_lock_init_recursive>
 8005e08:	f7ff ff96 	bl	8005d38 <__sfp_lock_release>
 8005e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e14:	6025      	str	r5, [r4, #0]
 8005e16:	61a5      	str	r5, [r4, #24]
 8005e18:	2208      	movs	r2, #8
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e20:	f7ff f938 	bl	8005094 <memset>
 8005e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e30:	3468      	adds	r4, #104	; 0x68
 8005e32:	e7d9      	b.n	8005de8 <__sfp+0x1c>
 8005e34:	2104      	movs	r1, #4
 8005e36:	4638      	mov	r0, r7
 8005e38:	f7ff ff62 	bl	8005d00 <__sfmoreglue>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	6030      	str	r0, [r6, #0]
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d1d5      	bne.n	8005df0 <__sfp+0x24>
 8005e44:	f7ff ff78 	bl	8005d38 <__sfp_lock_release>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	e7ee      	b.n	8005e2c <__sfp+0x60>
 8005e4e:	bf00      	nop
 8005e50:	08006c30 	.word	0x08006c30
 8005e54:	ffff0001 	.word	0xffff0001

08005e58 <_fwalk_reent>:
 8005e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	4688      	mov	r8, r1
 8005e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e64:	2700      	movs	r7, #0
 8005e66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005e6e:	d505      	bpl.n	8005e7c <_fwalk_reent+0x24>
 8005e70:	6824      	ldr	r4, [r4, #0]
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	d1f7      	bne.n	8005e66 <_fwalk_reent+0xe>
 8005e76:	4638      	mov	r0, r7
 8005e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7c:	89ab      	ldrh	r3, [r5, #12]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d907      	bls.n	8005e92 <_fwalk_reent+0x3a>
 8005e82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e86:	3301      	adds	r3, #1
 8005e88:	d003      	beq.n	8005e92 <_fwalk_reent+0x3a>
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	47c0      	blx	r8
 8005e90:	4307      	orrs	r7, r0
 8005e92:	3568      	adds	r5, #104	; 0x68
 8005e94:	e7e9      	b.n	8005e6a <_fwalk_reent+0x12>

08005e96 <__retarget_lock_init_recursive>:
 8005e96:	4770      	bx	lr

08005e98 <__retarget_lock_acquire_recursive>:
 8005e98:	4770      	bx	lr

08005e9a <__retarget_lock_release_recursive>:
 8005e9a:	4770      	bx	lr

08005e9c <__swhatbuf_r>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	b096      	sub	sp, #88	; 0x58
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	da07      	bge.n	8005ebe <__swhatbuf_r+0x22>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	89b3      	ldrh	r3, [r6, #12]
 8005eb4:	061a      	lsls	r2, r3, #24
 8005eb6:	d410      	bmi.n	8005eda <__swhatbuf_r+0x3e>
 8005eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ebc:	e00e      	b.n	8005edc <__swhatbuf_r+0x40>
 8005ebe:	466a      	mov	r2, sp
 8005ec0:	f000 f906 	bl	80060d0 <_fstat_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	dbf2      	blt.n	8005eae <__swhatbuf_r+0x12>
 8005ec8:	9a01      	ldr	r2, [sp, #4]
 8005eca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ed2:	425a      	negs	r2, r3
 8005ed4:	415a      	adcs	r2, r3
 8005ed6:	602a      	str	r2, [r5, #0]
 8005ed8:	e7ee      	b.n	8005eb8 <__swhatbuf_r+0x1c>
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	2000      	movs	r0, #0
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	b016      	add	sp, #88	; 0x58
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}

08005ee4 <__smakebuf_r>:
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee8:	079d      	lsls	r5, r3, #30
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	d507      	bpl.n	8005f00 <__smakebuf_r+0x1c>
 8005ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b002      	add	sp, #8
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	ab01      	add	r3, sp, #4
 8005f02:	466a      	mov	r2, sp
 8005f04:	f7ff ffca 	bl	8005e9c <__swhatbuf_r>
 8005f08:	9900      	ldr	r1, [sp, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff f9eb 	bl	80052e8 <_malloc_r>
 8005f12:	b948      	cbnz	r0, 8005f28 <__smakebuf_r+0x44>
 8005f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d4ef      	bmi.n	8005efc <__smakebuf_r+0x18>
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	e7e3      	b.n	8005ef0 <__smakebuf_r+0xc>
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <__smakebuf_r+0x7c>)
 8005f2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	6020      	str	r0, [r4, #0]
 8005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	6163      	str	r3, [r4, #20]
 8005f3a:	9b01      	ldr	r3, [sp, #4]
 8005f3c:	6120      	str	r0, [r4, #16]
 8005f3e:	b15b      	cbz	r3, 8005f58 <__smakebuf_r+0x74>
 8005f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 f8d5 	bl	80060f4 <_isatty_r>
 8005f4a:	b128      	cbz	r0, 8005f58 <__smakebuf_r+0x74>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	89a0      	ldrh	r0, [r4, #12]
 8005f5a:	4305      	orrs	r5, r0
 8005f5c:	81a5      	strh	r5, [r4, #12]
 8005f5e:	e7cd      	b.n	8005efc <__smakebuf_r+0x18>
 8005f60:	08005cf5 	.word	0x08005cf5

08005f64 <__malloc_lock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_lock+0x8>)
 8005f66:	f7ff bf97 	b.w	8005e98 <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	200002d4 	.word	0x200002d4

08005f70 <__malloc_unlock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__malloc_unlock+0x8>)
 8005f72:	f7ff bf92 	b.w	8005e9a <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	200002d4 	.word	0x200002d4

08005f7c <_raise_r>:
 8005f7c:	291f      	cmp	r1, #31
 8005f7e:	b538      	push	{r3, r4, r5, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	460d      	mov	r5, r1
 8005f84:	d904      	bls.n	8005f90 <_raise_r+0x14>
 8005f86:	2316      	movs	r3, #22
 8005f88:	6003      	str	r3, [r0, #0]
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f92:	b112      	cbz	r2, 8005f9a <_raise_r+0x1e>
 8005f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f98:	b94b      	cbnz	r3, 8005fae <_raise_r+0x32>
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f830 	bl	8006000 <_getpid_r>
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005faa:	f000 b817 	b.w	8005fdc <_kill_r>
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d00a      	beq.n	8005fc8 <_raise_r+0x4c>
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	d103      	bne.n	8005fbe <_raise_r+0x42>
 8005fb6:	2316      	movs	r3, #22
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	2001      	movs	r0, #1
 8005fbc:	e7e7      	b.n	8005f8e <_raise_r+0x12>
 8005fbe:	2400      	movs	r4, #0
 8005fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	4798      	blx	r3
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e7e0      	b.n	8005f8e <_raise_r+0x12>

08005fcc <raise>:
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <raise+0xc>)
 8005fce:	4601      	mov	r1, r0
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f7ff bfd3 	b.w	8005f7c <_raise_r>
 8005fd6:	bf00      	nop
 8005fd8:	20000040 	.word	0x20000040

08005fdc <_kill_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d07      	ldr	r5, [pc, #28]	; (8005ffc <_kill_r+0x20>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	f7fc f9cb 	bl	8002384 <_kill>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d102      	bne.n	8005ff8 <_kill_r+0x1c>
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	b103      	cbz	r3, 8005ff8 <_kill_r+0x1c>
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200002cc 	.word	0x200002cc

08006000 <_getpid_r>:
 8006000:	f7fc b9b8 	b.w	8002374 <_getpid>

08006004 <__sread>:
 8006004:	b510      	push	{r4, lr}
 8006006:	460c      	mov	r4, r1
 8006008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600c:	f000 f894 	bl	8006138 <_read_r>
 8006010:	2800      	cmp	r0, #0
 8006012:	bfab      	itete	ge
 8006014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006016:	89a3      	ldrhlt	r3, [r4, #12]
 8006018:	181b      	addge	r3, r3, r0
 800601a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800601e:	bfac      	ite	ge
 8006020:	6563      	strge	r3, [r4, #84]	; 0x54
 8006022:	81a3      	strhlt	r3, [r4, #12]
 8006024:	bd10      	pop	{r4, pc}

08006026 <__swrite>:
 8006026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602a:	461f      	mov	r7, r3
 800602c:	898b      	ldrh	r3, [r1, #12]
 800602e:	05db      	lsls	r3, r3, #23
 8006030:	4605      	mov	r5, r0
 8006032:	460c      	mov	r4, r1
 8006034:	4616      	mov	r6, r2
 8006036:	d505      	bpl.n	8006044 <__swrite+0x1e>
 8006038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603c:	2302      	movs	r3, #2
 800603e:	2200      	movs	r2, #0
 8006040:	f000 f868 	bl	8006114 <_lseek_r>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800604a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	4632      	mov	r2, r6
 8006052:	463b      	mov	r3, r7
 8006054:	4628      	mov	r0, r5
 8006056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800605a:	f000 b817 	b.w	800608c <_write_r>

0800605e <__sseek>:
 800605e:	b510      	push	{r4, lr}
 8006060:	460c      	mov	r4, r1
 8006062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006066:	f000 f855 	bl	8006114 <_lseek_r>
 800606a:	1c43      	adds	r3, r0, #1
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	bf15      	itete	ne
 8006070:	6560      	strne	r0, [r4, #84]	; 0x54
 8006072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800607a:	81a3      	strheq	r3, [r4, #12]
 800607c:	bf18      	it	ne
 800607e:	81a3      	strhne	r3, [r4, #12]
 8006080:	bd10      	pop	{r4, pc}

08006082 <__sclose>:
 8006082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006086:	f000 b813 	b.w	80060b0 <_close_r>
	...

0800608c <_write_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d07      	ldr	r5, [pc, #28]	; (80060ac <_write_r+0x20>)
 8006090:	4604      	mov	r4, r0
 8006092:	4608      	mov	r0, r1
 8006094:	4611      	mov	r1, r2
 8006096:	2200      	movs	r2, #0
 8006098:	602a      	str	r2, [r5, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	f7fc f9a9 	bl	80023f2 <_write>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	d102      	bne.n	80060aa <_write_r+0x1e>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	b103      	cbz	r3, 80060aa <_write_r+0x1e>
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	200002cc 	.word	0x200002cc

080060b0 <_close_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_close_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fc f9b5 	bl	800242a <_close>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_close_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_close_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	200002cc 	.word	0x200002cc

080060d0 <_fstat_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_fstat_r+0x20>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	f7fc f9b0 	bl	8002442 <_fstat>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	d102      	bne.n	80060ec <_fstat_r+0x1c>
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	b103      	cbz	r3, 80060ec <_fstat_r+0x1c>
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	bd38      	pop	{r3, r4, r5, pc}
 80060ee:	bf00      	nop
 80060f0:	200002cc 	.word	0x200002cc

080060f4 <_isatty_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d06      	ldr	r5, [pc, #24]	; (8006110 <_isatty_r+0x1c>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4604      	mov	r4, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	f7fc f9af 	bl	8002462 <_isatty>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_isatty_r+0x1a>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_isatty_r+0x1a>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	200002cc 	.word	0x200002cc

08006114 <_lseek_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	; (8006134 <_lseek_r+0x20>)
 8006118:	4604      	mov	r4, r0
 800611a:	4608      	mov	r0, r1
 800611c:	4611      	mov	r1, r2
 800611e:	2200      	movs	r2, #0
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fc f9a8 	bl	8002478 <_lseek>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_lseek_r+0x1e>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_lseek_r+0x1e>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	200002cc 	.word	0x200002cc

08006138 <_read_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	; (8006158 <_read_r+0x20>)
 800613c:	4604      	mov	r4, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fc f936 	bl	80023b8 <_read>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_read_r+0x1e>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_read_r+0x1e>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200002cc 	.word	0x200002cc

0800615c <_gettimeofday>:
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <_gettimeofday+0xc>)
 800615e:	2258      	movs	r2, #88	; 0x58
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	4770      	bx	lr
 8006168:	200002cc 	.word	0x200002cc

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
